{
    "dr7f701271_0.h": {},
    "if_rte_ctrl_sg.h": {},
    "if_rte_pf_sg.h": {},
    "iodef.h": {},
    "system.h": {},
    "mot_type.h": {},
    "fs_cfg.h": {},
    "fs_cfg_tbl.h": {},
    "fs_fs_ang.h": {},
    "fs_fs_app.h": {},
    "fs_fs_bat.h": {},
    "fs_fs_can.h": {},
    "fs_fs_cmn.h": {},
    "fs_fs_cur.h": {},
    "fs_fs_hp.h": {},
    "fs_fs_hw.h": {},
    "fs_fs_mcu.h": {},
    "fs_fs_mot.h": {},
    "fs_fs_tmp.h": {},
    "fs_if.h": {},
    "fs_sp_cfg.h": {},
    "fs_wlp.h": {},
    "if_fs.h": {
        "IfFs_SetFlg_DiagWlpReq": [
            "inline static\tVOID\tIfFs_SetFlg_DiagWlpReq( const FLAG indat )"
        ],
        "IfFs_GetFlg_DiagWlpReq": [
            "inline static\tFLAG\tIfFs_GetFlg_DiagWlpReq( VOID )"
        ],
        "IfFs_SetFlg_DiagMidReq": [
            "inline static\tVOID\tIfFs_SetFlg_DiagMidReq( const FLAG indat )"
        ],
        "IfFs_GetFlg_DiagMidReq": [
            "inline static\tFLAG\tIfFs_GetFlg_DiagMidReq( VOID )"
        ],
        "IfFs_SetFlg_SysTempOvrIndReq": [
            "inline static\tVOID\tIfFs_SetFlg_SysTempOvrIndReq( const FLAG indat )"
        ],
        "IfFs_GetFlg_SysTempOvrIndReq": [
            "inline static\tFLAG\tIfFs_GetFlg_SysTempOvrIndReq( VOID )"
        ],
        "IfFs_SetFlg_RepairIndReq": [
            "inline static\tVOID\tIfFs_SetFlg_RepairIndReq( const FLAG indat )"
        ],
        "IfFs_GetFlg_RepairIndReq": [
            "inline static\tFLAG\tIfFs_GetFlg_RepairIndReq( VOID )"
        ],
        "IfFs_SetFlg_CanChkCnl2": [
            "inline static\tVOID\tIfFs_SetFlg_CanChkCnl2( const FLAG indat )"
        ],
        "IfFs_GetFlg_CanChkCnl2": [
            "inline static\tFLAG\tIfFs_GetFlg_CanChkCnl2( VOID )"
        ],
        "IfFs_Set_Iqt_Lim_PpHeat1": [
            "inline static\tVOID\tIfFs_Set_Iqt_Lim_PpHeat1( const USHORT indat )"
        ],
        "IfFs_Get_Iqt_Lim_PpHeat1": [
            "inline static\tUSHORT\tIfFs_Get_Iqt_Lim_PpHeat1( VOID )"
        ],
        "IfFs_Set_Iqt_Lim_PpHeat2": [
            "inline static\tVOID\tIfFs_Set_Iqt_Lim_PpHeat2( const USHORT indat )"
        ],
        "IfFs_Get_Iqt_Lim_PpHeat2": [
            "inline static\tUSHORT\tIfFs_Get_Iqt_Lim_PpHeat2( VOID )"
        ],
        "IfFs_Set_IdcMaxHold": [
            "inline static\tVOID\tIfFs_Set_IdcMaxHold( const ULONG indat )"
        ],
        "IfFs_Get_IdcMaxHold": [
            "inline static\tULONG\tIfFs_Get_IdcMaxHold( VOID )"
        ]
    },
    "csw_mdl.h": {},
    "if_mdl_CurrentSensorAbstr.h": {
        "IfMdl_Set_Pe1AdIu": [
            "inline static\tVOID\tIfMdl_Set_Pe1AdIu( VOID )"
        ],
        "IfMdl_Get_Pe1AdIu": [
            "inline static\tUSHORT\tIfMdl_Get_Pe1AdIu( VOID )"
        ],
        "IfMdl_Set_Pe2AdIu": [
            "inline static\tVOID\tIfMdl_Set_Pe2AdIu( VOID )"
        ],
        "IfMdl_Get_Pe2AdIu": [
            "inline static\tUSHORT\tIfMdl_Get_Pe2AdIu( VOID )"
        ],
        "IfMdl_Set_Pe1AdIv": [
            "inline static\tVOID\tIfMdl_Set_Pe1AdIv( VOID )"
        ],
        "IfMdl_Get_Pe1AdIv": [
            "inline static\tUSHORT\tIfMdl_Get_Pe1AdIv( VOID )"
        ],
        "IfMdl_Set_Pe2AdIv": [
            "inline static\tVOID\tIfMdl_Set_Pe2AdIv( VOID )"
        ],
        "IfMdl_Get_Pe2AdIv": [
            "inline static\tUSHORT\tIfMdl_Get_Pe2AdIv( VOID )"
        ],
        "IfMdl_Set_Pe1AdIw": [
            "inline static\tVOID\tIfMdl_Set_Pe1AdIw( VOID )"
        ],
        "IfMdl_Get_Pe1AdIw": [
            "inline static\tUSHORT\tIfMdl_Get_Pe1AdIw( VOID )"
        ],
        "IfMdl_Set_Pe2AdIw": [
            "inline static\tVOID\tIfMdl_Set_Pe2AdIw( VOID )"
        ],
        "IfMdl_Get_Pe2AdIw": [
            "inline static\tUSHORT\tIfMdl_Get_Pe2AdIw( VOID )"
        ],
        "IfMdl_SetFlg_Pe1OverCurrentSts": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe1OverCurrentSts( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe1OverCurrentSts": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe1OverCurrentSts( VOID )"
        ],
        "IfMdl_SetFlg_Pe2OverCurrentSts": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe2OverCurrentSts( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe2OverCurrentSts": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe2OverCurrentSts( VOID )"
        ],
        "IfMdl_Set_Pe1IuvwSum_Diag": [
            "inline static\tVOID\tIfMdl_Set_Pe1IuvwSum_Diag( const LONG indat )"
        ],
        "IfMdl_Get_Pe1IuvwSum_Diag": [
            "inline static\tLONG\tIfMdl_Get_Pe1IuvwSum_Diag( VOID )"
        ],
        "IfMdl_Set_Pe2IuvwSum_Diag": [
            "inline static\tVOID\tIfMdl_Set_Pe2IuvwSum_Diag( const LONG indat )"
        ],
        "IfMdl_Get_Pe2IuvwSum_Diag": [
            "inline static\tLONG\tIfMdl_Get_Pe2IuvwSum_Diag( VOID )"
        ],
        "IfMdl_SetFlg_Pe1_CurSum_CheckExe": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe1_CurSum_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe1_CurSum_CheckExe": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe1_CurSum_CheckExe( VOID )"
        ],
        "IfMdl_SetFlg_Pe2_CurSum_CheckExe": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe2_CurSum_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe2_CurSum_CheckExe": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe2_CurSum_CheckExe( VOID )"
        ],
        "IfMdl_Set_Mon_B_Prot_Pe1_Mon_Curr_Out_Rng": [
            "inline static\tVOID\tIfMdl_Set_Mon_B_Prot_Pe1_Mon_Curr_Out_Rng( const FLAG sts )"
        ],
        "IfMdl_Get_Mon_B_Prot_Pe1_Mon_Curr_Out_Rng": [
            "inline static\tuint8\tIfMdl_Get_Mon_B_Prot_Pe1_Mon_Curr_Out_Rng( VOID )"
        ],
        "IfMdl_Set_Mon_B_Prot_Pe2_Mon_Curr_Out_Rng": [
            "inline static\tVOID\tIfMdl_Set_Mon_B_Prot_Pe2_Mon_Curr_Out_Rng( const FLAG sts )"
        ],
        "IfMdl_Get_Mon_B_Prot_Pe2_Mon_Curr_Out_Rng": [
            "inline static\tuint8\tIfMdl_Get_Mon_B_Prot_Pe2_Mon_Curr_Out_Rng( VOID )"
        ],
        "IfMdl_Set_Pe1Iu_rms": [
            "inline static\tVOID\tIfMdl_Set_Pe1Iu_rms( const FLOAT indat )"
        ],
        "IfMdl_Get_Pe1Iu_rms": [
            "inline static\tFLOAT\tIfMdl_Get_Pe1Iu_rms( VOID )"
        ],
        "IfMdl_Set_Pe2Iu_rms": [
            "inline static\tVOID\tIfMdl_Set_Pe2Iu_rms( const FLOAT indat )"
        ],
        "IfMdl_Get_Pe2Iu_rms": [
            "inline static\tFLOAT\tIfMdl_Get_Pe2Iu_rms( VOID )"
        ],
        "IfMdl_Set_Pe1Iv_rms": [
            "inline static\tVOID\tIfMdl_Set_Pe1Iv_rms( const FLOAT indat )"
        ],
        "IfMdl_Get_Pe1Iv_rms": [
            "inline static\tFLOAT\tIfMdl_Get_Pe1Iv_rms( VOID )"
        ],
        "IfMdl_Set_Pe2Iv_rms": [
            "inline static\tVOID\tIfMdl_Set_Pe2Iv_rms( const FLOAT indat )"
        ],
        "IfMdl_Get_Pe2Iv_rms": [
            "inline static\tFLOAT\tIfMdl_Get_Pe2Iv_rms( VOID )"
        ],
        "IfMdl_Set_Pe1Iw_rms": [
            "inline static\tVOID\tIfMdl_Set_Pe1Iw_rms( const FLOAT indat )"
        ],
        "IfMdl_Get_Pe1Iw_rms": [
            "inline static\tFLOAT\tIfMdl_Get_Pe1Iw_rms( VOID )"
        ],
        "IfMdl_Set_Pe2Iw_rms": [
            "inline static\tVOID\tIfMdl_Set_Pe2Iw_rms( const FLOAT indat )"
        ],
        "IfMdl_Get_Pe2Iw_rms": [
            "inline static\tFLOAT\tIfMdl_Get_Pe2Iw_rms( VOID )"
        ],
        "IfMdl_SetFlg_Pe1_Ocp_Original": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Pe1_Ocp_Original( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe1_Ocp_Original": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Pe1_Ocp_Original( VOID )"
        ],
        "IfMdl_SetFlg_Pe1_Ocp": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Pe1_Ocp( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe1_Ocp": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Pe1_Ocp( VOID )"
        ],
        "IfMdl_SetFlg_Pe1_Ocp_Latch": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Pe1_Ocp_Latch( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe1_Ocp_Latch": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Pe1_Ocp_Latch( VOID )"
        ],
        "IfMdl_Set_Pe1_Ocp": [
            "inline\tstatic\tVOID\tIfMdl_Set_Pe1_Ocp( VOID )"
        ],
        "IfMdl_Get_Pe1_Ocp": [
            "inline\tstatic\tUCHAR\tIfMdl_Get_Pe1_Ocp( VOID )"
        ],
        "IfMdl_SetFlg_Pe2_Ocp_Original": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Pe2_Ocp_Original( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe2_Ocp_Original": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Pe2_Ocp_Original( VOID )"
        ],
        "IfMdl_SetFlg_Pe2_Ocp": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Pe2_Ocp( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe2_Ocp": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Pe2_Ocp( VOID )"
        ],
        "IfMdl_SetFlg_Pe2_Ocp_Latch": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Pe2_Ocp_Latch( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe2_Ocp_Latch": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Pe2_Ocp_Latch( VOID )"
        ],
        "IfMdl_Set_Pe2_Ocp": [
            "inline\tstatic\tVOID\tIfMdl_Set_Pe2_Ocp( VOID )"
        ],
        "IfMdl_Get_Pe2_Ocp": [
            "inline\tstatic\tUCHAR\tIfMdl_Get_Pe2_Ocp( VOID )"
        ],
        "IfMdl_SetFlg_Pe1_HwOcp_CheckExe": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Pe1_HwOcp_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe1_HwOcp_CheckExe": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Pe1_HwOcp_CheckExe( VOID )"
        ],
        "IfMdl_SetFlg_Pe2_HwOcp_CheckExe": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Pe2_HwOcp_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe2_HwOcp_CheckExe": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Pe2_HwOcp_CheckExe( VOID )"
        ]
    },
    "if_mdl_DCCurrsens.h": {
        "IfMdl_Set_Ad_DcdcLinkCur": [
            "inline static\tVOID\tIfMdl_Set_Ad_DcdcLinkCur( VOID )"
        ],
        "IfMdl_Get_Ad_DcdcLinkCur": [
            "inline static\tUSHORT\tIfMdl_Get_Ad_DcdcLinkCur( VOID )"
        ],
        "IfMdl_Set_Ad_DcdcLinkCur_Lpf": [
            "inline static\tVOID\tIfMdl_Set_Ad_DcdcLinkCur_Lpf( const USHORT indat )"
        ],
        "IfMdl_Get_Ad_DcdcLinkCur_Lpf": [
            "inline static\tUSHORT\tIfMdl_Get_Ad_DcdcLinkCur_Lpf( VOID )"
        ],
        "IfMdl_Set_Ad_DcdcBattCur1": [
            "inline static\tVOID\tIfMdl_Set_Ad_DcdcBattCur1( VOID )"
        ],
        "IfMdl_Get_Ad_DcdcBattCur1": [
            "inline static\tUSHORT\tIfMdl_Get_Ad_DcdcBattCur1( VOID )"
        ],
        "IfMdl_Set_Ad_DcdcBattCur1_Lpf": [
            "inline static\tVOID\tIfMdl_Set_Ad_DcdcBattCur1_Lpf( const USHORT indat )"
        ],
        "IfMdl_Get_Ad_DcdcBattCur1_Lpf": [
            "inline static\tUSHORT\tIfMdl_Get_Ad_DcdcBattCur1_Lpf( VOID )"
        ],
        "IfMdl_Set_Ad_DcdcBattCur2": [
            "inline static\tVOID\tIfMdl_Set_Ad_DcdcBattCur2( VOID )"
        ],
        "IfMdl_Get_Ad_DcdcBattCur2": [
            "inline static\tUSHORT\tIfMdl_Get_Ad_DcdcBattCur2( VOID )"
        ],
        "IfMdl_Set_Ad_DcdcBattCur2_Lpf": [
            "inline static\tVOID\tIfMdl_Set_Ad_DcdcBattCur2_Lpf( const USHORT indat )"
        ],
        "IfMdl_Get_Ad_DcdcBattCur2_Lpf": [
            "inline static\tUSHORT\tIfMdl_Get_Ad_DcdcBattCur2_Lpf( VOID )"
        ],
        "IfMdl_Set_Ad_DcdcBattCur3": [
            "inline static\tVOID\tIfMdl_Set_Ad_DcdcBattCur3( VOID )"
        ],
        "IfMdl_Get_Ad_DcdcBattCur3": [
            "inline static\tUSHORT\tIfMdl_Get_Ad_DcdcBattCur3( VOID )"
        ],
        "IfMdl_Set_Ad_DcdcBattCur3_Lpf": [
            "inline static\tVOID\tIfMdl_Set_Ad_DcdcBattCur3_Lpf( const USHORT indat )"
        ],
        "IfMdl_Get_Ad_DcdcBattCur3_Lpf": [
            "inline static\tUSHORT\tIfMdl_Get_Ad_DcdcBattCur3_Lpf( VOID )"
        ],
        "IfMdl_SetFlg_DcLinkOverCur": [
            "inline static\tVOID\tIfMdl_SetFlg_DcLinkOverCur( const FLAG indat )"
        ],
        "IfMdl_GetFlg_DcLinkOverCur": [
            "inline static\tFLAG\tIfMdl_GetFlg_DcLinkOverCur( VOID )"
        ],
        "IfMdl_SetFlg_DcBattOverCur1": [
            "inline static\tVOID\tIfMdl_SetFlg_DcBattOverCur1( const FLAG indat )"
        ],
        "IfMdl_GetFlg_DcBattOverCur1": [
            "inline static\tFLAG\tIfMdl_GetFlg_DcBattOverCur1( VOID )"
        ],
        "IfMdl_SetFlg_DcBattOverCur2": [
            "inline static\tVOID\tIfMdl_SetFlg_DcBattOverCur2( const FLAG indat )"
        ],
        "IfMdl_GetFlg_DcBattOverCur2": [
            "inline static\tFLAG\tIfMdl_GetFlg_DcBattOverCur2( VOID )"
        ],
        "IfMdl_SetFlg_DcBattOverCur3": [
            "inline static\tVOID\tIfMdl_SetFlg_DcBattOverCur3( const FLAG indat )"
        ],
        "IfMdl_GetFlg_DcBattOverCur3": [
            "inline static\tFLAG\tIfMdl_GetFlg_DcBattOverCur3( VOID )"
        ],
        "IfMdl_Set_DcdcLinkCur": [
            "inline static\tVOID\tIfMdl_Set_DcdcLinkCur( const SHORT indat )"
        ],
        "IfMdl_Get_DcdcLinkCur": [
            "inline static\tSHORT\tIfMdl_Get_DcdcLinkCur( VOID )"
        ],
        "IfMdl_Set_DcdcBattCur1": [
            "inline static\tVOID\tIfMdl_Set_DcdcBattCur1( const SHORT indat )"
        ],
        "IfMdl_Get_DcdcBattCur1": [
            "inline static\tSHORT\tIfMdl_Get_DcdcBattCur1( VOID )"
        ],
        "IfMdl_Set_DcdcBattCur1Max": [
            "inline static\tVOID\tIfMdl_Set_DcdcBattCur1Max( const SHORT indat )"
        ],
        "IfMdl_Get_DcdcBattCur1Max": [
            "inline static\tSHORT\tIfMdl_Get_DcdcBattCur1Max( VOID )"
        ],
        "IfMdl_Set_DcdcBattCur2": [
            "inline static\tVOID\tIfMdl_Set_DcdcBattCur2( const SHORT indat )"
        ],
        "IfMdl_Get_DcdcBattCur2": [
            "inline static\tSHORT\tIfMdl_Get_DcdcBattCur2( VOID )"
        ],
        "IfMdl_Set_DcdcBattCur2Max": [
            "inline static\tVOID\tIfMdl_Set_DcdcBattCur2Max( const SHORT indat )"
        ],
        "IfMdl_Get_DcdcBattCur2Max": [
            "inline static\tSHORT\tIfMdl_Get_DcdcBattCur2Max( VOID )"
        ],
        "IfMdl_Set_DcdcBattCur3": [
            "inline static\tVOID\tIfMdl_Set_DcdcBattCur3( const SHORT indat )"
        ],
        "IfMdl_Get_DcdcBattCur3": [
            "inline static\tSHORT\tIfMdl_Get_DcdcBattCur3( VOID )"
        ],
        "IfMdl_Set_DcdcBattCur3Max": [
            "inline static\tVOID\tIfMdl_Set_DcdcBattCur3Max( const SHORT indat )"
        ],
        "IfMdl_Get_DcdcBattCur3Max": [
            "inline static\tSHORT\tIfMdl_Get_DcdcBattCur3Max( VOID )"
        ],
        "IfMdl_Set_DcdcBattCurTotal": [
            "inline static\tVOID\tIfMdl_Set_DcdcBattCurTotal( const SHORT indat )"
        ],
        "IfMdl_Get_DcdcBattCurTotal": [
            "inline static\tSHORT\tIfMdl_Get_DcdcBattCurTotal( VOID )"
        ],
        "IfMdl_Set_DcdcBattCurTotalMax": [
            "inline static\tVOID\tIfMdl_Set_DcdcBattCurTotalMax( const SHORT indat )"
        ],
        "IfMdl_Get_DcdcBattCurTotalMax": [
            "inline static\tSHORT\tIfMdl_Get_DcdcBattCurTotalMax( VOID )"
        ],
        "IfMdl_SetFlg_DcBattOverCurTotal": [
            "inline static\tVOID\tIfMdl_SetFlg_DcBattOverCurTotal( const FLAG indat )"
        ],
        "IfMdl_GetFlg_DcBattOverCurTotal": [
            "inline static\tFLAG\tIfMdl_GetFlg_DcBattOverCurTotal( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Batt_Ocp_Original": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_Batt_Ocp_Original( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Batt_Ocp_Original": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_Batt_Ocp_Original( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Batt_Ocp": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_Batt_Ocp( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Batt_Ocp": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_Batt_Ocp( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Batt_Ocp_Latch": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_Batt_Ocp_Latch( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Batt_Ocp_Latch": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_Batt_Ocp_Latch( VOID )"
        ],
        "IfMdl_Set_Dcdc_Batt_Ocp": [
            "inline\tstatic\tVOID\tIfMdl_Set_Dcdc_Batt_Ocp( VOID )"
        ],
        "IfMdl_Get_Dcdc_Batt_Ocp": [
            "inline\tstatic\tUCHAR\tIfMdl_Get_Dcdc_Batt_Ocp( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Batt1_Ocp_Original": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_Batt1_Ocp_Original( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Batt1_Ocp_Original": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_Batt1_Ocp_Original( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Batt1_Ocp": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_Batt1_Ocp( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Batt1_Ocp": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_Batt1_Ocp( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Batt1_Ocp_Latch": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_Batt1_Ocp_Latch( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Batt1_Ocp_Latch": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_Batt1_Ocp_Latch( VOID )"
        ],
        "IfMdl_Set_Dcdc_Batt1_Ocp": [
            "inline\tstatic\tVOID\tIfMdl_Set_Dcdc_Batt1_Ocp( VOID )"
        ],
        "IfMdl_Get_Dcdc_Batt1_Ocp": [
            "inline\tstatic\tUCHAR\tIfMdl_Get_Dcdc_Batt1_Ocp( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Batt2_Ocp_Original": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_Batt2_Ocp_Original( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Batt2_Ocp_Original": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_Batt2_Ocp_Original( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Batt2_Ocp": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_Batt2_Ocp( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Batt2_Ocp": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_Batt2_Ocp( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Batt2_Ocp_Latch": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_Batt2_Ocp_Latch( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Batt2_Ocp_Latch": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_Batt2_Ocp_Latch( VOID )"
        ],
        "IfMdl_Set_Dcdc_Batt2_Ocp": [
            "inline\tstatic\tVOID\tIfMdl_Set_Dcdc_Batt2_Ocp( VOID )"
        ],
        "IfMdl_Get_Dcdc_Batt2_Ocp": [
            "inline\tstatic\tUCHAR\tIfMdl_Get_Dcdc_Batt2_Ocp( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Batt3_Ocp_Original": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_Batt3_Ocp_Original( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Batt3_Ocp_Original": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_Batt3_Ocp_Original( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Batt3_Ocp": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_Batt3_Ocp( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Batt3_Ocp": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_Batt3_Ocp( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Batt3_Ocp_Latch": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_Batt3_Ocp_Latch( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Batt3_Ocp_Latch": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_Batt3_Ocp_Latch( VOID )"
        ],
        "IfMdl_Set_Dcdc_Batt3_Ocp": [
            "inline\tstatic\tVOID\tIfMdl_Set_Dcdc_Batt3_Ocp( VOID )"
        ],
        "IfMdl_Get_Dcdc_Batt3_Ocp": [
            "inline\tstatic\tUCHAR\tIfMdl_Get_Dcdc_Batt3_Ocp( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Batt_HwOcp_CheckExe": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_Batt_HwOcp_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Batt_HwOcp_CheckExe": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_Batt_HwOcp_CheckExe( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Batt1_HwOcp_CheckExe": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_Batt1_HwOcp_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Batt1_HwOcp_CheckExe": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_Batt1_HwOcp_CheckExe( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Batt2_HwOcp_CheckExe": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_Batt2_HwOcp_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Batt2_HwOcp_CheckExe": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_Batt2_HwOcp_CheckExe( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Batt3_HwOcp_CheckExe": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_Batt3_HwOcp_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Batt3_HwOcp_CheckExe": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_Batt3_HwOcp_CheckExe( VOID )"
        ],
        "IfMdl_Set_Ad_DcConnectorCur": [
            "inline static\tVOID\tIfMdl_Set_Ad_DcConnectorCur( VOID )"
        ],
        "IfMdl_Get_Ad_DcConnectorCur": [
            "inline static\tUSHORT\tIfMdl_Get_Ad_DcConnectorCur( VOID )"
        ],
        "IfMdl_Set_DcConnectorCur": [
            "inline static\tVOID\tIfMdl_Set_DcConnectorCur( const SHORT indat )"
        ],
        "IfMdl_Get_DcConnectorCur": [
            "inline static\tSHORT\tIfMdl_Get_DcConnectorCur( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_DcLink_Ocp_Original": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_DcLink_Ocp_Original( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_DcLink_Ocp_Original": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_DcLink_Ocp_Original( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_DcLink_Ocp": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_DcLink_Ocp( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_DcLink_Ocp": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_DcLink_Ocp( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_DcLink_Ocp_Latch": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_DcLink_Ocp_Latch( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_DcLink_Ocp_Latch": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_DcLink_Ocp_Latch( VOID )"
        ],
        "IfMdl_Set_Dcdc_DcLink_Ocp": [
            "inline\tstatic\tVOID\tIfMdl_Set_Dcdc_DcLink_Ocp( VOID )"
        ],
        "IfMdl_Get_Dcdc_DcLink_Ocp": [
            "inline\tstatic\tUCHAR\tIfMdl_Get_Dcdc_DcLink_Ocp( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_DcLink_HwOcp_CheckExe": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_DcLink_HwOcp_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_DcLink_HwOcp_CheckExe": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_DcLink_HwOcp_CheckExe( VOID )"
        ]
    },
    "if_mdl_dcdc.h": {
        "IfMdl_SetFlg_DcdcFlt_Original": [
            "inline static\tVOID\tIfMdl_SetFlg_DcdcFlt_Original( const FLAG indat, const UCHAR num )"
        ],
        "IfMdl_GetFlg_DcdcFlt_Original": [
            "inline static\tFLAG\tIfMdl_GetFlg_DcdcFlt_Original( const UCHAR num )"
        ],
        "IfMdl_SetFlg_DcdcFlt": [
            "inline static\tVOID\tIfMdl_SetFlg_DcdcFlt( const FLAG indat, const UCHAR num )"
        ],
        "IfMdl_GetFlg_DcdcFlt": [
            "inline static\tFLAG\tIfMdl_GetFlg_DcdcFlt( const UCHAR num )"
        ],
        "IfMdl_Set_DcdcFlt": [
            "inline static VOID IfMdl_Set_DcdcFlt( VOID )"
        ],
        "IfMdl_Get_DcdcFlt": [
            "inline static UCHAR IfMdl_Get_DcdcFlt( const UCHAR num )"
        ],
        "IfMdl_Set_DcdcEn": [
            "inline static\tVOID\tIfMdl_Set_DcdcEn( const FLAG out_req )"
        ],
        "IfMdl_SetFlg_DcdcEnReqPrg": [
            "inline static\tVOID\tIfMdl_SetFlg_DcdcEnReqPrg( const FLAG indat )"
        ],
        "IfMdl_GetFlg_DcdcEnReqPrg": [
            "inline static\tFLAG\tIfMdl_GetFlg_DcdcEnReqPrg( VOID )"
        ],
        "IfMdl_Set_SysReq_DcdcEn": [
            "inline static\tVOID\tIfMdl_Set_SysReq_DcdcEn( const UCHAR indat )"
        ],
        "IfMdl_Get_SysReq_DcdcEn": [
            "inline static\tUCHAR\tIfMdl_Get_SysReq_DcdcEn( VOID )"
        ],
        "IfMdl_SetFlg_ExHandle_DcdcEn": [
            "inline static\tVOID\tIfMdl_SetFlg_ExHandle_DcdcEn( const FLAG indat )"
        ],
        "IfMdl_GetFlg_ExHandle_DcdcEn": [
            "inline static\tFLAG\tIfMdl_GetFlg_ExHandle_DcdcEn( VOID )"
        ],
        "IfMdl_Set_DcdcFlbk": [
            "inline static\tVOID\tIfMdl_Set_DcdcFlbk( const FLAG out_req )"
        ],
        "IfMdl_SetFlg_DcdcFlbkReqPrg": [
            "inline static\tVOID\tIfMdl_SetFlg_DcdcFlbkReqPrg( const FLAG indat )"
        ],
        "IfMdl_GetFlg_DcdcFlbkReqPrg": [
            "inline static\tFLAG\tIfMdl_GetFlg_DcdcFlbkReqPrg( VOID )"
        ],
        "IfMdl_Set_SysReq_DcdcFlbk": [
            "inline static\tVOID\tIfMdl_Set_SysReq_DcdcFlbk( const UCHAR indat )"
        ],
        "IfMdl_Get_SysReq_DcdcFlbk": [
            "inline static\tUCHAR\tIfMdl_Get_SysReq_DcdcFlbk( VOID )"
        ],
        "IfMdl_SetFlg_ExHandle_DcdcFlbk": [
            "inline static\tVOID\tIfMdl_SetFlg_ExHandle_DcdcFlbk( const FLAG indat )"
        ],
        "IfMdl_GetFlg_ExHandle_DcdcFlbk": [
            "inline static\tFLAG\tIfMdl_GetFlg_ExHandle_DcdcFlbk( VOID )"
        ],
        "IfMdl_Set_DcdcRst": [
            "inline static\tVOID\tIfMdl_Set_DcdcRst( const FLAG out_req )"
        ],
        "IfMdl_SetFlg_DcdcRstReqPrg": [
            "inline static\tVOID\tIfMdl_SetFlg_DcdcRstReqPrg( const FLAG indat )"
        ],
        "IfMdl_GetFlg_DcdcRstReqPrg": [
            "inline static\tFLAG\tIfMdl_GetFlg_DcdcRstReqPrg( VOID )"
        ],
        "IfMdl_Set_SysReq_DcdcRst": [
            "inline static\tVOID\tIfMdl_Set_SysReq_DcdcRst( const UCHAR indat )"
        ],
        "IfMdl_Get_SysReq_DcdcRst": [
            "inline static\tUCHAR\tIfMdl_Get_SysReq_DcdcRst( VOID )"
        ],
        "IfMdl_SetFlg_ExHandle_DcdcRst": [
            "inline static\tVOID\tIfMdl_SetFlg_ExHandle_DcdcRst( const FLAG indat )"
        ],
        "IfMdl_GetFlg_ExHandle_DcdcRst": [
            "inline static\tFLAG\tIfMdl_GetFlg_ExHandle_DcdcRst( VOID )"
        ],
        "IfMdl_Set_DcdcOnTrigerPeriod1L": [
            "inline static\tVOID\tIfMdl_Set_DcdcOnTrigerPeriod1L( const USHORT indat )"
        ],
        "IfMdl_Get_DcdcOnTrigerPeriod1L": [
            "inline static\tUSHORT\tIfMdl_Get_DcdcOnTrigerPeriod1L( VOID )"
        ],
        "IfMdl_Set_DcdcOnTime1L": [
            "inline static\tVOID\tIfMdl_Set_DcdcOnTime1L( const USHORT indat )"
        ],
        "IfMdl_Get_DcdcOnTime1L": [
            "inline static\tUSHORT\tIfMdl_Get_DcdcOnTime1L( VOID )"
        ],
        "IfMdl_Set_DcdcOffTime1L": [
            "inline static\tVOID\tIfMdl_Set_DcdcOffTime1L( const USHORT indat )"
        ],
        "IfMdl_Get_DcdcOffTime1L": [
            "inline static\tUSHORT\tIfMdl_Get_DcdcOffTime1L( VOID )"
        ],
        "IfMdl_Set_DcdcRingingTime": [
            "inline static\tVOID\tIfMdl_Set_DcdcRingingTime( const USHORT indat )"
        ],
        "IfMdl_Get_DcdcRingingTime": [
            "inline static\tUSHORT\tIfMdl_Get_DcdcRingingTime( VOID )"
        ],
        "IfMdl_Set_DcdcDuty": [
            "inline static\tVOID\tIfMdl_Set_DcdcDuty( const FLOAT indat )"
        ],
        "IfMdl_Get_DcdcDuty": [
            "inline static\tFLOAT\tIfMdl_Get_DcdcDuty( VOID )"
        ],
        "IfMdl_Set_DcdcPWMFreqActVal": [
            "inline static\tVOID\tIfMdl_Set_DcdcPWMFreqActVal( const FLOAT indat )"
        ],
        "IfMdl_Get_DcdcPWMFreqActVal": [
            "inline static\tFLOAT\tIfMdl_Get_DcdcPWMFreqActVal( VOID )"
        ],
        "IfMdl_Set_DcdcLinkTarVol": [
            "inline static\tVOID\tIfMdl_Set_DcdcLinkTarVol( const USHORT indat )"
        ],
        "IfMdl_Get_DcdcLinkTarVol": [
            "inline static\tUSHORT\tIfMdl_Get_DcdcLinkTarVol( VOID )"
        ],
        "IfMdl_Set_DcdcLinkTarVolRateLim": [
            "inline static\tVOID\tIfMdl_Set_DcdcLinkTarVolRateLim( const USHORT indat )"
        ],
        "IfMdl_Get_DcdcLinkTarVolRateLim": [
            "inline static\tUSHORT\tIfMdl_Get_DcdcLinkTarVolRateLim( VOID )"
        ],
        "IfMdl_Set_DcdcDeratFact": [
            "inline static\tVOID\tIfMdl_Set_DcdcDeratFact( const FLOAT indat )"
        ],
        "IfMdl_Get_DcdcDeratFact": [
            "inline static\tFLOAT\tIfMdl_Get_DcdcDeratFact( VOID )"
        ],
        "IfMdl_Set_ReqDcdcStatus": [
            "inline static\tVOID\tIfMdl_Set_ReqDcdcStatus( const UCHAR indat )"
        ],
        "IfMdl_Get_ReqDcdcStatus": [
            "inline static\tUCHAR\tIfMdl_Get_ReqDcdcStatus( VOID )"
        ],
        "IfMdl_Set_DcdcStatus": [
            "inline static\tVOID\tIfMdl_Set_DcdcStatus( const UCHAR indat )"
        ],
        "IfMdl_Get_DcdcStatus": [
            "inline static\tUCHAR\tIfMdl_Get_DcdcStatus( VOID )"
        ],
        "IfMdl_Set_DcdcFwReq": [
            "inline static\tVOID\tIfMdl_Set_DcdcFwReq( const FLAG indat )"
        ],
        "IfMdl_Get_DcdcFwReq": [
            "inline static\tFLAG\tIfMdl_Get_DcdcFwReq( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Batt_Ovp_1L": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_Batt_Ovp_1L( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Batt_Ovp_1L": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_Batt_Ovp_1L( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Link_Ovp_1L": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_Link_Ovp_1L( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Link_Ovp_1L": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_Link_Ovp_1L( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Batt_Ocp_1L": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_Batt_Ocp_1L( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Batt_Ocp_1L": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_Batt_Ocp_1L( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Batt1_Ocp_1L": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_Batt1_Ocp_1L( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Batt1_Ocp_1L": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_Batt1_Ocp_1L( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Batt2_Ocp_1L": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_Batt2_Ocp_1L( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Batt2_Ocp_1L": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_Batt2_Ocp_1L( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Batt3_Ocp_1L": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_Batt3_Ocp_1L( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Batt3_Ocp_1L": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_Batt3_Ocp_1L( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Link_Ocp_1L": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Dcdc_Link_Ocp_1L( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Link_Ocp_1L": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Dcdc_Link_Ocp_1L( VOID )"
        ]
    },
    "if_mdl_fs.h": {
        "IfMdl_SetFlg_Pe1IgbtFltSts": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe1IgbtFltSts( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe1IgbtFltSts": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe1IgbtFltSts( VOID )"
        ],
        "IfMdl_SetFlg_Pe2IgbtFltSts": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe2IgbtFltSts( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe2IgbtFltSts": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe2IgbtFltSts( VOID )"
        ],
        "IfMdl_SetFlg_Pe1CurSumSts": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe1CurSumSts( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe1CurSumSts": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe1CurSumSts( VOID )"
        ],
        "IfMdl_SetFlg_Pe2CurSumSts": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe2CurSumSts( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe2CurSumSts": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe2CurSumSts( VOID )"
        ],
        "IfMdl_SetFlg_Pe1IgbtFlt_CheckExe": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe1IgbtFlt_CheckExe( const FLAG indat, const UCHAR num )"
        ],
        "IfMdl_GetFlg_Pe1IgbtFlt_CheckExe": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe1IgbtFlt_CheckExe( const UCHAR num )"
        ],
        "IfMdl_SetFlg_Pe2IgbtFlt_CheckExe": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe2IgbtFlt_CheckExe( const FLAG indat, const UCHAR num )"
        ],
        "IfMdl_GetFlg_Pe2IgbtFlt_CheckExe": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe2IgbtFlt_CheckExe( const UCHAR num )"
        ],
        "IfMdl_Set_Mon_B_Eehw_Pe1_Igbt_Flt_Sts_Actv": [
            "inline static\tVOID\tIfMdl_Set_Mon_B_Eehw_Pe1_Igbt_Flt_Sts_Actv( const UCHAR num, const FLAG indat )"
        ],
        "IfMdl_Get_Mon_B_Eehw_Pe1_Igbt_Flt_Sts_Actv": [
            "inline static\tuint8\tIfMdl_Get_Mon_B_Eehw_Pe1_Igbt_Flt_Sts_Actv( const UCHAR num )"
        ],
        "IfMdl_Set_Mon_B_Eehw_Pe2_Igbt_Flt_Sts_Actv": [
            "inline static\tVOID\tIfMdl_Set_Mon_B_Eehw_Pe2_Igbt_Flt_Sts_Actv( const UCHAR num, const FLAG indat )"
        ],
        "IfMdl_Get_Mon_B_Eehw_Pe2_Igbt_Flt_Sts_Actv": [
            "inline static\tuint8\tIfMdl_Get_Mon_B_Eehw_Pe2_Igbt_Flt_Sts_Actv( const UCHAR num )"
        ],
        "IfMdl_SetFlg_DcbattVol_CheckExe": [
            "inline static\tVOID\tIfMdl_SetFlg_DcbattVol_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_DcbattVol_CheckExe": [
            "inline static\tFLAG\tIfMdl_GetFlg_DcbattVol_CheckExe( VOID )"
        ],
        "IfMdl_Set_Mon_B_Prot_Dc_Con_Volt_Out_Rng_Hi": [
            "inline static\tVOID\tIfMdl_Set_Mon_B_Prot_Dc_Con_Volt_Out_Rng_Hi( const UCHAR indat )"
        ],
        "IfMdl_Get_Mon_B_Prot_Dc_Con_Volt_Out_Rng_Hi": [
            "inline static\tUCHAR\tIfMdl_Get_Mon_B_Prot_Dc_Con_Volt_Out_Rng_Hi( VOID )"
        ],
        "IfMdl_SetFlg_DclinkVol_CheckExe": [
            "inline static\tVOID\tIfMdl_SetFlg_DclinkVol_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_DclinkVol_CheckExe": [
            "inline static\tFLAG\tIfMdl_GetFlg_DclinkVol_CheckExe( VOID )"
        ],
        "IfMdl_Set_Mon_B_Prot_Dc_Link_Volt_Out_Rng_Hi": [
            "inline static\tVOID\tIfMdl_Set_Mon_B_Prot_Dc_Link_Volt_Out_Rng_Hi( const UCHAR indat )"
        ],
        "IfMdl_Get_Mon_B_Prot_Dc_Link_Volt_Out_Rng_Hi": [
            "inline static\tUCHAR\tIfMdl_Get_Mon_B_Prot_Dc_Link_Volt_Out_Rng_Hi( VOID )"
        ],
        "IfMdl_SetFlg_DcbattCur_CheckExe": [
            "inline static\tVOID\tIfMdl_SetFlg_DcbattCur_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_DcbattCur_CheckExe": [
            "inline static\tFLAG\tIfMdl_GetFlg_DcbattCur_CheckExe( VOID )"
        ],
        "IfMdl_Set_Mon_B_Prot_Dc_Con_Curr_Out_Rng": [
            "inline static\tVOID\tIfMdl_Set_Mon_B_Prot_Dc_Con_Curr_Out_Rng( const UCHAR indat )"
        ],
        "IfMdl_Get_Mon_B_Prot_Dc_Con_Curr_Out_Rng": [
            "inline static\tUCHAR\tIfMdl_Get_Mon_B_Prot_Dc_Con_Curr_Out_Rng( VOID )"
        ],
        "IfMdl_SetFlg_DclinkCur_CheckExe": [
            "inline static\tVOID\tIfMdl_SetFlg_DclinkCur_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_DclinkCur_CheckExe": [
            "inline static\tFLAG\tIfMdl_GetFlg_DclinkCur_CheckExe( VOID )"
        ],
        "IfMdl_Set_Mon_B_Prot_Dc_Link_Curr_Out_Rng": [
            "inline static\tVOID\tIfMdl_Set_Mon_B_Prot_Dc_Link_Curr_Out_Rng( const UCHAR indat )"
        ],
        "IfMdl_Get_Mon_B_Prot_Dc_Link_Curr_Out_Rng": [
            "inline static\tUCHAR\tIfMdl_Get_Mon_B_Prot_Dc_Link_Curr_Out_Rng( VOID )"
        ],
        "IfMdl_Set_Mon_B_Eehw_Dcdc_H_Flt_Sts_Actv": [
            "inline static\tVOID\tIfMdl_Set_Mon_B_Eehw_Dcdc_H_Flt_Sts_Actv( const UCHAR indat )"
        ],
        "IfMdl_Get_Mon_B_Eehw_Dcdc_H_Flt_Sts_Actv": [
            "inline static\tUCHAR\tIfMdl_Get_Mon_B_Eehw_Dcdc_H_Flt_Sts_Actv( VOID )"
        ],
        "IfMdl_Set_Mon_B_Eehw_Dcdc_L_Flt_Sts_Actv": [
            "inline static\tVOID\tIfMdl_Set_Mon_B_Eehw_Dcdc_L_Flt_Sts_Actv( const UCHAR indat )"
        ],
        "IfMdl_Get_Mon_B_Eehw_Dcdc_L_Flt_Sts_Actv": [
            "inline static\tUCHAR\tIfMdl_Get_Mon_B_Eehw_Dcdc_L_Flt_Sts_Actv( VOID )"
        ],
        "IfMdl_Set_Mon_B_Eehw_Dcdc_Ah_Flt_Sts_Actv": [
            "inline static\tVOID\tIfMdl_Set_Mon_B_Eehw_Dcdc_Ah_Flt_Sts_Actv( const UCHAR indat )"
        ],
        "IfMdl_Get_Mon_B_Eehw_Dcdc_Ah_Flt_Sts_Actv": [
            "inline static\tUCHAR\tIfMdl_Get_Mon_B_Eehw_Dcdc_Ah_Flt_Sts_Actv( VOID )"
        ],
        "IfMdl_Set_Mon_B_Eehw_Dcdc_Al_Flt_Sts_Actv": [
            "inline static\tVOID\tIfMdl_Set_Mon_B_Eehw_Dcdc_Al_Flt_Sts_Actv( const UCHAR indat )"
        ],
        "IfMdl_Get_Mon_B_Eehw_Dcdc_Al_Flt_Sts_Actv": [
            "inline static\tUCHAR\tIfMdl_Get_Mon_B_Eehw_Dcdc_Al_Flt_Sts_Actv( VOID )"
        ],
        "IfMdl_Set_Mon_B_Eehw_Dcdc_Bh_Flt_Sts_Actv": [
            "inline static\tVOID\tIfMdl_Set_Mon_B_Eehw_Dcdc_Bh_Flt_Sts_Actv( const UCHAR indat )"
        ],
        "IfMdl_Get_Mon_B_Eehw_Dcdc_Bh_Flt_Sts_Actv": [
            "inline static\tUCHAR\tIfMdl_Get_Mon_B_Eehw_Dcdc_Bh_Flt_Sts_Actv( VOID )"
        ],
        "IfMdl_Set_Mon_B_Eehw_Dcdc_Bl_Flt_Sts_Actv": [
            "inline static\tVOID\tIfMdl_Set_Mon_B_Eehw_Dcdc_Bl_Flt_Sts_Actv( const UCHAR indat )"
        ],
        "IfMdl_Get_Mon_B_Eehw_Dcdc_Bl_Flt_Sts_Actv": [
            "inline static\tUCHAR\tIfMdl_Get_Mon_B_Eehw_Dcdc_Bl_Flt_Sts_Actv( VOID )"
        ],
        "IfMdl_Set_Mon_B_Eehw_Dcdc_Ch_Flt_Sts_Actv": [
            "inline static\tVOID\tIfMdl_Set_Mon_B_Eehw_Dcdc_Ch_Flt_Sts_Actv( const UCHAR indat )"
        ],
        "IfMdl_Get_Mon_B_Eehw_Dcdc_Ch_Flt_Sts_Actv": [
            "inline static\tUCHAR\tIfMdl_Get_Mon_B_Eehw_Dcdc_Ch_Flt_Sts_Actv( VOID )"
        ],
        "IfMdl_Set_Mon_B_Eehw_Dcdc_Cl_Flt_Sts_Actv": [
            "inline static\tVOID\tIfMdl_Set_Mon_B_Eehw_Dcdc_Cl_Flt_Sts_Actv( const UCHAR indat )"
        ],
        "IfMdl_Get_Mon_B_Eehw_Dcdc_Cl_Flt_Sts_Actv": [
            "inline static\tUCHAR\tIfMdl_Get_Mon_B_Eehw_Dcdc_Cl_Flt_Sts_Actv( VOID )"
        ],
        "IfMdl_SetFlg_Pe1_Adc_Selfprotection_CheckExe": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe1_Adc_Selfprotection_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe1_Adc_Selfprotection_CheckExe": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe1_Adc_Selfprotection_CheckExe( VOID )"
        ],
        "IfMdl_Set_MonBProtPe1AdcSelfProtection_MonSts": [
            "inline static\tVOID\tIfMdl_Set_MonBProtPe1AdcSelfProtection_MonSts( const UCHAR indat )"
        ],
        "IfMdl_Get_MonBProtPe1AdcSelfProtection_MonSts": [
            "inline static\tuint8\tIfMdl_Get_MonBProtPe1AdcSelfProtection_MonSts( VOID )"
        ],
        "IfMdl_SetFlg_Pe2_Adc_Selfprotection_CheckExe": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe2_Adc_Selfprotection_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe2_Adc_Selfprotection_CheckExe": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe2_Adc_Selfprotection_CheckExe( VOID )"
        ],
        "IfMdl_Set_MonBProtPe2AdcSelfProtection_MonSts": [
            "inline static\tVOID\tIfMdl_Set_MonBProtPe2AdcSelfProtection_MonSts( const UCHAR indat )"
        ],
        "IfMdl_Get_MonBProtPe2AdcSelfProtection_MonSts": [
            "inline static\tuint8\tIfMdl_Get_MonBProtPe2AdcSelfProtection_MonSts( VOID )"
        ],
        "IfMdl_Get_PE1_PWM_U": [
            "inline static\tFLAG\tIfMdl_Get_PE1_PWM_U( VOID )"
        ],
        "IfMdl_Get_PE1_PWM_V": [
            "inline static\tFLAG\tIfMdl_Get_PE1_PWM_V( VOID )"
        ],
        "IfMdl_Get_PE1_PWM_W": [
            "inline static\tFLAG\tIfMdl_Get_PE1_PWM_W( VOID )"
        ],
        "IfMdl_Get_PE1_PWM_X": [
            "inline static\tFLAG\tIfMdl_Get_PE1_PWM_X( VOID )"
        ],
        "IfMdl_Get_PE1_PWM_Y": [
            "inline static\tFLAG\tIfMdl_Get_PE1_PWM_Y( VOID )"
        ],
        "IfMdl_Get_PE1_PWM_Z": [
            "inline static\tFLAG\tIfMdl_Get_PE1_PWM_Z( VOID )"
        ],
        "IfMdl_Get_PE2_PWM_U": [
            "inline static\tFLAG\tIfMdl_Get_PE2_PWM_U( VOID )"
        ],
        "IfMdl_Get_PE2_PWM_V": [
            "inline static\tFLAG\tIfMdl_Get_PE2_PWM_V( VOID )"
        ],
        "IfMdl_Get_PE2_PWM_W": [
            "inline static\tFLAG\tIfMdl_Get_PE2_PWM_W( VOID )"
        ],
        "IfMdl_Get_PE2_PWM_X": [
            "inline static\tFLAG\tIfMdl_Get_PE2_PWM_X( VOID )"
        ],
        "IfMdl_Get_PE2_PWM_Y": [
            "inline static\tFLAG\tIfMdl_Get_PE2_PWM_Y( VOID )"
        ],
        "IfMdl_Get_PE2_PWM_Z": [
            "inline static\tFLAG\tIfMdl_Get_PE2_PWM_Z( VOID )"
        ],
        "IfMdl_Set_Eds1CtrlModCalcd_ModVal_FromRte": [
            "inline static\tVOID\tIfMdl_Set_Eds1CtrlModCalcd_ModVal_FromRte( UCHAR indat )"
        ],
        "IfMdl_Get_Eds1CtrlModCalcd_ModVal_FromRte": [
            "inline static\tUCHAR\tIfMdl_Get_Eds1CtrlModCalcd_ModVal_FromRte( VOID )"
        ],
        "IfMdl_Set_Eds2CtrlModCalcd_ModVal_FromRte": [
            "inline static\tVOID\tIfMdl_Set_Eds2CtrlModCalcd_ModVal_FromRte( UCHAR indat )"
        ],
        "IfMdl_Get_Eds2CtrlModCalcd_ModVal_FromRte": [
            "inline static\tUCHAR\tIfMdl_Get_Eds2CtrlModCalcd_ModVal_FromRte( VOID )"
        ]
    },
    "if_mdl_IGBTMgr.h": {
        "IfMdl_Set_Pe1IgbtEnSrcVal": [
            "inline static\tVOID\tIfMdl_Set_Pe1IgbtEnSrcVal( const UCHAR sts )"
        ],
        "IfMdl_Get_Pe1IgbtEnSrcVal": [
            "inline static\tUCHAR\tIfMdl_Get_Pe1IgbtEnSrcVal( VOID )"
        ],
        "IfMdl_Set_Pe2IgbtEnSrcVal": [
            "inline static\tVOID\tIfMdl_Set_Pe2IgbtEnSrcVal( const UCHAR sts )"
        ],
        "IfMdl_Get_Pe2IgbtEnSrcVal": [
            "inline static\tUCHAR\tIfMdl_Get_Pe2IgbtEnSrcVal( VOID )"
        ],
        "IfMdl_SetFlg_PE2IgbtFlt_Original": [
            "inline static\tVOID\tIfMdl_SetFlg_PE2IgbtFlt_Original( const FLAG indat, const UCHAR num )"
        ],
        "IfMdl_GetFlg_PE2IgbtFlt_Original": [
            "inline static\tFLAG\tIfMdl_GetFlg_PE2IgbtFlt_Original( const UCHAR num )"
        ],
        "IfMdl_SetFlg_PE2IgbtFlt": [
            "inline static\tVOID\tIfMdl_SetFlg_PE2IgbtFlt( const FLAG indat, const UCHAR num )"
        ],
        "IfMdl_GetFlg_PE2IgbtFlt": [
            "inline static\tFLAG\tIfMdl_GetFlg_PE2IgbtFlt( const UCHAR num )"
        ],
        "IfMdl_Set_PE2IgbtFlt": [
            "inline static VOID IfMdl_Set_PE2IgbtFlt( VOID )"
        ],
        "IfMdl_Get_PE2IgbtFlt": [
            "inline static UCHAR IfMdl_Get_PE2IgbtFlt( const UCHAR num )"
        ],
        "IfMdl_Set_PE2IgbtInit": [
            "inline static\tVOID\tIfMdl_Set_PE2IgbtInit( const uint8 out_req )"
        ],
        "IfMdl_SetFlg_PE1IgbtFlt_Original": [
            "inline static\tVOID\tIfMdl_SetFlg_PE1IgbtFlt_Original( const FLAG indat, const UCHAR num )"
        ],
        "IfMdl_GetFlg_PE1IgbtFlt_Original": [
            "inline static\tFLAG\tIfMdl_GetFlg_PE1IgbtFlt_Original( const UCHAR num )"
        ],
        "IfMdl_SetFlg_PE1IgbtFlt": [
            "inline static\tVOID\tIfMdl_SetFlg_PE1IgbtFlt( const FLAG indat, const UCHAR num )"
        ],
        "IfMdl_GetFlg_PE1IgbtFlt": [
            "inline static\tFLAG\tIfMdl_GetFlg_PE1IgbtFlt( const UCHAR num )"
        ],
        "IfMdl_Set_PE1IgbtFlt": [
            "inline static VOID IfMdl_Set_PE1IgbtFlt( VOID )"
        ],
        "IfMdl_Get_PE1IgbtFlt": [
            "inline static UCHAR IfMdl_Get_PE1IgbtFlt( const UCHAR num )"
        ],
        "IfMdl_Set_PE1IgbtInit": [
            "inline static\tVOID\tIfMdl_Set_PE1IgbtInit( const FLAG out_req )"
        ],
        "IfMdl_Set_EmStop": [
            "inline static\tVOID\tIfMdl_Set_EmStop( const FLAG sts )"
        ],
        "IfMdl_Set_ReadBack": [
            "inline static\tVOID\tIfMdl_Set_ReadBack( VOID )"
        ],
        "IfMdl_Get_ReadBack": [
            "inline static\tFLAG\tIfMdl_Get_ReadBack( VOID )"
        ],
        "IfMdl_SetFlg_ReadBack": [
            "inline static\tVOID\tIfMdl_SetFlg_ReadBack( const FLAG sts )"
        ],
        "IfMdl_GetFlg_ReadBack": [
            "inline static\tFLAG\tIfMdl_GetFlg_ReadBack( VOID )"
        ],
        "IfMdl_Set_Em1ActvDchaSrc_FlgVal": [
            "inline static\tVOID\tIfMdl_Set_Em1ActvDchaSrc_FlgVal( const BOOL data )"
        ],
        "IfMdl_Get_Em1ActvDchaSrc_FlgVal": [
            "inline static\tBOOL\tIfMdl_Get_Em1ActvDchaSrc_FlgVal( VOID )"
        ],
        "IfMdl_Set_Em2ActvDchaSrc_FlgVal": [
            "inline static\tVOID\tIfMdl_Set_Em2ActvDchaSrc_FlgVal( const BOOL data )"
        ],
        "IfMdl_Get_Em2ActvDchaSrc_FlgVal": [
            "inline static\tBOOL\tIfMdl_Get_Em2ActvDchaSrc_FlgVal( VOID )"
        ],
        "IfMdl_Set_ActDchaHiSideOnSts": [
            "inline static\tVOID\tIfMdl_Set_ActDchaHiSideOnSts( const UCHAR indat )"
        ],
        "IfMdl_Get_ActDchaHiSideOnSts": [
            "inline static\tUCHAR\tIfMdl_Get_ActDchaHiSideOnSts( VOID )"
        ],
        "IfMdl_Set_ActDchaLoSideOnSts": [
            "inline static\tVOID\tIfMdl_Set_ActDchaLoSideOnSts( const UCHAR indat )"
        ],
        "IfMdl_Get_ActDchaLoSideOnSts": [
            "inline static\tUCHAR\tIfMdl_Get_ActDchaLoSideOnSts( VOID )"
        ],
        "IfMdl_SetFlg_ActDchaHiSideOnReqPrg": [
            "inline static\tVOID\tIfMdl_SetFlg_ActDchaHiSideOnReqPrg( const FLAG f_req )"
        ],
        "IfMdl_GetFlg_ActDchaHiSideOnReqPrg": [
            "inline static\tFLAG\tIfMdl_GetFlg_ActDchaHiSideOnReqPrg( VOID )"
        ],
        "IfMdl_SetFlg_ActDchaLoSideOnReqPrg": [
            "inline static\tVOID\tIfMdl_SetFlg_ActDchaLoSideOnReqPrg( const FLAG f_req )"
        ],
        "IfMdl_GetFlg_ActDchaLoSideOnReqPrg": [
            "inline static\tFLAG\tIfMdl_GetFlg_ActDchaLoSideOnReqPrg( VOID )"
        ],
        "IfMdl_SetFlg_ExHandle_ActDchaHiSide": [
            "inline static\tVOID\tIfMdl_SetFlg_ExHandle_ActDchaHiSide( const FLAG f_req )"
        ],
        "IfMdl_GetFlg_ExHandle_ActDchaHiSide": [
            "inline static\tFLAG\tIfMdl_GetFlg_ExHandle_ActDchaHiSide( VOID )"
        ],
        "IfMdl_SetFlg_ExHandle_ActDchaLoSide": [
            "inline static\tVOID\tIfMdl_SetFlg_ExHandle_ActDchaLoSide( const FLAG f_req )"
        ],
        "IfMdl_GetFlg_ExHandle_ActDchaLoSide": [
            "inline static\tFLAG\tIfMdl_GetFlg_ExHandle_ActDchaLoSide( VOID )"
        ],
        "IfMdl_Set_SysReq_ActDchaHiSide": [
            "inline static\tVOID\tIfMdl_Set_SysReq_ActDchaHiSide( const FLAG f_req )"
        ],
        "IfMdl_Get_SysReq_ActDchaHiSide": [
            "inline static\tFLAG\tIfMdl_Get_SysReq_ActDchaHiSide( VOID )"
        ],
        "IfMdl_Set_SysReq_ActDchaLoSide": [
            "inline static\tVOID\tIfMdl_Set_SysReq_ActDchaLoSide( const FLAG f_req )"
        ],
        "IfMdl_Get_SysReq_ActDchaLoSide": [
            "inline static\tFLAG\tIfMdl_Get_SysReq_ActDchaLoSide( VOID )"
        ],
        "IfMdl_Set_Eds1ActvDcha_StsVal": [
            "inline static\tVOID\tIfMdl_Set_Eds1ActvDcha_StsVal( const BOOL sts )"
        ],
        "IfMdl_Get_Eds1ActvDcha_StsVal": [
            "inline static\tBOOL\tIfMdl_Get_Eds1ActvDcha_StsVal( VOID )"
        ],
        "IfMdl_Set_ActiveDischargeHiSideOn": [
            "inline\tstatic\tVOID\tIfMdl_Set_ActiveDischargeHiSideOn( const UCHAR out_req )"
        ],
        "IfMdl_Set_ActiveDischargeLoSideOn": [
            "inline\tstatic\tVOID\tIfMdl_Set_ActiveDischargeLoSideOn( const UCHAR out_req )"
        ],
        "IfMdl_Set_Pe1AdcSelfProt_Sts_FromRte": [
            "inline static\tVOID\tIfMdl_Set_Pe1AdcSelfProt_Sts_FromRte( const uint8 sts )"
        ],
        "IfMdl_Get_Pe1AdcSelfProt_Sts_FromRte": [
            "inline static\tUCHAR\tIfMdl_Get_Pe1AdcSelfProt_Sts_FromRte( VOID )"
        ],
        "IfMdl_Set_Pe2AdcSelfProt_Sts_FromRte": [
            "inline static\tVOID\tIfMdl_Set_Pe2AdcSelfProt_Sts_FromRte( const uint8 sts )"
        ],
        "IfMdl_Get_Pe2AdcSelfProt_Sts_FromRte": [
            "inline static\tUCHAR\tIfMdl_Get_Pe2AdcSelfProt_Sts_FromRte( VOID )"
        ],
        "IfMdl_Set_IgbtInit_H": [
            "inline static\tVOID\tIfMdl_Set_IgbtInit_H( const uint8 out_req )"
        ],
        "IfMdl_Set_IgbtInit_L": [
            "inline static\tVOID\tIfMdl_Set_IgbtInit_L( const uint8 out_req )"
        ],
        "IfMdl_Set_SysReq_Pe1_Igbt_Init": [
            "inline static\tVOID\tIfMdl_Set_SysReq_Pe1_Igbt_Init( const UCHAR indat )"
        ],
        "IfMdl_Get_SysReq_Pe1_Igbt_Init": [
            "inline static\tUCHAR\tIfMdl_Get_SysReq_Pe1_Igbt_Init( VOID )"
        ],
        "IfMdl_SetFlg_ExHandle_Pe1_Igbt_Init": [
            "inline static\tVOID\tIfMdl_SetFlg_ExHandle_Pe1_Igbt_Init( const FLAG indat )"
        ],
        "IfMdl_GetFlg_ExHandle_Pe1_Igbt_Init": [
            "inline static\tFLAG\tIfMdl_GetFlg_ExHandle_Pe1_Igbt_Init( VOID )"
        ],
        "IfMdl_Set_SysReq_Pe1_Igbt_En": [
            "inline static\tVOID\tIfMdl_Set_SysReq_Pe1_Igbt_En( const UCHAR indat )"
        ],
        "IfMdl_Get_SysReq_Pe1_Igbt_En": [
            "inline static\tUCHAR\tIfMdl_Get_SysReq_Pe1_Igbt_En( VOID )"
        ],
        "IfMdl_SetFlg_ExHandle_Pe1_Igbt_En": [
            "inline static\tVOID\tIfMdl_SetFlg_ExHandle_Pe1_Igbt_En( const FLAG indat )"
        ],
        "IfMdl_GetFlg_ExHandle_Pe1_Igbt_En": [
            "inline static\tFLAG\tIfMdl_GetFlg_ExHandle_Pe1_Igbt_En( VOID )"
        ],
        "IfMdl_Set_SysReq_Igbt_Init_H": [
            "inline static\tVOID\tIfMdl_Set_SysReq_Igbt_Init_H( const UCHAR indat )"
        ],
        "IfMdl_Get_SysReq_Igbt_Init_H": [
            "inline static\tUCHAR\tIfMdl_Get_SysReq_Igbt_Init_H( VOID )"
        ],
        "IfMdl_SetFlg_ExHandle_Igbt_Init_H": [
            "inline static\tVOID\tIfMdl_SetFlg_ExHandle_Igbt_Init_H( const FLAG indat )"
        ],
        "IfMdl_GetFlg_ExHandle_Igbt_Init_H": [
            "inline static\tFLAG\tIfMdl_GetFlg_ExHandle_Igbt_Init_H( VOID )"
        ],
        "IfMdl_Set_SysReq_Igbt_Init_L": [
            "inline static\tVOID\tIfMdl_Set_SysReq_Igbt_Init_L( const UCHAR indat )"
        ],
        "IfMdl_Get_SysReq_Igbt_Init_L": [
            "inline static\tUCHAR\tIfMdl_Get_SysReq_Igbt_Init_L( VOID )"
        ],
        "IfMdl_SetFlg_ExHandle_Igbt_Init_L": [
            "inline static\tVOID\tIfMdl_SetFlg_ExHandle_Igbt_Init_L( const FLAG indat )"
        ],
        "IfMdl_GetFlg_ExHandle_Igbt_Init_L": [
            "inline static\tFLAG\tIfMdl_GetFlg_ExHandle_Igbt_Init_L( VOID )"
        ],
        "IfMdl_Set_SysReq_Pe1_Igbt_En_H": [
            "inline static\tVOID\tIfMdl_Set_SysReq_Pe1_Igbt_En_H( const UCHAR indat )"
        ],
        "IfMdl_Get_SysReq_Pe1_Igbt_En_H": [
            "inline static\tUCHAR\tIfMdl_Get_SysReq_Pe1_Igbt_En_H( VOID )"
        ],
        "IfMdl_SetFlg_ExHandle_Pe1_Igbt_En_H": [
            "inline static\tVOID\tIfMdl_SetFlg_ExHandle_Pe1_Igbt_En_H( const FLAG indat )"
        ],
        "IfMdl_GetFlg_ExHandle_Pe1_Igbt_En_H": [
            "inline static\tFLAG\tIfMdl_GetFlg_ExHandle_Pe1_Igbt_En_H( VOID )"
        ],
        "IfMdl_Set_SysReq_Pe1_Igbt_En_L": [
            "inline static\tVOID\tIfMdl_Set_SysReq_Pe1_Igbt_En_L( const UCHAR indat )"
        ],
        "IfMdl_Get_SysReq_Pe1_Igbt_En_L": [
            "inline static\tUCHAR\tIfMdl_Get_SysReq_Pe1_Igbt_En_L( VOID )"
        ],
        "IfMdl_SetFlg_ExHandle_Pe1_Igbt_En_L": [
            "inline static\tVOID\tIfMdl_SetFlg_ExHandle_Pe1_Igbt_En_L( const FLAG indat )"
        ],
        "IfMdl_GetFlg_ExHandle_Pe1_Igbt_En_L": [
            "inline static\tFLAG\tIfMdl_GetFlg_ExHandle_Pe1_Igbt_En_L( VOID )"
        ],
        "IfMdl_Set_SysReq_Pe2_Igbt_Init": [
            "inline static\tVOID\tIfMdl_Set_SysReq_Pe2_Igbt_Init( const UCHAR indat )"
        ],
        "IfMdl_Get_SysReq_Pe2_Igbt_Init": [
            "inline static\tUCHAR\tIfMdl_Get_SysReq_Pe2_Igbt_Init( VOID )"
        ],
        "IfMdl_SetFlg_ExHandle_Pe2_Igbt_Init": [
            "inline static\tVOID\tIfMdl_SetFlg_ExHandle_Pe2_Igbt_Init( const FLAG indat )"
        ],
        "IfMdl_GetFlg_ExHandle_Pe2_Igbt_Init": [
            "inline static\tFLAG\tIfMdl_GetFlg_ExHandle_Pe2_Igbt_Init( VOID )"
        ],
        "IfMdl_Set_SysReq_Pe2_Igbt_En": [
            "inline static\tVOID\tIfMdl_Set_SysReq_Pe2_Igbt_En( const UCHAR indat )"
        ],
        "IfMdl_Get_SysReq_Pe2_Igbt_En": [
            "inline static\tUCHAR\tIfMdl_Get_SysReq_Pe2_Igbt_En( VOID )"
        ],
        "IfMdl_SetFlg_ExHandle_Pe2_Igbt_En": [
            "inline static\tVOID\tIfMdl_SetFlg_ExHandle_Pe2_Igbt_En( const FLAG indat )"
        ],
        "IfMdl_GetFlg_ExHandle_Pe2_Igbt_En": [
            "inline static\tFLAG\tIfMdl_GetFlg_ExHandle_Pe2_Igbt_En( VOID )"
        ],
        "IfMdl_Set_SysReq_Pe2_Igbt_En_H": [
            "inline static\tVOID\tIfMdl_Set_SysReq_Pe2_Igbt_En_H( const UCHAR indat )"
        ],
        "IfMdl_Get_SysReq_Pe2_Igbt_En_H": [
            "inline static\tUCHAR\tIfMdl_Get_SysReq_Pe2_Igbt_En_H( VOID )"
        ],
        "IfMdl_SetFlg_ExHandle_Pe2_Igbt_En_H": [
            "inline static\tVOID\tIfMdl_SetFlg_ExHandle_Pe2_Igbt_En_H( const FLAG indat )"
        ],
        "IfMdl_GetFlg_ExHandle_Pe2_Igbt_En_H": [
            "inline static\tFLAG\tIfMdl_GetFlg_ExHandle_Pe2_Igbt_En_H( VOID )"
        ],
        "IfMdl_Set_SysReq_Pe2_Igbt_En_L": [
            "inline static\tVOID\tIfMdl_Set_SysReq_Pe2_Igbt_En_L( const UCHAR indat )"
        ],
        "IfMdl_Get_SysReq_Pe2_Igbt_En_L": [
            "inline static\tUCHAR\tIfMdl_Get_SysReq_Pe2_Igbt_En_L( VOID )"
        ],
        "IfMdl_SetFlg_ExHandle_Pe2_Igbt_En_L": [
            "inline static\tVOID\tIfMdl_SetFlg_ExHandle_Pe2_Igbt_En_L( const FLAG indat )"
        ],
        "IfMdl_GetFlg_ExHandle_Pe2_Igbt_En_L": [
            "inline static\tFLAG\tIfMdl_GetFlg_ExHandle_Pe2_Igbt_En_L( VOID )"
        ],
        "IfMdl_SetFlg_Pe1_Igbt_InitReqPrg": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe1_Igbt_InitReqPrg( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe1_Igbt_InitReqPrg": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe1_Igbt_InitReqPrg( VOID )"
        ],
        "IfMdl_SetFlg_Pe1_Igbt_EnReqPrg": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe1_Igbt_EnReqPrg( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe1_Igbt_EnReqPrg": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe1_Igbt_EnReqPrg( VOID )"
        ],
        "IfMdl_SetFlg_Igbt_Init_H_ReqPrg": [
            "inline static\tVOID\tIfMdl_SetFlg_Igbt_Init_H_ReqPrg( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Igbt_Init_H_ReqPrg": [
            "inline static\tFLAG\tIfMdl_GetFlg_Igbt_Init_H_ReqPrg( VOID )"
        ],
        "IfMdl_SetFlg_Igbt_Init_L_ReqPrg": [
            "inline static\tVOID\tIfMdl_SetFlg_Igbt_Init_L_ReqPrg( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Igbt_Init_L_ReqPrg": [
            "inline static\tFLAG\tIfMdl_GetFlg_Igbt_Init_L_ReqPrg( VOID )"
        ],
        "IfMdl_SetFlg_Pe1_Igbt_En_HReqPrg": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe1_Igbt_En_HReqPrg( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe1_Igbt_En_HReqPrg": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe1_Igbt_En_HReqPrg( VOID )"
        ],
        "IfMdl_SetFlg_Pe1_Igbt_En_LReqPrg": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe1_Igbt_En_LReqPrg( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe1_Igbt_En_LReqPrg": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe1_Igbt_En_LReqPrg( VOID )"
        ],
        "IfMdl_SetFlg_Pe2_Igbt_InitReqPrg": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe2_Igbt_InitReqPrg( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe2_Igbt_InitReqPrg": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe2_Igbt_InitReqPrg( VOID )"
        ],
        "IfMdl_SetFlg_Pe2_Igbt_EnReqPrg": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe2_Igbt_EnReqPrg( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe2_Igbt_EnReqPrg": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe2_Igbt_EnReqPrg( VOID )"
        ],
        "IfMdl_SetFlg_Pe2_Igbt_En_HReqPrg": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe2_Igbt_En_HReqPrg( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe2_Igbt_En_HReqPrg": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe2_Igbt_En_HReqPrg( VOID )"
        ],
        "IfMdl_SetFlg_Pe2_Igbt_En_LReqPrg": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe2_Igbt_En_LReqPrg( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe2_Igbt_En_LReqPrg": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe2_Igbt_En_LReqPrg( VOID )"
        ],
        "IfMdl_Set_Drv_Flbk": [
            "inline static\tVOID\tIfMdl_Set_Drv_Flbk( const UCHAR out_req )"
        ],
        "IfMdl_Set_SysReq_Drv_Flbk": [
            "inline\tstatic\tVOID\tIfMdl_Set_SysReq_Drv_Flbk( const UCHAR indat )"
        ],
        "IfMdl_Get_SysReq_Drv_Flbk": [
            "inline\tstatic\tUCHAR\tIfMdl_Get_SysReq_Drv_Flbk( VOID )"
        ],
        "IfMdl_SetFlg_ExHandle_Drv_Flbk": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_ExHandle_Drv_Flbk( const UCHAR indat )"
        ],
        "IfMdl_GetFlg_ExHandle_Drv_Flbk": [
            "inline\tstatic\tUCHAR\tIfMdl_GetFlg_ExHandle_Drv_Flbk( VOID )"
        ],
        "IfMdl_SetFlg_Drv_FlbkReqPrg": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Drv_FlbkReqPrg( const FLAG f_req )"
        ],
        "IfMdl_GetFlg_Drv_FlbkReqPrg": [
            "inline\tstatic\tUCHAR\tIfMdl_GetFlg_Drv_FlbkReqPrg( VOID )"
        ],
        "IfMdl_Set_FltLatRst": [
            "inline static\tVOID\tIfMdl_Set_FltLatRst( const FLAG out_req )"
        ],
        "IfMdl_SetFlg_FltLatRstReqPrg": [
            "inline static\tVOID\tIfMdl_SetFlg_FltLatRstReqPrg( const FLAG indat )"
        ],
        "IfMdl_GetFlg_FltLatRstReqPrg": [
            "inline static\tFLAG\tIfMdl_GetFlg_FltLatRstReqPrg( VOID )"
        ],
        "IfMdl_Set_SysReq_FltLatRst": [
            "inline static\tVOID\tIfMdl_Set_SysReq_FltLatRst( const UCHAR indat )"
        ],
        "IfMdl_Get_SysReq_FltLatRst": [
            "inline static\tUCHAR\tIfMdl_Get_SysReq_FltLatRst( VOID )"
        ],
        "IfMdl_SetFlg_ExHandle_FltLatRst": [
            "inline static\tVOID\tIfMdl_SetFlg_ExHandle_FltLatRst( const FLAG indat )"
        ],
        "IfMdl_GetFlg_ExHandle_FltLatRst": [
            "inline static\tFLAG\tIfMdl_GetFlg_ExHandle_FltLatRst( VOID )"
        ],
        "IfMdl_SetFlg_EmStopReqPrg": [
            "inline static\tVOID\tIfMdl_SetFlg_EmStopReqPrg( const FLAG f_req )"
        ],
        "IfMdl_GetFlg_EmStopReqPrg": [
            "inline static\tFLAG\tIfMdl_GetFlg_EmStopReqPrg( VOID )"
        ],
        "IfMdl_SetFlg_ExHandle_EmStop": [
            "inline static\tVOID\tIfMdl_SetFlg_ExHandle_EmStop( const FLAG f_req )"
        ],
        "IfMdl_GetFlg_ExHandle_EmStop": [
            "inline static\tFLAG\tIfMdl_GetFlg_ExHandle_EmStop( VOID )"
        ]
    },
    "if_mdl_pe1_mot_ctrl.h": {
        "IfMdl_Set_Em1IdqAct_IdVal": [
            "inline static\tVOID\tIfMdl_Set_Em1IdqAct_IdVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em1IdqAct_IdVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em1IdqAct_IdVal( VOID )"
        ],
        "IfMdl_Set_Em1IdqAct_IqVal": [
            "inline static\tVOID\tIfMdl_Set_Em1IdqAct_IqVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em1IdqAct_IqVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em1IdqAct_IqVal( VOID )"
        ],
        "IfMdl_Set_Em1SpdAct_SpdVal": [
            "inline static\tVOID\tIfMdl_Set_Em1SpdAct_SpdVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em1SpdAct_SpdVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em1SpdAct_SpdVal( VOID )"
        ],
        "IfMdl_Set_Em1AirgapTqTarAvl_TqVal": [
            "inline static\tVOID\tIfMdl_Set_Em1AirgapTqTarAvl_TqVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em1AirgapTqTarAvl_TqVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em1AirgapTqTarAvl_TqVal( VOID )"
        ],
        "IfMdl_Set_Em1AirgapTqSrc_SrcVal": [
            "inline static\tVOID\tIfMdl_Set_Em1AirgapTqSrc_SrcVal( const UCHAR data )"
        ],
        "IfMdl_Get_Em1AirgapTqSrc_SrcVal": [
            "inline static\tUCHAR\tIfMdl_Get_Em1AirgapTqSrc_SrcVal( VOID )"
        ],
        "IfMdl_Set_Pe1IAcRmsLim_IVal": [
            "inline static\tVOID\tIfMdl_Set_Pe1IAcRmsLim_IVal( const FLOAT data )"
        ],
        "IfMdl_Get_Pe1IAcRmsLim_IVal": [
            "inline static\tFLOAT\tIfMdl_Get_Pe1IAcRmsLim_IVal( VOID )"
        ],
        "IfMdl_Set_Em1MotPrm_FlxdVal": [
            "inline static\tVOID\tIfMdl_Set_Em1MotPrm_FlxdVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em1MotPrm_FlxdVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em1MotPrm_FlxdVal( VOID )"
        ],
        "IfMdl_Set_Em1MotPrm_FlxqVal": [
            "inline static\tVOID\tIfMdl_Set_Em1MotPrm_FlxqVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em1MotPrm_FlxqVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em1MotPrm_FlxqVal( VOID )"
        ],
        "IfMdl_Set_Em1AirgapTqEstimd_TqVal": [
            "inline static\tVOID\tIfMdl_Set_Em1AirgapTqEstimd_TqVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em1AirgapTqEstimd_TqVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em1AirgapTqEstimd_TqVal( VOID )"
        ],
        "IfMdl_Set_Pe1PhaISwPhaU_Pe1PhaISwPhaU": [
            "inline static\tVOID\tIfMdl_Set_Pe1PhaISwPhaU_Pe1PhaISwPhaU( const FLOAT data )"
        ],
        "IfMdl_Get_Pe1PhaISwPhaU_Pe1PhaISwPhaU": [
            "inline static\tFLOAT\tIfMdl_Get_Pe1PhaISwPhaU_Pe1PhaISwPhaU( VOID )"
        ],
        "IfMdl_Set_Pe1PhaISwPhaV_Pe1PhaISwPhaV": [
            "inline static\tVOID\tIfMdl_Set_Pe1PhaISwPhaV_Pe1PhaISwPhaV( const FLOAT data )"
        ],
        "IfMdl_Get_Pe1PhaISwPhaV_Pe1PhaISwPhaV": [
            "inline static\tFLOAT\tIfMdl_Get_Pe1PhaISwPhaV_Pe1PhaISwPhaV( VOID )"
        ],
        "IfMdl_Set_Pe1PhaISwPhaW_Pe1PhaISwPhaW": [
            "inline static\tVOID\tIfMdl_Set_Pe1PhaISwPhaW_Pe1PhaISwPhaW( const FLOAT data )"
        ],
        "IfMdl_Get_Pe1PhaISwPhaW_Pe1PhaISwPhaW": [
            "inline static\tFLOAT\tIfMdl_Get_Pe1PhaISwPhaW_Pe1PhaISwPhaW( VOID )"
        ],
        "IfMdl_Set_Em1IdqTar_IdVal": [
            "inline static\tVOID\tIfMdl_Set_Em1IdqTar_IdVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em1IdqTar_IdVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em1IdqTar_IdVal( VOID )"
        ],
        "IfMdl_Set_Em1IdqTar_IqVal": [
            "inline static\tVOID\tIfMdl_Set_Em1IdqTar_IqVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em1IdqTar_IqVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em1IdqTar_IqVal( VOID )"
        ],
        "IfMdl_Set_NDCPe1CtrlCddVolt_VDCtrlIVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe1CtrlCddVolt_VDCtrlIVal( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe1CtrlCddVolt_VDCtrlIVal": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe1CtrlCddVolt_VDCtrlIVal( VOID )"
        ],
        "IfMdl_Set_Em1RotorPosnElec_PosnQf": [
            "inline static\tVOID\tIfMdl_Set_Em1RotorPosnElec_PosnQf( const UCHAR data )"
        ],
        "IfMdl_Get_Em1RotorPosnElec_PosnQf": [
            "inline static\tUCHAR\tIfMdl_Get_Em1RotorPosnElec_PosnQf( VOID )"
        ],
        "IfMdl_Set_Em1RotorPosnElecDlyCmpI_PosnQf": [
            "inline static\tVOID\tIfMdl_Set_Em1RotorPosnElecDlyCmpI_PosnQf( const UCHAR data )"
        ],
        "IfMdl_Get_Em1RotorPosnElecDlyCmpI_PosnQf": [
            "inline static\tUCHAR\tIfMdl_Get_Em1RotorPosnElecDlyCmpI_PosnQf( VOID )"
        ],
        "IfMdl_Set_Em1RotorPosnElecDlyCmpU_PosnQf": [
            "inline static\tVOID\tIfMdl_Set_Em1RotorPosnElecDlyCmpU_PosnQf( const UCHAR data )"
        ],
        "IfMdl_Get_Em1RotorPosnElecDlyCmpU_PosnQf": [
            "inline static\tUCHAR\tIfMdl_Get_Em1RotorPosnElecDlyCmpU_PosnQf( VOID )"
        ],
        "IfMdl_Set_Em1MotPrm_LdVal": [
            "inline static\tVOID\tIfMdl_Set_Em1MotPrm_LdVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em1MotPrm_LdVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em1MotPrm_LdVal( VOID )"
        ],
        "IfMdl_Set_Em1MotPrm_LqVal": [
            "inline static\tVOID\tIfMdl_Set_Em1MotPrm_LqVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em1MotPrm_LqVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em1MotPrm_LqVal( VOID )"
        ],
        "IfMdl_Set_Pe1ModlnMethTar_Val": [
            "inline static\tVOID\tIfMdl_Set_Pe1ModlnMethTar_Val( const UCHAR data )"
        ],
        "IfMdl_Get_Pe1ModlnMethTar_Val": [
            "inline static\tUCHAR\tIfMdl_Get_Pe1ModlnMethTar_Val( VOID )"
        ],
        "IfMdl_Set_NDCPe1CtrlCddSpd_AngSpdActVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe1CtrlCddSpd_AngSpdActVal( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe1CtrlCddSpd_AngSpdActVal": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe1CtrlCddSpd_AngSpdActVal( VOID )"
        ],
        "IfMdl_Set_Pe1PwmFrqTar_FrqVal": [
            "inline static\tVOID\tIfMdl_Set_Pe1PwmFrqTar_FrqVal( const FLOAT data )"
        ],
        "IfMdl_Get_Pe1PwmFrqTar_FrqVal": [
            "inline static\tFLOAT\tIfMdl_Get_Pe1PwmFrqTar_FrqVal( VOID )"
        ],
        "IfMdl_Set_Em1UdqTar_UdVal": [
            "inline static\tVOID\tIfMdl_Set_Em1UdqTar_UdVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em1UdqTar_UdVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em1UdqTar_UdVal( VOID )"
        ],
        "IfMdl_Set_Em1UdqTar_UqVal": [
            "inline static\tVOID\tIfMdl_Set_Em1UdqTar_UqVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em1UdqTar_UqVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em1UdqTar_UqVal( VOID )"
        ],
        "IfMdl_Set_NDCPe1CtrlCddDuty_ModlnFactorVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe1CtrlCddDuty_ModlnFactorVal( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe1CtrlCddDuty_ModlnFactorVal": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe1CtrlCddDuty_ModlnFactorVal( VOID )"
        ],
        "IfMdl_Set_Pe1ModlnMeth_ModlnMeth": [
            "inline static\tVOID\tIfMdl_Set_Pe1ModlnMeth_ModlnMeth( const UCHAR data )"
        ],
        "IfMdl_Get_Pe1ModlnMeth_ModlnMeth": [
            "inline static\tUCHAR\tIfMdl_Get_Pe1ModlnMeth_ModlnMeth( VOID )"
        ],
        "IfMdl_Set_NDCPe1CtrlCddVolt_VQCtrlIVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe1CtrlCddVolt_VQCtrlIVal( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe1CtrlCddVolt_VQCtrlIVal": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe1CtrlCddVolt_VQCtrlIVal( VOID )"
        ],
        "IfMdl_Set_NDCPe1CtrlCddCurr_IpeakVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe1CtrlCddCurr_IpeakVal( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe1CtrlCddCurr_IpeakVal": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe1CtrlCddCurr_IpeakVal( VOID )"
        ],
        "IfMdl_Set_Em1MotPrm_RVal": [
            "inline static\tVOID\tIfMdl_Set_Em1MotPrm_RVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em1MotPrm_RVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em1MotPrm_RVal( VOID )"
        ],
        "IfMdl_Set_Em1MotPrm_FlxPrmntMagVal": [
            "inline static\tVOID\tIfMdl_Set_Em1MotPrm_FlxPrmntMagVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em1MotPrm_FlxPrmntMagVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em1MotPrm_FlxPrmntMagVal( VOID )"
        ],
        "IfMdl_Set_NDCPe1CtrlCddFreq_PWMFreqActVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe1CtrlCddFreq_PWMFreqActVal( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe1CtrlCddFreq_PWMFreqActVal": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe1CtrlCddFreq_PWMFreqActVal( VOID )"
        ],
        "IfMdl_Set_NDCPe1CtrlCddDuty_DutyURefVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe1CtrlCddDuty_DutyURefVal( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe1CtrlCddDuty_DutyURefVal": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe1CtrlCddDuty_DutyURefVal( VOID )"
        ],
        "IfMdl_Set_NDCPe1CtrlCddDuty_DutyVRefVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe1CtrlCddDuty_DutyVRefVal( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe1CtrlCddDuty_DutyVRefVal": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe1CtrlCddDuty_DutyVRefVal( VOID )"
        ],
        "IfMdl_Set_NDCPe1CtrlCddDuty_DutyWRefVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe1CtrlCddDuty_DutyWRefVal( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe1CtrlCddDuty_DutyWRefVal": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe1CtrlCddDuty_DutyWRefVal( VOID )"
        ],
        "IfMdl_Set_NDCPe1CtrlCddCurr_IdTarLimitVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe1CtrlCddCurr_IdTarLimitVal( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe1CtrlCddCurr_IdTarLimitVal": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe1CtrlCddCurr_IdTarLimitVal( VOID )"
        ],
        "IfMdl_Set_NDCPe1CtrlCddCurr_IqTarLimitVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe1CtrlCddCurr_IqTarLimitVal( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe1CtrlCddCurr_IqTarLimitVal": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe1CtrlCddCurr_IqTarLimitVal( VOID )"
        ],
        "IfMdl_Set_NDCPe1CtrlCddCurr_IdcVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe1CtrlCddCurr_IdcVal( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe1CtrlCddCurr_IdcVal": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe1CtrlCddCurr_IdcVal( VOID )"
        ],
        "IfMdl_Get_Em1RotorPosnElec_PosnVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em1RotorPosnElec_PosnVal( VOID )"
        ],
        "IfMdl_Get_Em1RotorPosnElecDlyCmpI_PosnVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em1RotorPosnElecDlyCmpI_PosnVal( VOID )"
        ],
        "IfMdl_Get_Em1RotorPosnElecDlyCmpU_PosnVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em1RotorPosnElecDlyCmpU_PosnVal( VOID )"
        ],
        "IfMdl_GetFlg_Pe1_FcPwm": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe1_FcPwm( VOID )"
        ],
        "IfMdl_GetFlg_Pe1_DebugMode": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe1_DebugMode( VOID )"
        ],
        "IfMdl_GetFlg_Pe1_ForcedRPMMode": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe1_ForcedRPMMode( VOID )"
        ],
        "IfMdl_GetFlg_Pe1_DegCommandMode": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe1_DegCommandMode( VOID )"
        ],
        "IfMdl_Set_Em1SpdAct_SpdQf": [
            "inline static\tVOID\tIfMdl_Set_Em1SpdAct_SpdQf( const CHAR sig )"
        ],
        "IfMdl_Get_Em1SpdAct_SpdQf": [
            "inline static\tCHAR\tIfMdl_Get_Em1SpdAct_SpdQf( VOID )"
        ],
        "IfMdl_Set_Em1PhaIAct_PhaIQf": [
            "inline static\tVOID\tIfMdl_Set_Em1PhaIAct_PhaIQf( const CHAR sig )"
        ],
        "IfMdl_Get_Em1PhaIAct_PhaIQf": [
            "inline static\tCHAR\tIfMdl_Get_Em1PhaIAct_PhaIQf( VOID )"
        ],
        "IfMdl_Set_Em1RpsAct_RpsQf": [
            "inline static\tVOID\tIfMdl_Set_Em1RpsAct_RpsQf( const CHAR sig )"
        ],
        "IfMdl_Get_Em1RpsAct_RpsQf": [
            "inline static\tCHAR\tIfMdl_Get_Em1RpsAct_RpsQf( VOID )"
        ],
        "IfMdl_Set_Em1IdqAct_IdQf": [
            "inline static\tVOID\tIfMdl_Set_Em1IdqAct_IdQf( const CHAR sig )"
        ],
        "IfMdl_Get_Em1IdqAct_IdQf": [
            "inline static\tCHAR\tIfMdl_Get_Em1IdqAct_IdQf( VOID )"
        ],
        "IfMdl_Set_Em1IdqAct_IqQf": [
            "inline static\tVOID\tIfMdl_Set_Em1IdqAct_IqQf( const CHAR sig )"
        ],
        "IfMdl_Get_Em1IdqAct_IqQf": [
            "inline static\tCHAR\tIfMdl_Get_Em1IdqAct_IqQf( VOID )"
        ],
        "IfMdl_Set_Em1_MotPrm_Ld_Qf": [
            "inline static\tVOID\tIfMdl_Set_Em1_MotPrm_Ld_Qf( const CHAR sig )"
        ],
        "IfMdl_Get_Em1_MotPrm_Ld_Qf": [
            "inline static\tCHAR\tIfMdl_Get_Em1_MotPrm_Ld_Qf( VOID )"
        ],
        "IfMdl_Set_Em1_MotPrm_Lq_Qf": [
            "inline static\tVOID\tIfMdl_Set_Em1_MotPrm_Lq_Qf( const CHAR sig )"
        ],
        "IfMdl_Get_Em1_MotPrm_Lq_Qf": [
            "inline static\tCHAR\tIfMdl_Get_Em1_MotPrm_Lq_Qf( VOID )"
        ],
        "IfMdl_Set_Em1_MotPrm_FlxPrmntmag_Qf": [
            "inline static\tVOID\tIfMdl_Set_Em1_MotPrm_FlxPrmntmag_Qf( const CHAR sig )"
        ],
        "IfMdl_Get_Em1_MotPrm_FlxPrmntmag_Qf": [
            "inline static\tCHAR\tIfMdl_Get_Em1_MotPrm_FlxPrmntmag_Qf( VOID )"
        ],
        "IfMdl_Set_Em1_MotPrm_Flxd_Qf": [
            "inline static\tVOID\tIfMdl_Set_Em1_MotPrm_Flxd_Qf( const CHAR sig )"
        ],
        "IfMdl_Get_Em1_MotPrm_Flxd_Qf": [
            "inline static\tCHAR\tIfMdl_Get_Em1_MotPrm_Flxd_Qf( VOID )"
        ],
        "IfMdl_Set_Em1_MotPrm_Flxq_Qf": [
            "inline static\tVOID\tIfMdl_Set_Em1_MotPrm_Flxq_Qf( const CHAR sig )"
        ],
        "IfMdl_Get_Em1_MotPrm_Flxq_Qf": [
            "inline static\tCHAR\tIfMdl_Get_Em1_MotPrm_Flxq_Qf( VOID )"
        ],
        "IfMdl_Set_Em1_IdqTar_Id_Qf": [
            "inline static\tVOID\tIfMdl_Set_Em1_IdqTar_Id_Qf( const CHAR sig )"
        ],
        "IfMdl_Get_Em1_IdqTar_Id_Qf": [
            "inline static\tCHAR\tIfMdl_Get_Em1_IdqTar_Id_Qf( VOID )"
        ],
        "IfMdl_Set_Em1_IdqTar_Iq_Qf": [
            "inline static\tVOID\tIfMdl_Set_Em1_IdqTar_Iq_Qf( const CHAR sig )"
        ],
        "IfMdl_Get_Em1_IdqTar_Iq_Qf": [
            "inline static\tCHAR\tIfMdl_Get_Em1_IdqTar_Iq_Qf( VOID )"
        ],
        "IfMdl_Set_Em1_EstTrq_Qf": [
            "inline static\tVOID\tIfMdl_Set_Em1_EstTrq_Qf( const CHAR sig )"
        ],
        "IfMdl_Get_Em1_EstTrq_Qf": [
            "inline static\tCHAR\tIfMdl_Get_Em1_EstTrq_Qf( VOID )"
        ],
        "IfMdl_SetFlg_IdCtrl_PE1_Diag": [
            "inline static\tVOID\tIfMdl_SetFlg_IdCtrl_PE1_Diag( FLAG indat )"
        ],
        "IfMdl_GetFlg_IdCtrl_PE1_Diag": [
            "inline static\tFLAG\tIfMdl_GetFlg_IdCtrl_PE1_Diag( VOID )"
        ],
        "IfMdl_SetFlg_Idt_PE1_Diag": [
            "inline static\tVOID\tIfMdl_SetFlg_Idt_PE1_Diag( FLOAT indat )"
        ],
        "IfMdl_GetFlg_Idt_PE1_Diag": [
            "inline static\tFLOAT\tIfMdl_GetFlg_Idt_PE1_Diag( VOID )"
        ]
    },
    "if_mdl_pe2_mot_ctrl.h": {
        "IfMdl_Set_Em2IdqAct_IdVal": [
            "inline static\tVOID\tIfMdl_Set_Em2IdqAct_IdVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em2IdqAct_IdVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em2IdqAct_IdVal( VOID )"
        ],
        "IfMdl_Set_Em2IdqAct_IqVal": [
            "inline static\tVOID\tIfMdl_Set_Em2IdqAct_IqVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em2IdqAct_IqVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em2IdqAct_IqVal( VOID )"
        ],
        "IfMdl_Set_Em2SpdAct_SpdVal": [
            "inline static\tVOID\tIfMdl_Set_Em2SpdAct_SpdVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em2SpdAct_SpdVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em2SpdAct_SpdVal( VOID )"
        ],
        "IfMdl_Set_Em2AirgapTqTarAvl_TqVal": [
            "inline static\tVOID\tIfMdl_Set_Em2AirgapTqTarAvl_TqVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em2AirgapTqTarAvl_TqVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em2AirgapTqTarAvl_TqVal( VOID )"
        ],
        "IfMdl_Set_Em2AirgapTqSrc_SrcVal": [
            "inline static\tVOID\tIfMdl_Set_Em2AirgapTqSrc_SrcVal( const UCHAR data )"
        ],
        "IfMdl_Get_Em2AirgapTqSrc_SrcVal": [
            "inline static\tUCHAR\tIfMdl_Get_Em2AirgapTqSrc_SrcVal( VOID )"
        ],
        "IfMdl_Set_Pe2IAcRmsLim_IVal": [
            "inline static\tVOID\tIfMdl_Set_Pe2IAcRmsLim_IVal( const FLOAT data )"
        ],
        "IfMdl_Get_Pe2IAcRmsLim_IVal": [
            "inline static\tFLOAT\tIfMdl_Get_Pe2IAcRmsLim_IVal( VOID )"
        ],
        "IfMdl_Set_Em2MotPrm_FlxdVal": [
            "inline static\tVOID\tIfMdl_Set_Em2MotPrm_FlxdVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em2MotPrm_FlxdVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em2MotPrm_FlxdVal( VOID )"
        ],
        "IfMdl_Set_Em2MotPrm_FlxqVal": [
            "inline static\tVOID\tIfMdl_Set_Em2MotPrm_FlxqVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em2MotPrm_FlxqVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em2MotPrm_FlxqVal( VOID )"
        ],
        "IfMdl_Set_Em2AirgapTqEstimd_TqVal": [
            "inline static\tVOID\tIfMdl_Set_Em2AirgapTqEstimd_TqVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em2AirgapTqEstimd_TqVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em2AirgapTqEstimd_TqVal( VOID )"
        ],
        "IfMdl_Set_Pe2PhaISwPhaU_Pe2PhaISwPhaU": [
            "inline static\tVOID\tIfMdl_Set_Pe2PhaISwPhaU_Pe2PhaISwPhaU( const FLOAT data )"
        ],
        "IfMdl_Get_Pe2PhaISwPhaU_Pe2PhaISwPhaU": [
            "inline static\tFLOAT\tIfMdl_Get_Pe2PhaISwPhaU_Pe2PhaISwPhaU( VOID )"
        ],
        "IfMdl_Set_Pe2PhaISwPhaV_Pe2PhaISwPhaV": [
            "inline static\tVOID\tIfMdl_Set_Pe2PhaISwPhaV_Pe2PhaISwPhaV( const FLOAT data )"
        ],
        "IfMdl_Get_Pe2PhaISwPhaV_Pe2PhaISwPhaV": [
            "inline static\tFLOAT\tIfMdl_Get_Pe2PhaISwPhaV_Pe2PhaISwPhaV( VOID )"
        ],
        "IfMdl_Set_Pe2PhaISwPhaW_Pe2PhaISwPhaW": [
            "inline static\tVOID\tIfMdl_Set_Pe2PhaISwPhaW_Pe2PhaISwPhaW( const FLOAT data )"
        ],
        "IfMdl_Get_Pe2PhaISwPhaW_Pe2PhaISwPhaW": [
            "inline static\tFLOAT\tIfMdl_Get_Pe2PhaISwPhaW_Pe2PhaISwPhaW( VOID )"
        ],
        "IfMdl_Set_Em2IdqTar_IdVal": [
            "inline static\tVOID\tIfMdl_Set_Em2IdqTar_IdVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em2IdqTar_IdVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em2IdqTar_IdVal( VOID )"
        ],
        "IfMdl_Set_Em2IdqTar_IqVal": [
            "inline static\tVOID\tIfMdl_Set_Em2IdqTar_IqVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em2IdqTar_IqVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em2IdqTar_IqVal( VOID )"
        ],
        "IfMdl_Set_NDCPe2CtrlCddVolt_VDCtrlIVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe2CtrlCddVolt_VDCtrlIVal( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe2CtrlCddVolt_VDCtrlIVal": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe2CtrlCddVolt_VDCtrlIVal( VOID )"
        ],
        "IfMdl_Set_Em2RotorPosnElec_PosnQf": [
            "inline static\tVOID\tIfMdl_Set_Em2RotorPosnElec_PosnQf( const UCHAR data )"
        ],
        "IfMdl_Get_Em2RotorPosnElec_PosnQf": [
            "inline static\tUCHAR\tIfMdl_Get_Em2RotorPosnElec_PosnQf( VOID )"
        ],
        "IfMdl_Set_Em2RotorPosnElecDlyCmpI_PosnQf": [
            "inline static\tVOID\tIfMdl_Set_Em2RotorPosnElecDlyCmpI_PosnQf( const UCHAR data )"
        ],
        "IfMdl_Get_Em2RotorPosnElecDlyCmpI_PosnQf": [
            "inline static\tUCHAR\tIfMdl_Get_Em2RotorPosnElecDlyCmpI_PosnQf( VOID )"
        ],
        "IfMdl_Set_Em2RotorPosnElecDlyCmpU_PosnQf": [
            "inline static\tVOID\tIfMdl_Set_Em2RotorPosnElecDlyCmpU_PosnQf( const UCHAR data )"
        ],
        "IfMdl_Get_Em2RotorPosnElecDlyCmpU_PosnQf": [
            "inline static\tUCHAR\tIfMdl_Get_Em2RotorPosnElecDlyCmpU_PosnQf( VOID )"
        ],
        "IfMdl_Set_Em2MotPrm_LdVal": [
            "inline static\tVOID\tIfMdl_Set_Em2MotPrm_LdVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em2MotPrm_LdVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em2MotPrm_LdVal( VOID )"
        ],
        "IfMdl_Set_Em2MotPrm_LqVal": [
            "inline static\tVOID\tIfMdl_Set_Em2MotPrm_LqVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em2MotPrm_LqVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em2MotPrm_LqVal( VOID )"
        ],
        "IfMdl_Set_Pe2ModlnMethTar_Val": [
            "inline static\tVOID\tIfMdl_Set_Pe2ModlnMethTar_Val( const UCHAR data )"
        ],
        "IfMdl_Get_Pe2ModlnMethTar_Val": [
            "inline static\tUCHAR\tIfMdl_Get_Pe2ModlnMethTar_Val( VOID )"
        ],
        "IfMdl_Set_NDCPe2CtrlCddSpd_AngSpdActVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe2CtrlCddSpd_AngSpdActVal( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe2CtrlCddSpd_AngSpdActVal": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe2CtrlCddSpd_AngSpdActVal( VOID )"
        ],
        "IfMdl_Set_Pe2PwmFrqTar_FrqVal": [
            "inline static\tVOID\tIfMdl_Set_Pe2PwmFrqTar_FrqVal( const FLOAT data )"
        ],
        "IfMdl_Get_Pe2PwmFrqTar_FrqVal": [
            "inline static\tFLOAT\tIfMdl_Get_Pe2PwmFrqTar_FrqVal( VOID )"
        ],
        "IfMdl_Set_Em2UdqTar_UdVal": [
            "inline static\tVOID\tIfMdl_Set_Em2UdqTar_UdVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em2UdqTar_UdVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em2UdqTar_UdVal( VOID )"
        ],
        "IfMdl_Set_Em2UdqTar_UqVal": [
            "inline static\tVOID\tIfMdl_Set_Em2UdqTar_UqVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em2UdqTar_UqVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em2UdqTar_UqVal( VOID )"
        ],
        "IfMdl_Set_NDCPe2CtrlCddDuty_ModlnFactorVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe2CtrlCddDuty_ModlnFactorVal( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe2CtrlCddDuty_ModlnFactorVal": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe2CtrlCddDuty_ModlnFactorVal( VOID )"
        ],
        "IfMdl_Set_Pe2ModlnMeth_ModlnMeth": [
            "inline static\tVOID\tIfMdl_Set_Pe2ModlnMeth_ModlnMeth( const UCHAR data )"
        ],
        "IfMdl_Get_Pe2ModlnMeth_ModlnMeth": [
            "inline static\tUCHAR\tIfMdl_Get_Pe2ModlnMeth_ModlnMeth( VOID )"
        ],
        "IfMdl_Set_NDCPe2CtrlCddVolt_VQCtrlIVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe2CtrlCddVolt_VQCtrlIVal( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe2CtrlCddVolt_VQCtrlIVal": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe2CtrlCddVolt_VQCtrlIVal( VOID )"
        ],
        "IfMdl_Set_NDCPe2CtrlCddCurr_IpeakVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe2CtrlCddCurr_IpeakVal( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe2CtrlCddCurr_IpeakVal": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe2CtrlCddCurr_IpeakVal( VOID )"
        ],
        "IfMdl_Set_Em2MotPrm_RVal": [
            "inline static\tVOID\tIfMdl_Set_Em2MotPrm_RVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em2MotPrm_RVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em2MotPrm_RVal( VOID )"
        ],
        "IfMdl_Set_Em2MotPrm_FlxPrmntMagVal": [
            "inline static\tVOID\tIfMdl_Set_Em2MotPrm_FlxPrmntMagVal( const FLOAT data )"
        ],
        "IfMdl_Get_Em2MotPrm_FlxPrmntMagVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em2MotPrm_FlxPrmntMagVal( VOID )"
        ],
        "IfMdl_Set_NDCPe2CtrlCddFreq_PWMFreqActVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe2CtrlCddFreq_PWMFreqActVal( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe2CtrlCddFreq_PWMFreqActVal": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe2CtrlCddFreq_PWMFreqActVal( VOID )"
        ],
        "IfMdl_Set_NDCPe2CtrlCddDuty_DutyURefVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe2CtrlCddDuty_DutyURefVal( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe2CtrlCddDuty_DutyURefVal": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe2CtrlCddDuty_DutyURefVal( VOID )"
        ],
        "IfMdl_Set_NDCPe2CtrlCddDuty_DutyVRefVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe2CtrlCddDuty_DutyVRefVal( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe2CtrlCddDuty_DutyVRefVal": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe2CtrlCddDuty_DutyVRefVal( VOID )"
        ],
        "IfMdl_Set_NDCPe2CtrlCddDuty_DutyWRefVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe2CtrlCddDuty_DutyWRefVal( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe2CtrlCddDuty_DutyWRefVal": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe2CtrlCddDuty_DutyWRefVal( VOID )"
        ],
        "IfMdl_Set_NDCPe2CtrlCddCurr_IdTarLimitVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe2CtrlCddCurr_IdTarLimitVal( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe2CtrlCddCurr_IdTarLimitVal": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe2CtrlCddCurr_IdTarLimitVal( VOID )"
        ],
        "IfMdl_Set_NDCPe2CtrlCddCurr_IqTarLimitVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe2CtrlCddCurr_IqTarLimitVal( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe2CtrlCddCurr_IqTarLimitVal": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe2CtrlCddCurr_IqTarLimitVal( VOID )"
        ],
        "IfMdl_Set_NDCPe2CtrlCddCurr_IdcVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe2CtrlCddCurr_IdcVal( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe2CtrlCddCurr_IdcVal": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe2CtrlCddCurr_IdcVal( VOID )"
        ],
        "IfMdl_Get_Em2RotorPosnElec_PosnVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em2RotorPosnElec_PosnVal( VOID )"
        ],
        "IfMdl_Get_Em2RotorPosnElecDlyCmpI_PosnVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em2RotorPosnElecDlyCmpI_PosnVal( VOID )"
        ],
        "IfMdl_Get_Em2RotorPosnElecDlyCmpU_PosnVal": [
            "inline static\tFLOAT\tIfMdl_Get_Em2RotorPosnElecDlyCmpU_PosnVal( VOID )"
        ],
        "IfMdl_GetFlg_Pe2_FcPwm": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe2_FcPwm( VOID )"
        ],
        "IfMdl_GetFlg_Pe2_DebugMode": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe2_DebugMode( VOID )"
        ],
        "IfMdl_GetFlg_Pe2_ForcedRPMMode": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe2_ForcedRPMMode( VOID )"
        ],
        "IfMdl_GetFlg_Pe2_DegCommandMode": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe2_DegCommandMode( VOID )"
        ],
        "IfMdl_SetFlg_Pe2_Stalled": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe2_Stalled( const FLAG flg )"
        ],
        "IfMdl_GetFlg_Pe2_Stalled": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe2_Stalled( VOID )"
        ],
        "IfMdl_Set_Em2SpdAct_SpdQf": [
            "inline static\tVOID\tIfMdl_Set_Em2SpdAct_SpdQf( const CHAR sig )"
        ],
        "IfMdl_Get_Em2SpdAct_SpdQf": [
            "inline static\tCHAR\tIfMdl_Get_Em2SpdAct_SpdQf( VOID )"
        ],
        "IfMdl_Set_Em2PhaIAct_PhaIQf": [
            "inline static\tVOID\tIfMdl_Set_Em2PhaIAct_PhaIQf( const CHAR sig )"
        ],
        "IfMdl_Get_Em2PhaIAct_PhaIQf": [
            "inline static\tCHAR\tIfMdl_Get_Em2PhaIAct_PhaIQf( VOID )"
        ],
        "IfMdl_Set_Em2RpsAct_RpsQf": [
            "inline static\tVOID\tIfMdl_Set_Em2RpsAct_RpsQf( const CHAR sig )"
        ],
        "IfMdl_Get_Em2RpsAct_RpsQf": [
            "inline static\tCHAR\tIfMdl_Get_Em2RpsAct_RpsQf( VOID )"
        ],
        "IfMdl_Set_Em2IdqAct_IdQf": [
            "inline static\tVOID\tIfMdl_Set_Em2IdqAct_IdQf( const CHAR sig )"
        ],
        "IfMdl_Get_Em2IdqAct_IdQf": [
            "inline static\tCHAR\tIfMdl_Get_Em2IdqAct_IdQf( VOID )"
        ],
        "IfMdl_Set_Em2IdqAct_IqQf": [
            "inline static\tVOID\tIfMdl_Set_Em2IdqAct_IqQf( const CHAR sig )"
        ],
        "IfMdl_Get_Em2IdqAct_IqQf": [
            "inline static\tCHAR\tIfMdl_Get_Em2IdqAct_IqQf( VOID )"
        ],
        "IfMdl_Set_Em2_MotPrm_Ld_Qf": [
            "inline static\tVOID\tIfMdl_Set_Em2_MotPrm_Ld_Qf( const CHAR sig )"
        ],
        "IfMdl_Get_Em2_MotPrm_Ld_Qf": [
            "inline static\tCHAR\tIfMdl_Get_Em2_MotPrm_Ld_Qf( VOID )"
        ],
        "IfMdl_Set_Em2_MotPrm_Lq_Qf": [
            "inline static\tVOID\tIfMdl_Set_Em2_MotPrm_Lq_Qf( const CHAR sig )"
        ],
        "IfMdl_Get_Em2_MotPrm_Lq_Qf": [
            "inline static\tCHAR\tIfMdl_Get_Em2_MotPrm_Lq_Qf( VOID )"
        ],
        "IfMdl_Set_Em2_MotPrm_FlxPrmntmag_Qf": [
            "inline static\tVOID\tIfMdl_Set_Em2_MotPrm_FlxPrmntmag_Qf( const CHAR sig )"
        ],
        "IfMdl_Get_Em2_MotPrm_FlxPrmntmag_Qf": [
            "inline static\tCHAR\tIfMdl_Get_Em2_MotPrm_FlxPrmntmag_Qf( VOID )"
        ],
        "IfMdl_Set_Em2_MotPrm_Flxd_Qf": [
            "inline static\tVOID\tIfMdl_Set_Em2_MotPrm_Flxd_Qf( const CHAR sig )"
        ],
        "IfMdl_Get_Em2_MotPrm_Flxd_Qf": [
            "inline static\tCHAR\tIfMdl_Get_Em2_MotPrm_Flxd_Qf( VOID )"
        ],
        "IfMdl_Set_Em2_MotPrm_Flxq_Qf": [
            "inline static\tVOID\tIfMdl_Set_Em2_MotPrm_Flxq_Qf( const CHAR sig )"
        ],
        "IfMdl_Get_Em2_MotPrm_Flxq_Qf": [
            "inline static\tCHAR\tIfMdl_Get_Em2_MotPrm_Flxq_Qf( VOID )"
        ],
        "IfMdl_Set_Em2_IdqTar_Id_Qf": [
            "inline static\tVOID\tIfMdl_Set_Em2_IdqTar_Id_Qf( const CHAR sig )"
        ],
        "IfMdl_Get_Em2_IdqTar_Id_Qf": [
            "inline static\tCHAR\tIfMdl_Get_Em2_IdqTar_Id_Qf( VOID )"
        ],
        "IfMdl_Set_Em2_IdqTar_Iq_Qf": [
            "inline static\tVOID\tIfMdl_Set_Em2_IdqTar_Iq_Qf( const CHAR sig )"
        ],
        "IfMdl_Get_Em2_IdqTar_Iq_Qf": [
            "inline static\tCHAR\tIfMdl_Get_Em2_IdqTar_Iq_Qf( VOID )"
        ],
        "IfMdl_Set_Pe2_OutLetTemp_Qf": [
            "inline static\tVOID\tIfMdl_Set_Pe2_OutLetTemp_Qf( const CHAR sig )"
        ],
        "IfMdl_Get_Pe2_OutLetTemp_Qf": [
            "inline static\tCHAR\tIfMdl_Get_Pe2_OutLetTemp_Qf( VOID )"
        ],
        "IfMdl_Set_Em2_EstTrq_Qf": [
            "inline static\tVOID\tIfMdl_Set_Em2_EstTrq_Qf( const CHAR sig )"
        ],
        "IfMdl_Get_Em2_EstTrq_Qf": [
            "inline static\tCHAR\tIfMdl_Get_Em2_EstTrq_Qf( VOID )"
        ],
        "IfMdl_SetFlg_IdCtrl_PE2_Diag": [
            "inline static\tVOID\tIfMdl_SetFlg_IdCtrl_PE2_Diag( FLAG indat )"
        ],
        "IfMdl_GetFlg_IdCtrl_PE2_Diag": [
            "inline static\tFLAG\tIfMdl_GetFlg_IdCtrl_PE2_Diag( VOID )"
        ],
        "IfMdl_SetFlg_Idt_PE2_Diag": [
            "inline static\tVOID\tIfMdl_SetFlg_Idt_PE2_Diag( FLOAT indat )"
        ],
        "IfMdl_GetFlg_Idt_PE2_Diag": [
            "inline static\tFLOAT\tIfMdl_GetFlg_Idt_PE2_Diag( VOID )"
        ]
    },
    "if_mdl_PeTempsensAbst.h": {
        "IfMdl_Set_AdPcbTemp": [
            "inline\tstatic\tVOID\tIfMdl_Set_AdPcbTemp( VOID )"
        ],
        "IfMdl_Get_AdPcbTemp": [
            "inline\tstatic\tUSHORT\tIfMdl_Get_AdPcbTemp( VOID )"
        ],
        "IfMdl_Set_AdFilmCapTemp": [
            "inline\tstatic\tVOID\tIfMdl_Set_AdFilmCapTemp( VOID )"
        ],
        "IfMdl_Get_AdFilmCapTemp": [
            "inline\tstatic\tUSHORT\tIfMdl_Get_AdFilmCapTemp( VOID )"
        ],
        "IfMdl_Set_PcbTemp": [
            "inline\tstatic\tVOID\tIfMdl_Set_PcbTemp( const FLOAT tmp )"
        ],
        "IfMdl_Get_PcbTemp": [
            "inline\tstatic\tFLOAT\tIfMdl_Get_PcbTemp( VOID )"
        ],
        "IfMdl_Set_FilmCapTemp": [
            "inline\tstatic\tVOID\tIfMdl_Set_FilmCapTemp( const FLOAT tmp )"
        ],
        "IfMdl_Get_FilmCapTemp": [
            "inline\tstatic\tFLOAT\tIfMdl_Get_FilmCapTemp( VOID )"
        ],
        "IfMdl_Set_MotIgbtAdTempU": [
            "inline static\tVOID\tIfMdl_Set_MotIgbtAdTempU( VOID )"
        ],
        "IfMdl_Get_MotIgbtAdTempU": [
            "inline static\tUSHORT\tIfMdl_Get_MotIgbtAdTempU( VOID )"
        ],
        "IfMdl_Set_MotIgbtAdTempV": [
            "inline static\tVOID\tIfMdl_Set_MotIgbtAdTempV( VOID )"
        ],
        "IfMdl_Get_MotIgbtAdTempV": [
            "inline static\tUSHORT\tIfMdl_Get_MotIgbtAdTempV( VOID )"
        ],
        "IfMdl_Set_MotIgbtAdTempW": [
            "inline static\tVOID\tIfMdl_Set_MotIgbtAdTempW( VOID )"
        ],
        "IfMdl_Get_MotIgbtAdTempW": [
            "inline static\tUSHORT\tIfMdl_Get_MotIgbtAdTempW( VOID )"
        ],
        "IfMdl_Set_MotIgbtAdTempUFl": [
            "inline static\tVOID\tIfMdl_Set_MotIgbtAdTempUFl( const FLOAT data )"
        ],
        "IfMdl_Get_MotIgbtAdTempUFl": [
            "inline static\tFLOAT\tIfMdl_Get_MotIgbtAdTempUFl( VOID )"
        ],
        "IfMdl_Set_MotIgbtAdTempVFl": [
            "inline static\tVOID\tIfMdl_Set_MotIgbtAdTempVFl( const FLOAT data )"
        ],
        "IfMdl_Get_MotIgbtAdTempVFl": [
            "inline static\tFLOAT\tIfMdl_Get_MotIgbtAdTempVFl( VOID )"
        ],
        "IfMdl_Set_MotIgbtAdTempWFl": [
            "inline static\tVOID\tIfMdl_Set_MotIgbtAdTempWFl( const FLOAT data )"
        ],
        "IfMdl_Get_MotIgbtAdTempWFl": [
            "inline static\tFLOAT\tIfMdl_Get_MotIgbtAdTempWFl( VOID )"
        ],
        "IfMdl_Set_GenIgbtAdTempU": [
            "inline static\tVOID\tIfMdl_Set_GenIgbtAdTempU( VOID )"
        ],
        "IfMdl_Get_GenIgbtAdTempU": [
            "inline static\tUSHORT\tIfMdl_Get_GenIgbtAdTempU( VOID )"
        ],
        "IfMdl_Set_GenIgbtAdTempV": [
            "inline static\tVOID\tIfMdl_Set_GenIgbtAdTempV( VOID )"
        ],
        "IfMdl_Get_GenIgbtAdTempV": [
            "inline static\tUSHORT\tIfMdl_Get_GenIgbtAdTempV( VOID )"
        ],
        "IfMdl_Set_GenIgbtAdTempW": [
            "inline static\tVOID\tIfMdl_Set_GenIgbtAdTempW( VOID )"
        ],
        "IfMdl_Get_GenIgbtAdTempW": [
            "inline static\tUSHORT\tIfMdl_Get_GenIgbtAdTempW( VOID )"
        ],
        "IfMdl_Set_GenIgbtAdTempUFl": [
            "inline static\tVOID\tIfMdl_Set_GenIgbtAdTempUFl( const FLOAT data )"
        ],
        "IfMdl_Get_GenIgbtAdTempUFl": [
            "inline static\tFLOAT\tIfMdl_Get_GenIgbtAdTempUFl( VOID )"
        ],
        "IfMdl_Set_GenIgbtAdTempVFl": [
            "inline static\tVOID\tIfMdl_Set_GenIgbtAdTempVFl( const FLOAT data )"
        ],
        "IfMdl_Get_GenIgbtAdTempVFl": [
            "inline static\tFLOAT\tIfMdl_Get_GenIgbtAdTempVFl( VOID )"
        ],
        "IfMdl_Set_GenIgbtAdTempWFl": [
            "inline static\tVOID\tIfMdl_Set_GenIgbtAdTempWFl( const FLOAT data )"
        ],
        "IfMdl_Get_GenIgbtAdTempWFl": [
            "inline static\tFLOAT\tIfMdl_Get_GenIgbtAdTempWFl( VOID )"
        ],
        "IfMdl_Set_NDCPe1IGBTTemp_TUVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe1IGBTTemp_TUVal( const SHORT data )"
        ],
        "IfMdl_Get_NDCPe1IGBTTemp_TUVal": [
            "inline static\tSHORT\tIfMdl_Get_NDCPe1IGBTTemp_TUVal( VOID )"
        ],
        "IfMdl_Set_NDCPe1IGBTTemp_TVVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe1IGBTTemp_TVVal( const SHORT data )"
        ],
        "IfMdl_Get_NDCPe1IGBTTemp_TVVal": [
            "inline static\tSHORT\tIfMdl_Get_NDCPe1IGBTTemp_TVVal( VOID )"
        ],
        "IfMdl_Set_NDCPe1IGBTTemp_TWVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe1IGBTTemp_TWVal( const SHORT data )"
        ],
        "IfMdl_Get_NDCPe1IGBTTemp_TWVal": [
            "inline static\tSHORT\tIfMdl_Get_NDCPe1IGBTTemp_TWVal( VOID )"
        ],
        "IfMdl_Set_NDCPe2IGBTTemp_TUVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe2IGBTTemp_TUVal( const SHORT data )"
        ],
        "IfMdl_Get_NDCPe2IGBTTemp_TUVal": [
            "inline static\tSHORT\tIfMdl_Get_NDCPe2IGBTTemp_TUVal( VOID )"
        ],
        "IfMdl_Set_NDCPe2IGBTTemp_TVVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe2IGBTTemp_TVVal( const SHORT data )"
        ],
        "IfMdl_Get_NDCPe2IGBTTemp_TVVal": [
            "inline static\tSHORT\tIfMdl_Get_NDCPe2IGBTTemp_TVVal( VOID )"
        ],
        "IfMdl_Set_NDCPe2IGBTTemp_TWVal": [
            "inline static\tVOID\tIfMdl_Set_NDCPe2IGBTTemp_TWVal( const SHORT data )"
        ],
        "IfMdl_Get_NDCPe2IGBTTemp_TWVal": [
            "inline static\tSHORT\tIfMdl_Get_NDCPe2IGBTTemp_TWVal( VOID )"
        ],
        "IfMdl_Set_NDCTempSens_TCapVal": [
            "inline static\tVOID\tIfMdl_Set_NDCTempSens_TCapVal( const SHORT data )"
        ],
        "IfMdl_Get_NDCTempSens_TCapVal": [
            "inline static\tSHORT\tIfMdl_Get_NDCTempSens_TCapVal( VOID )"
        ],
        "IfMdl_Set_NDCTempSens_TPCBVal": [
            "inline static\tVOID\tIfMdl_Set_NDCTempSens_TPCBVal( const SHORT data )"
        ],
        "IfMdl_Get_NDCTempSens_TPCBVal": [
            "inline static\tSHORT\tIfMdl_Get_NDCTempSens_TPCBVal( VOID )"
        ],
        "IfMdl_SetFlg_FilmCapTemp_CheckExe": [
            "inline static\tVOID\tIfMdl_SetFlg_FilmCapTemp_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_FilmCapTemp_CheckExe": [
            "inline static\tFLAG\tIfMdl_GetFlg_FilmCapTemp_CheckExe( VOID )"
        ],
        "IfMdl_SetFlg_Pe1IgbtTemp_CheckExe": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe1IgbtTemp_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe1IgbtTemp_CheckExe": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe1IgbtTemp_CheckExe( VOID )"
        ],
        "IfMdl_SetFlg_Pe2IgbtTemp_CheckExe": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe2IgbtTemp_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe2IgbtTemp_CheckExe": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe2IgbtTemp_CheckExe( VOID )"
        ],
        "IfMdl_SetFlg_PcbTemp_CheckExe": [
            "inline static\tVOID\tIfMdl_SetFlg_PcbTemp_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_PcbTemp_CheckExe": [
            "inline static\tFLAG\tIfMdl_GetFlg_PcbTemp_CheckExe( VOID )"
        ],
        "IfMdl_Set_Mon_B_Prot_FilmCap_Mdl_Temp_Lim_Hi": [
            "inline static\tVOID\tIfMdl_Set_Mon_B_Prot_FilmCap_Mdl_Temp_Lim_Hi( const FLAG indat )"
        ],
        "IfMdl_Get_Mon_B_Prot_FilmCap_Mdl_Temp_Lim_Hi": [
            "inline static\tuint8\tIfMdl_Get_Mon_B_Prot_FilmCap_Mdl_Temp_Lim_Hi( VOID )"
        ],
        "IfMdl_Set_Mon_B_Prot_Pe1_Igbt_Mdl_Temp_Lim_Hi": [
            "inline static\tVOID\tIfMdl_Set_Mon_B_Prot_Pe1_Igbt_Mdl_Temp_Lim_Hi( const FLAG indat )"
        ],
        "IfMdl_Get_Mon_B_Prot_Pe1_Igbt_Mdl_Temp_Lim_Hi": [
            "inline static\tuint8\tIfMdl_Get_Mon_B_Prot_Pe1_Igbt_Mdl_Temp_Lim_Hi( VOID )"
        ],
        "IfMdl_Set_Mon_B_Prot_Pe2_Igbt_Mdl_Temp_Lim_Hi": [
            "inline static\tVOID\tIfMdl_Set_Mon_B_Prot_Pe2_Igbt_Mdl_Temp_Lim_Hi( const FLAG indat )"
        ],
        "IfMdl_Get_Mon_B_Prot_Pe2_Igbt_Mdl_Temp_Lim_Hi": [
            "inline static\tuint8\tIfMdl_Get_Mon_B_Prot_Pe2_Igbt_Mdl_Temp_Lim_Hi( VOID )"
        ],
        "IfMdl_Set_Mon_B_Prot_Pcb_Temp_Lim_Hi": [
            "inline static\tVOID\tIfMdl_Set_Mon_B_Prot_Pcb_Temp_Lim_Hi( const FLAG indat )"
        ],
        "IfMdl_Get_Mon_B_Prot_Pcb_Temp_Lim_Hi": [
            "inline static\tuint8\tIfMdl_Get_Mon_B_Prot_Pcb_Temp_Lim_Hi( VOID )"
        ],
        "IfMdl_Set_DcDcAdTemp1": [
            "inline\tstatic\tVOID\tIfMdl_Set_DcDcAdTemp1( VOID )"
        ],
        "IfMdl_Get_DcDcAdTemp1": [
            "inline\tstatic\tUSHORT\tIfMdl_Get_DcDcAdTemp1( VOID )"
        ],
        "IfMdl_Set_DcDcAdTemp2": [
            "inline\tstatic\tVOID\tIfMdl_Set_DcDcAdTemp2( VOID )"
        ],
        "IfMdl_Get_DcDcAdTemp2": [
            "inline\tstatic\tUSHORT\tIfMdl_Get_DcDcAdTemp2( VOID )"
        ],
        "IfMdl_Set_DcDcTemp_Ch1_1L": [
            "inline static\tVOID\tIfMdl_Set_DcDcTemp_Ch1_1L( const SHORT data )"
        ],
        "IfMdl_Get_DcDcTemp_Ch1_1L": [
            "inline static\tSHORT\tIfMdl_Get_DcDcTemp_Ch1_1L( VOID )"
        ],
        "IfMdl_Set_DcDcTemp_Ch2_1L": [
            "inline static\tVOID\tIfMdl_Set_DcDcTemp_Ch2_1L( const SHORT data )"
        ],
        "IfMdl_Get_DcDcTemp_Ch2_1L": [
            "inline static\tSHORT\tIfMdl_Get_DcDcTemp_Ch2_1L( VOID )"
        ],
        "IfMdl_Set_DcDcTemp_Ch1_FL": [
            "inline static\tVOID\tIfMdl_Set_DcDcTemp_Ch1_FL( const FLOAT tmp )"
        ],
        "IfMdl_Get_DcDcTemp_Ch1_FL": [
            "inline static\tFLOAT\tIfMdl_Get_DcDcTemp_Ch1_FL( VOID )"
        ],
        "IfMdl_Set_DcDcTemp_Ch2_FL": [
            "inline static\tVOID\tIfMdl_Set_DcDcTemp_Ch2_FL( const FLOAT tmp )"
        ],
        "IfMdl_Get_DcDcTemp_Ch2_FL": [
            "inline static\tFLOAT\tIfMdl_Get_DcDcTemp_Ch2_FL( VOID )"
        ],
        "IfMdl_Set_DcDcReaAdTemp1": [
            "inline\tstatic\tVOID\tIfMdl_Set_DcDcReaAdTemp1( VOID )"
        ],
        "IfMdl_Get_DcDcReaAdTemp1": [
            "inline\tstatic\tUSHORT\tIfMdl_Get_DcDcReaAdTemp1( VOID )"
        ],
        "IfMdl_Set_DcDcReaAdTemp2": [
            "inline\tstatic\tVOID\tIfMdl_Set_DcDcReaAdTemp2( VOID )"
        ],
        "IfMdl_Get_DcDcReaAdTemp2": [
            "inline\tstatic\tUSHORT\tIfMdl_Get_DcDcReaAdTemp2( VOID )"
        ],
        "IfMdl_Set_DcDcReaTemp_Ch1_1L": [
            "inline static\tVOID\tIfMdl_Set_DcDcReaTemp_Ch1_1L( const SHORT data )"
        ],
        "IfMdl_Get_DcDcReaTemp_Ch1_1L": [
            "inline static\tSHORT\tIfMdl_Get_DcDcReaTemp_Ch1_1L( VOID )"
        ],
        "IfMdl_Set_DcDcReaTemp_Ch2_1L": [
            "inline static\tVOID\tIfMdl_Set_DcDcReaTemp_Ch2_1L( const SHORT data )"
        ],
        "IfMdl_Get_DcDcReaTemp_Ch2_1L": [
            "inline static\tSHORT\tIfMdl_Get_DcDcReaTemp_Ch2_1L( VOID )"
        ],
        "IfMdl_Set_DcDcReaTemp_Ch1_FL": [
            "inline static\tVOID\tIfMdl_Set_DcDcReaTemp_Ch1_FL( const FLOAT tmp )"
        ],
        "IfMdl_Get_DcDcReaTemp_Ch1_FL": [
            "inline static\tFLOAT\tIfMdl_Get_DcDcReaTemp_Ch1_FL( VOID )"
        ],
        "IfMdl_Set_DcDcReaTemp_Ch2_FL": [
            "inline static\tVOID\tIfMdl_Set_DcDcReaTemp_Ch2_FL( const FLOAT tmp )"
        ],
        "IfMdl_Get_DcDcReaTemp_Ch2_FL": [
            "inline static\tFLOAT\tIfMdl_Get_DcDcReaTemp_Ch2_FL( VOID )"
        ],
        "IfMdl_SetFlg_DcdcTemp_CheckExe": [
            "inline static\tVOID\tIfMdl_SetFlg_DcdcTemp_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_DcdcTemp_CheckExe": [
            "inline static\tFLAG\tIfMdl_GetFlg_DcdcTemp_CheckExe( VOID )"
        ],
        "IfMdl_SetFlg_ReaTemp_CheckExe": [
            "inline static\tVOID\tIfMdl_SetFlg_ReaTemp_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_ReaTemp_CheckExe": [
            "inline static\tFLAG\tIfMdl_GetFlg_ReaTemp_CheckExe( VOID )"
        ],
        "IfMdl_Set_Mon_B_Prot_Dcdc_Mosfet_Mdl_Temp_Lim_Hi": [
            "inline static\tVOID\tIfMdl_Set_Mon_B_Prot_Dcdc_Mosfet_Mdl_Temp_Lim_Hi( const FLAG indat )"
        ],
        "IfMdl_Get_Mon_B_Prot_Dcdc_Mosfet_Mdl_Temp_Lim_Hi": [
            "inline static\tuint8\tIfMdl_Get_Mon_B_Prot_Dcdc_Mosfet_Mdl_Temp_Lim_Hi( VOID )"
        ],
        "IfMdl_Set_Mon_B_Prot_Dcdc_Reactor_Temp_Lim_Hi": [
            "inline static\tVOID\tIfMdl_Set_Mon_B_Prot_Dcdc_Reactor_Temp_Lim_Hi( const FLAG indat )"
        ],
        "IfMdl_Get_Mon_B_Prot_Dcdc_Reactor_Temp_Lim_Hi": [
            "inline static\tuint8\tIfMdl_Get_Mon_B_Prot_Dcdc_Reactor_Temp_Lim_Hi( VOID )"
        ]
    },
    "if_mdl_pwm.h": {
        "IfMdl_Set_Pe1PwmDuty": [
            "inline static\tVOID\tIfMdl_Set_Pe1PwmDuty( CUSHORT duty[] )"
        ],
        "IfMdl_Get_Pe1PwmDuty": [
            "inline static\tUSHORT*\tIfMdl_Get_Pe1PwmDuty( VOID )"
        ],
        "IfMdl_Set_Pe2PwmDuty": [
            "inline static\tVOID\tIfMdl_Set_Pe2PwmDuty( CUSHORT duty[] )"
        ],
        "IfMdl_Get_Pe2PwmDuty": [
            "inline static\tUSHORT*\tIfMdl_Get_Pe2PwmDuty( VOID )"
        ],
        "IfMdl_SetFlg_Pe1FixDuty50Per": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe1FixDuty50Per( const FLAG indata )"
        ],
        "IfMdl_GetFlg_Pe1FixDuty50Per": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe1FixDuty50Per( VOID )"
        ],
        "IfMdl_SetFlg_Pe2FixDuty50Per": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe2FixDuty50Per( const FLAG indata )"
        ],
        "IfMdl_GetFlg_Pe2FixDuty50Per": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe2FixDuty50Per( VOID )"
        ]
    },
    "if_mdl_PwrMgtAbstr.h": {
        "IfMdl_Set_AdLvdc": [
            "inline static\tVOID\tIfMdl_Set_AdLvdc( VOID )"
        ],
        "IfMdl_Get_AdLvdcMon": [
            "inline static\tUSHORT\tIfMdl_Get_AdLvdcMon( VOID )"
        ],
        "IfMdl_Set_LvdcMon": [
            "inline static\tVOID\tIfMdl_Set_LvdcMon( const UCHAR indat )"
        ],
        "IfMdl_Get_LvdcMon": [
            "inline static\tUCHAR\tIfMdl_Get_LvdcMon( VOID )"
        ],
        "IfMdl_Set_AdFlbk": [
            "inline static\tVOID\tIfMdl_Set_AdFlbk( VOID )"
        ],
        "IfMdl_Get_AdFlbk": [
            "inline static\tUSHORT\tIfMdl_Get_AdFlbk( VOID )"
        ],
        "IfMdl_Set_FlbkMon": [
            "inline static\tVOID\tIfMdl_Set_FlbkMon( const USHORT indat )"
        ],
        "IfMdl_Get_FlbkMon": [
            "inline static\tUSHORT\tIfMdl_Get_FlbkMon( VOID )"
        ],
        "IfMdl_Set_AdVbatt": [
            "inline static\tVOID\tIfMdl_Set_AdVbatt( VOID )"
        ],
        "IfMdl_Get_AdVbatt": [
            "inline static\tUSHORT\tIfMdl_Get_AdVbatt( VOID )"
        ],
        "IfMdl_Set_Vbatt": [
            "inline static\tVOID\tIfMdl_Set_Vbatt( const USHORT indat )"
        ],
        "IfMdl_Get_Vbatt": [
            "inline static\tUSHORT\tIfMdl_Get_Vbatt( VOID )"
        ],
        "IfMdl_Set_AdB12": [
            "inline static\tVOID\tIfMdl_Set_AdB12( VOID )"
        ],
        "IfMdl_Get_AdB12": [
            "inline static\tUSHORT\tIfMdl_Get_AdB12( VOID )"
        ],
        "IfMdl_Set_B12": [
            "inline static\tVOID\tIfMdl_Set_B12( const USHORT indat )"
        ],
        "IfMdl_Get_B12": [
            "inline static\tUSHORT\tIfMdl_Get_B12( VOID )"
        ],
        "IfMdl_Set_Ad5Vcan": [
            "inline static\tVOID\tIfMdl_Set_Ad5Vcan( VOID )"
        ],
        "IfMdl_Get_Ad5Vcan": [
            "inline static\tUSHORT\tIfMdl_Get_Ad5Vcan( VOID )"
        ],
        "IfMdl_Set_5vcan": [
            "inline static\tVOID\tIfMdl_Set_5vcan( const USHORT indat )"
        ],
        "IfMdl_Get_5vcan": [
            "inline static\tUSHORT\tIfMdl_Get_5vcan( VOID )"
        ],
        "IfMdl_Set_Ad5Vsc1": [
            "inline static\tVOID\tIfMdl_Set_Ad5Vsc1( VOID )"
        ],
        "IfMdl_Get_Ad5Vsc1": [
            "inline static\tUSHORT\tIfMdl_Get_Ad5Vsc1( VOID )"
        ],
        "IfMdl_Set_5vsc1": [
            "inline static\tVOID\tIfMdl_Set_5vsc1( const USHORT indat )"
        ],
        "IfMdl_Get_5vsc1": [
            "inline static\tUSHORT\tIfMdl_Get_5vsc1( VOID )"
        ],
        "IfMdl_Set_Ad5Vsc2": [
            "inline static\tVOID\tIfMdl_Set_Ad5Vsc2( VOID )"
        ],
        "IfMdl_Get_Ad5Vsc2": [
            "inline static\tUSHORT\tIfMdl_Get_Ad5Vsc2( VOID )"
        ],
        "IfMdl_Set_5vsc2": [
            "inline static\tVOID\tIfMdl_Set_5vsc2( const USHORT indat )"
        ],
        "IfMdl_Get_5vsc2": [
            "inline static\tUSHORT\tIfMdl_Get_5vsc2( VOID )"
        ],
        "IfMdl_Set_Ad5Vsc3": [
            "inline static\tVOID\tIfMdl_Set_Ad5Vsc3( VOID )"
        ],
        "IfMdl_Get_Ad5Vsc3": [
            "inline static\tUSHORT\tIfMdl_Get_Ad5Vsc3( VOID )"
        ],
        "IfMdl_Set_5vsc3": [
            "inline static\tVOID\tIfMdl_Set_5vsc3( const USHORT indat )"
        ],
        "IfMdl_Get_5vsc3": [
            "inline static\tUSHORT\tIfMdl_Get_5vsc3( VOID )"
        ],
        "IfMdl_Set_Ad5Vasc": [
            "inline static\tVOID\tIfMdl_Set_Ad5Vasc( VOID )"
        ],
        "IfMdl_Get_Ad5Vasc": [
            "inline static\tUSHORT\tIfMdl_Get_Ad5Vasc( VOID )"
        ],
        "IfMdl_Set_5vasc": [
            "inline static\tVOID\tIfMdl_Set_5vasc( const USHORT indat )"
        ],
        "IfMdl_Get_5vasc": [
            "inline static\tUSHORT\tIfMdl_Get_5vasc( VOID )"
        ],
        "IfMdl_Set_Ad5Vref": [
            "inline static\tVOID\tIfMdl_Set_Ad5Vref( VOID )"
        ],
        "IfMdl_Get_Ad5Vref": [
            "inline static\tUSHORT\tIfMdl_Get_Ad5Vref( VOID )"
        ],
        "IfMdl_Set_5vref": [
            "inline static\tVOID\tIfMdl_Set_5vref( const USHORT indat )"
        ],
        "IfMdl_Get_5vref": [
            "inline static\tUSHORT\tIfMdl_Get_5vref( VOID )"
        ],
        "IfMdl_Set_AdIg": [
            "inline static\tVOID\tIfMdl_Set_AdIg( VOID )"
        ],
        "IfMdl_Get_AdIg": [
            "inline static\tUSHORT\tIfMdl_Get_AdIg( VOID )"
        ],
        "IfMdl_Set_Ig": [
            "inline static\tVOID\tIfMdl_Set_Ig( const USHORT indat )"
        ],
        "IfMdl_Get_Ig": [
            "inline static\tUSHORT\tIfMdl_Get_Ig( VOID )"
        ],
        "IfMdl_Set_Igsts": [
            "inline static\tVOID\tIfMdl_Set_Igsts( const BOOL indat )"
        ],
        "IfMdl_Get_Igsts": [
            "inline static\tBOOL\tIfMdl_Get_Igsts( VOID )"
        ],
        "IfMdl_Set_Intout": [
            "inline static\tVOID\tIfMdl_Set_Intout( VOID )"
        ],
        "IfMdl_Get_Intout": [
            "inline static\tUCHAR\tIfMdl_Get_Intout( VOID )"
        ],
        "IfMdl_Set_IgSig": [
            "inline static\tVOID\tIfMdl_Set_IgSig( VOID )"
        ],
        "IfMdl_Get_IgSig": [
            "inline static\tUCHAR\tIfMdl_Get_IgSig( VOID )"
        ],
        "IfMdl_Set_CanInh": [
            "inline static\tVOID\tIfMdl_Set_CanInh( VOID )"
        ],
        "IfMdl_Get_CanInh": [
            "inline static\tUCHAR\tIfMdl_Get_CanInh( VOID )"
        ],
        "IfMdl_Set_Flbk": [
            "inline static\tVOID\tIfMdl_Set_Flbk( const UCHAR out_req )"
        ],
        "IfMdl_Set_VccInh": [
            "inline static\tVOID\tIfMdl_Set_VccInh( const UCHAR out_req )"
        ],
        "IfMdl_Set_BoostEn": [
            "inline static VOID IfMdl_Set_BoostEn( const UCHAR out_req )"
        ],
        "IfMdl_Set_SelfHolding": [
            "inline static VOID IfMdl_Set_SelfHolding( const UCHAR out_req )"
        ],
        "IfMdl_SetFlg_Intout": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Intout( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Intout": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Intout( VOID )"
        ],
        "IfMdl_SetFlg_IgSig": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_IgSig( const FLAG indat )"
        ],
        "IfMdl_GetFlg_IgSig": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_IgSig( VOID )"
        ],
        "IfMdl_SetFlg_CanInh": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_CanInh( const FLAG indat )"
        ],
        "IfMdl_GetFlg_CanInh": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_CanInh( VOID )"
        ],
        "IfMdl_Set_SysReq_Flbk": [
            "inline\tstatic\tVOID\tIfMdl_Set_SysReq_Flbk( const UCHAR indat )"
        ],
        "IfMdl_Get_SysReq_Flbk": [
            "inline\tstatic\tUCHAR\tIfMdl_Get_SysReq_Flbk( VOID )"
        ],
        "IfMdl_SetFlg_ExHandle_Flbk": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_ExHandle_Flbk( const UCHAR indat )"
        ],
        "IfMdl_GetFlg_ExHandle_Flbk": [
            "inline\tstatic\tUCHAR\tIfMdl_GetFlg_ExHandle_Flbk( VOID )"
        ],
        "IfMdl_SetFlg_FlbkReqPrg": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_FlbkReqPrg( const FLAG f_req )"
        ],
        "IfMdl_GetFlg_FlbkReqPrg": [
            "inline\tstatic\tUCHAR\tIfMdl_GetFlg_FlbkReqPrg( VOID )"
        ],
        "IfMdl_Set_SysReq_VccInh": [
            "inline\tstatic\tVOID\tIfMdl_Set_SysReq_VccInh( const UCHAR indat )"
        ],
        "IfMdl_Get_SysReq_VccInh": [
            "inline\tstatic\tUCHAR\tIfMdl_Get_SysReq_VccInh( VOID )"
        ],
        "IfMdl_SetFlg_ExHandle_VccInh": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_ExHandle_VccInh( const FLAG indat )"
        ],
        "IfMdl_GetFlg_ExHandle_VccInh": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_ExHandle_VccInh( VOID )"
        ],
        "IfMdl_SetFlg_VccInhReqPrg": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_VccInhReqPrg( const FLAG f_req )"
        ],
        "IfMdl_GetFlg_VccInhReqPrg": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_VccInhReqPrg( VOID )"
        ],
        "IfMdl_Set_SysReq_BoostEn": [
            "inline\tstatic\tVOID\tIfMdl_Set_SysReq_BoostEn( const UCHAR indat )"
        ],
        "IfMdl_Get_SysReq_BoostEn": [
            "inline\tstatic\tUCHAR\tIfMdl_Get_SysReq_BoostEn( VOID )"
        ],
        "IfMdl_SetFlg_ExHandle_BoostEn": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_ExHandle_BoostEn( const FLAG indat )"
        ],
        "IfMdl_GetFlg_ExHandle_BoostEn": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_ExHandle_BoostEn( VOID )"
        ],
        "IfMdl_SetFlg_BoostEnReqPrg": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_BoostEnReqPrg( const FLAG indat )"
        ],
        "IfMdl_GetFlg_BoostEnReqPrg": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_BoostEnReqPrg( VOID )"
        ],
        "IfMdl_Set_SysReq_SelfFHolding": [
            "inline\tstatic\tVOID\tIfMdl_Set_SysReq_SelfFHolding( const UCHAR indat )"
        ],
        "IfMdl_Get_SysReq_SelfFHolding": [
            "inline\tstatic\tUCHAR\tIfMdl_Get_SysReq_SelfFHolding( VOID )"
        ],
        "IfMdl_SetFlg_ExHandle_SelfFHolding": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_ExHandle_SelfFHolding( const FLAG indat )"
        ],
        "IfMdl_GetFlg_ExHandle_SelfFHolding": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_ExHandle_SelfFHolding( VOID )"
        ],
        "IfMdl_SetFlg_SelfFHoldingReqPrg": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_SelfFHoldingReqPrg( const FLAG indat )"
        ],
        "IfMdl_GetFlg_SelfFHoldingReqPrg": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_SelfFHoldingReqPrg( VOID )"
        ],
        "IfMdl_SetFlg_VBATTOverVoltageSts": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_VBATTOverVoltageSts( const FLAG indat )"
        ],
        "IfMdl_GetFlg_VBATTOverVoltageSts": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_VBATTOverVoltageSts( VOID )"
        ],
        "IfMdl_SetFlg_VBATTUnderVoltageSts": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_VBATTUnderVoltageSts( const FLAG indat )"
        ],
        "IfMdl_GetFlg_VBATTUnderVoltageSts": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_VBATTUnderVoltageSts( VOID )"
        ],
        "IfMdl_SetFlg_VBATTOverVoltage_CheckExe": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_VBATTOverVoltage_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_VBATTOverVoltage_CheckExe": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_VBATTOverVoltage_CheckExe( VOID )"
        ],
        "IfMdl_SetFlg_VBATTUnderVoltage_CheckExe": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_VBATTUnderVoltage_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_VBATTUnderVoltage_CheckExe": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_VBATTUnderVoltage_CheckExe( VOID )"
        ],
        "IfMdl_Get_Mon_B_Eehw_Vbatt_Mon_Volt_Out_Rng_Hi": [
            "inline\tstatic\tuint8\tIfMdl_Get_Mon_B_Eehw_Vbatt_Mon_Volt_Out_Rng_Hi( VOID )"
        ],
        "IfMdl_Get_Mon_B_Eehw_Vbatt_Mon_Volt_Out_Rng_Lo": [
            "inline\tstatic\tuint8\tIfMdl_Get_Mon_B_Eehw_Vbatt_Mon_Volt_Out_Rng_Lo( VOID )"
        ],
        "IfMdl_Set_AdHv5v": [
            "inline static\tVOID\tIfMdl_Set_AdHv5v( VOID )"
        ],
        "IfMdl_Get_AdHv5v": [
            "inline static\tUSHORT\tIfMdl_Get_AdHv5v( VOID )"
        ],
        "IfMdl_Set_Hv5v": [
            "inline static\tVOID\tIfMdl_Set_Hv5v( const USHORT indat )"
        ],
        "IfMdl_Get_Hv5v": [
            "inline static\tUSHORT\tIfMdl_Get_Hv5v( VOID )"
        ],
        "IfMdl_Set_AdN5vasc": [
            "inline static\tVOID\tIfMdl_Set_AdN5vasc( VOID )"
        ],
        "IfMdl_Get_AdN5vasc": [
            "inline static\tUSHORT\tIfMdl_Get_AdN5vasc( VOID )"
        ],
        "IfMdl_Set_N5vasc": [
            "inline static\tVOID\tIfMdl_Set_N5vasc( const USHORT indat )"
        ],
        "IfMdl_Get_N5vasc": [
            "inline static\tUSHORT\tIfMdl_Get_N5vasc( VOID )"
        ],
        "IfMdl_Set_AdRd5vasc": [
            "inline static\tVOID\tIfMdl_Set_AdRd5vasc( VOID )"
        ],
        "IfMdl_Get_AdRd5vasc": [
            "inline static\tUSHORT\tIfMdl_Get_AdRd5vasc( VOID )"
        ],
        "IfMdl_Set_Rd5vasc": [
            "inline static\tVOID\tIfMdl_Set_Rd5vasc( const USHORT indat )"
        ],
        "IfMdl_Get_Rd5vasc": [
            "inline static\tUSHORT\tIfMdl_Get_Rd5vasc( VOID )"
        ],
        "IfMdl_Set_AdLdo_A5v1": [
            "inline static\tVOID\tIfMdl_Set_AdLdo_A5v1( VOID )"
        ],
        "IfMdl_Get_AdLdo_A5v1": [
            "inline static\tUSHORT\tIfMdl_Get_AdLdo_A5v1( VOID )"
        ],
        "IfMdl_Set_Ldo_A5v1": [
            "inline static\tVOID\tIfMdl_Set_Ldo_A5v1( const USHORT indat )"
        ],
        "IfMdl_Get_Ldo_A5v1": [
            "inline static\tUSHORT\tIfMdl_Get_Ldo_A5v1( VOID )"
        ],
        "IfMdl_Set_Ad_5vAdc": [
            "inline static\tVOID\tIfMdl_Set_Ad_5vAdc( VOID )"
        ],
        "IfMdl_Get_Ad_5vAdc": [
            "inline static\tUSHORT\tIfMdl_Get_Ad_5vAdc( VOID )"
        ],
        "IfMdl_Set_5vadc": [
            "inline static\tVOID\tIfMdl_Set_5vadc( const USHORT indat )"
        ],
        "IfMdl_Get_5vadc": [
            "inline static\tUSHORT\tIfMdl_Get_5vadc( VOID )"
        ],
        "IfMdl_Set_AdLdo_A5v2": [
            "inline static\tVOID\tIfMdl_Set_AdLdo_A5v2( VOID )"
        ],
        "IfMdl_Get_AdLdo_A5v2": [
            "inline static\tUSHORT\tIfMdl_Get_AdLdo_A5v2( VOID )"
        ],
        "IfMdl_Set_Ldo_A5v2": [
            "inline static\tVOID\tIfMdl_Set_Ldo_A5v2( const USHORT indat )"
        ],
        "IfMdl_Get_Ldo_A5v2": [
            "inline static\tUSHORT\tIfMdl_Get_Ldo_A5v2( VOID )"
        ],
        "IfMdl_Set_AdLdo_D5v": [
            "inline static\tVOID\tIfMdl_Set_AdLdo_D5v( VOID )"
        ],
        "IfMdl_Get_AdLdo_D5v": [
            "inline static\tUSHORT\tIfMdl_Get_AdLdo_D5v( VOID )"
        ],
        "IfMdl_Set_Ldo_D5v": [
            "inline static\tVOID\tIfMdl_Set_Ldo_D5v( const USHORT indat )"
        ],
        "IfMdl_Get_Ldo_D5v": [
            "inline static\tUSHORT\tIfMdl_Get_Ldo_D5v( VOID )"
        ],
        "IfMdl_SetFlg_ExHandle_PE1_Pwm": [
            "inline static\tVOID\tIfMdl_SetFlg_ExHandle_PE1_Pwm( FLAG indat )"
        ],
        "IfMdl_GetFlg_ExHandle_PE1_Pwm": [
            "inline static\tFLAG\tIfMdl_GetFlg_ExHandle_PE1_Pwm( VOID )"
        ],
        "IfMdl_Set_PE1_PwmOutReqPrg": [
            "inline static\tVOID\tIfMdl_Set_PE1_PwmOutReqPrg( USHORT indat )"
        ],
        "IfMdl_Get_PE1_PwmOutReqPrg": [
            "inline static\tUSHORT\tIfMdl_Get_PE1_PwmOutReqPrg( VOID )"
        ],
        "IfMdl_SetFlg_ExHandle_PE2_Pwm": [
            "inline static\tVOID\tIfMdl_SetFlg_ExHandle_PE2_Pwm( FLAG indat )"
        ],
        "IfMdl_GetFlg_ExHandle_PE2_Pwm": [
            "inline static\tFLAG\tIfMdl_GetFlg_ExHandle_PE2_Pwm( VOID )"
        ],
        "IfMdl_Set_PE2_PwmOutReqPrg": [
            "inline static\tVOID\tIfMdl_Set_PE2_PwmOutReqPrg( USHORT indat )"
        ],
        "IfMdl_Get_PE2_PwmOutReqPrg": [
            "inline static\tUSHORT\tIfMdl_Get_PE2_PwmOutReqPrg( VOID )"
        ]
    },
    "if_mdl_VoltageSensorAbstr.h": {
        "IfMdl_Set_Pe1AdVdc": [
            "inline static\tVOID\tIfMdl_Set_Pe1AdVdc( VOID )"
        ],
        "IfMdl_Get_Pe1AdVdc": [
            "inline static\tUSHORT\tIfMdl_Get_Pe1AdVdc( VOID )"
        ],
        "IfMdl_Set_Pe2AdVdc": [
            "inline static\tVOID\tIfMdl_Set_Pe2AdVdc( VOID )"
        ],
        "IfMdl_Get_Pe2AdVdc": [
            "inline static\tUSHORT\tIfMdl_Get_Pe2AdVdc( VOID )"
        ],
        "IfMdl_Set_NDCPe1CtrlCddVolt_DcLnkV": [
            "inline static\tVOID\tIfMdl_Set_NDCPe1CtrlCddVolt_DcLnkV( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe1CtrlCddVolt_DcLnkV": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe1CtrlCddVolt_DcLnkV( VOID )"
        ],
        "IfMdl_Set_NDCPe2CtrlCddVolt_DcLnkV": [
            "inline static\tVOID\tIfMdl_Set_NDCPe2CtrlCddVolt_DcLnkV( const FLOAT data )"
        ],
        "IfMdl_Get_NDCPe2CtrlCddVolt_DcLnkV": [
            "inline static\tFLOAT\tIfMdl_Get_NDCPe2CtrlCddVolt_DcLnkV( VOID )"
        ],
        "IfMdl_SetFlg_Pe1OvpMon": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe1OvpMon( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe1OvpMon": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe1OvpMon( VOID )"
        ],
        "IfMdl_SetFlg_Pe2OvpMon": [
            "inline static\tVOID\tIfMdl_SetFlg_Pe2OvpMon( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe2OvpMon": [
            "inline static\tFLAG\tIfMdl_GetFlg_Pe2OvpMon( VOID )"
        ],
        "IfMdl_SetFlg_Pe1OverVoltageSts": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Pe1OverVoltageSts( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe1OverVoltageSts": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Pe1OverVoltageSts( VOID )"
        ],
        "IfMdl_SetFlg_Pe2OverVoltageSts": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Pe2OverVoltageSts( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe2OverVoltageSts": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Pe2OverVoltageSts( VOID )"
        ],
        "IfMdl_SetFlg_Pe1SwOverVoltageSts": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Pe1SwOverVoltageSts( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe1SwOverVoltageSts": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Pe1SwOverVoltageSts( VOID )"
        ],
        "IfMdl_SetFlg_Pe2SwOverVoltageSts": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Pe2SwOverVoltageSts( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe2SwOverVoltageSts": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Pe2SwOverVoltageSts( VOID )"
        ],
        "IfMdl_SetFlg_Pe1SwOverVolatage_CheckExe": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Pe1SwOverVolatage_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe1SwOverVolatage_CheckExe": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Pe1SwOverVolatage_CheckExe( VOID )"
        ],
        "IfMdl_SetFlg_Pe1HwOverVolatage_CheckExe": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Pe1HwOverVolatage_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe1HwOverVolatage_CheckExe": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Pe1HwOverVolatage_CheckExe( VOID )"
        ],
        "IfMdl_SetFlg_Pe2SwOverVolatage_CheckExe": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Pe2SwOverVolatage_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe2SwOverVolatage_CheckExe": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Pe2SwOverVolatage_CheckExe( VOID )"
        ],
        "IfMdl_SetFlg_Pe2HwOverVolatage_CheckExe": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Pe2HwOverVolatage_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe2HwOverVolatage_CheckExe": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Pe2HwOverVolatage_CheckExe( VOID )"
        ],
        "IfMdl_Set_Mon_B_Prot_Pe1_Hv_Mon_Volt_Out_Rng_Hi": [
            "inline\tstatic\tVOID\tIfMdl_Set_Mon_B_Prot_Pe1_Hv_Mon_Volt_Out_Rng_Hi( const FLAG sts )"
        ],
        "IfMdl_Get_Mon_B_Prot_Pe1_Hv_Mon_Volt_Out_Rng_Hi": [
            "inline\tstatic\tuint8\tIfMdl_Get_Mon_B_Prot_Pe1_Hv_Mon_Volt_Out_Rng_Hi( VOID )"
        ],
        "IfMdl_Get_Mon_B_Prot_Pe1_Ovp_Mon_Sts_Actv": [
            "inline\tstatic\tuint8\tIfMdl_Get_Mon_B_Prot_Pe1_Ovp_Mon_Sts_Actv( VOID )"
        ],
        "IfMdl_Set_Mon_B_Prot_Pe2_Hv_Mon_Volt_Out_Rng_Hi": [
            "inline\tstatic\tVOID\tIfMdl_Set_Mon_B_Prot_Pe2_Hv_Mon_Volt_Out_Rng_Hi( const FLAG sts )"
        ],
        "IfMdl_Get_Mon_B_Prot_Pe2_Hv_Mon_Volt_Out_Rng_Hi": [
            "inline\tstatic\tuint8\tIfMdl_Get_Mon_B_Prot_Pe2_Hv_Mon_Volt_Out_Rng_Hi( VOID )"
        ],
        "IfMdl_Get_Mon_B_Prot_Pe2_Ovp_Mon_Sts_Actv": [
            "inline\tstatic\tuint8\tIfMdl_Get_Mon_B_Prot_Pe2_Ovp_Mon_Sts_Actv( VOID )"
        ],
        "IfMdl_SetFlg_Pe1OverVoltageSts_Latch": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Pe1OverVoltageSts_Latch( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe1OverVoltageSts_Latch": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Pe1OverVoltageSts_Latch( VOID )"
        ],
        "IfMdl_SetFlg_Pe2OverVoltageSts_Latch": [
            "inline\tstatic\tVOID\tIfMdl_SetFlg_Pe2OverVoltageSts_Latch( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Pe2OverVoltageSts_Latch": [
            "inline\tstatic\tFLAG\tIfMdl_GetFlg_Pe2OverVoltageSts_Latch( VOID )"
        ],
        "IfMdl_Set_Ad_DcdcLinkVol": [
            "inline static\tVOID\tIfMdl_Set_Ad_DcdcLinkVol( VOID )"
        ],
        "IfMdl_Get_Ad_DcdcLinkVol": [
            "inline static\tUSHORT\tIfMdl_Get_Ad_DcdcLinkVol( VOID )"
        ],
        "IfMdl_Set_Ad_DcdcLinkVol_Lpf": [
            "inline static\tVOID\tIfMdl_Set_Ad_DcdcLinkVol_Lpf( const USHORT indat )"
        ],
        "IfMdl_Get_Ad_DcdcLinkVol_Lpf": [
            "inline static\tUSHORT\tIfMdl_Get_Ad_DcdcLinkVol_Lpf( VOID )"
        ],
        "IfMdl_Set_Ad_DcdcBattVol": [
            "inline static\tVOID\tIfMdl_Set_Ad_DcdcBattVol( VOID )"
        ],
        "IfMdl_Get_Ad_DcdcBattVol": [
            "inline static\tUSHORT\tIfMdl_Get_Ad_DcdcBattVol( VOID )"
        ],
        "IfMdl_Set_Ad_DcdcBattVol_Lpf": [
            "inline static\tVOID\tIfMdl_Set_Ad_DcdcBattVol_Lpf( const USHORT indat )"
        ],
        "IfMdl_Get_Ad_DcdcBattVol_Lpf": [
            "inline static\tUSHORT\tIfMdl_Get_Ad_DcdcBattVol_Lpf( VOID )"
        ],
        "IfMdl_SetFlg_DcLinkOverVol": [
            "inline static\tVOID\tIfMdl_SetFlg_DcLinkOverVol( const FLAG indat )"
        ],
        "IfMdl_GetFlg_DcLinkOverVol": [
            "inline static\tFLAG\tIfMdl_GetFlg_DcLinkOverVol( VOID )"
        ],
        "IfMdl_SetFlg_DcLinkUnderVol": [
            "inline static\tVOID\tIfMdl_SetFlg_DcLinkUnderVol( const FLAG indat )"
        ],
        "IfMdl_GetFlg_DcLinkUnderVol": [
            "inline static\tFLAG\tIfMdl_GetFlg_DcLinkUnderVol( VOID )"
        ],
        "IfMdl_SetFlg_DcBattOverVol": [
            "inline static\tVOID\tIfMdl_SetFlg_DcBattOverVol( const FLAG indat )"
        ],
        "IfMdl_GetFlg_DcBattOverVol": [
            "inline static\tFLAG\tIfMdl_GetFlg_DcBattOverVol( VOID )"
        ],
        "IfMdl_SetFlg_DcBattUnderVol": [
            "inline static\tVOID\tIfMdl_SetFlg_DcBattUnderVol( const FLAG indat )"
        ],
        "IfMdl_GetFlg_DcBattUnderVol": [
            "inline static\tFLAG\tIfMdl_GetFlg_DcBattUnderVol( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Bat_Ovp_Original": [
            "inline static\tVOID\tIfMdl_SetFlg_Dcdc_Bat_Ovp_Original( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Bat_Ovp_Original": [
            "inline static\tFLAG\tIfMdl_GetFlg_Dcdc_Bat_Ovp_Original( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Bat_Ovp": [
            "inline static\tVOID\tIfMdl_SetFlg_Dcdc_Bat_Ovp( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Bat_Ovp": [
            "inline static\tFLAG\tIfMdl_GetFlg_Dcdc_Bat_Ovp( VOID )"
        ],
        "IfMdl_Set_Dcdc_Bat_Ovp": [
            "inline static VOID IfMdl_Set_Dcdc_Bat_Ovp( VOID )"
        ],
        "IfMdl_Get_Dcdc_Bat_Ovp": [
            "inline static UCHAR IfMdl_Get_Dcdc_Bat_Ovp( VOID )"
        ],
        "IfMdl_Set_DcdcLinkVol": [
            "inline static\tVOID\tIfMdl_Set_DcdcLinkVol( const SHORT indat )"
        ],
        "IfMdl_Get_DcdcLinkVol": [
            "inline static\tSHORT\tIfMdl_Get_DcdcLinkVol( VOID )"
        ],
        "IfMdl_Set_DcdcBattVol": [
            "inline static\tVOID\tIfMdl_Set_DcdcBattVol( const SHORT indat )"
        ],
        "IfMdl_Get_DcdcBattVol": [
            "inline static\tSHORT\tIfMdl_Get_DcdcBattVol( VOID )"
        ],
        "IfMdl_SetFlg_Dc_Con_HwOvp_CheckExe": [
            "inline static\tVOID\tIfMdl_SetFlg_Dc_Con_HwOvp_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dc_Con_HwOvp_CheckExe": [
            "inline static\tFLAG\tIfMdl_GetFlg_Dc_Con_HwOvp_CheckExe( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Bat_Ovp_Latch": [
            "inline static\tVOID\tIfMdl_SetFlg_Dcdc_Bat_Ovp_Latch( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Bat_Ovp_Latch": [
            "inline static\tFLAG\tIfMdl_GetFlg_Dcdc_Bat_Ovp_Latch( VOID )"
        ],
        "IfMdl_SetFlg_Dc_Link_HwOvp_CheckExe": [
            "inline static\tVOID\tIfMdl_SetFlg_Dc_Link_HwOvp_CheckExe( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dc_Link_HwOvp_CheckExe": [
            "inline static\tFLAG\tIfMdl_GetFlg_Dc_Link_HwOvp_CheckExe( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_Link_Ovp_Original": [
            "inline static\tVOID\tIfMdl_SetFlg_Dcdc_Link_Ovp_Original( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_Link_Ovp_Original": [
            "inline static\tFLAG\tIfMdl_GetFlg_Dcdc_Link_Ovp_Original( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_DcLink_Ovp": [
            "inline static\tVOID\tIfMdl_SetFlg_Dcdc_DcLink_Ovp( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_DcLink_Ovp": [
            "inline static\tFLAG\tIfMdl_GetFlg_Dcdc_DcLink_Ovp( VOID )"
        ],
        "IfMdl_SetFlg_Dcdc_DcLink_Ovp_Latch": [
            "inline static\tVOID\tIfMdl_SetFlg_Dcdc_DcLink_Ovp_Latch( const FLAG indat )"
        ],
        "IfMdl_GetFlg_Dcdc_DcLink_Ovp_Latch": [
            "inline static\tFLAG\tIfMdl_GetFlg_Dcdc_DcLink_Ovp_Latch( VOID )"
        ],
        "IfMdl_Set_Dcdc_DcLink_Ovp": [
            "inline static VOID IfMdl_Set_Dcdc_DcLink_Ovp( VOID )"
        ],
        "IfMdl_Get_Dcdc_DcLink_Ovp": [
            "inline static UCHAR IfMdl_Get_Dcdc_DcLink_Ovp( VOID )"
        ],
        "IfMdl_Set_AdAdcMon": [
            "inline static\tVOID\tIfMdl_Set_AdAdcMon( VOID )"
        ],
        "IfMdl_Get_AdAdcMon": [
            "inline static\tUSHORT\tIfMdl_Get_AdAdcMon( VOID )"
        ],
        "IfMdl_Set_AdcMon": [
            "inline static\tVOID\tIfMdl_Set_AdcMon( const USHORT indat )"
        ],
        "IfMdl_Get_AdcMon": [
            "inline static\tUSHORT\tIfMdl_Get_AdcMon( VOID )"
        ],
        "IfMdl_Set_DcLinkVol_DcDc_Qf": [
            "inline static\tVOID\tIfMdl_Set_DcLinkVol_DcDc_Qf( const CHAR sig )"
        ],
        "IfMdl_Get_DcLinkVol_DcDc_Qf": [
            "inline static\tCHAR\tIfMdl_Get_DcLinkVol_DcDc_Qf( VOID )"
        ],
        "IfMdl_Set_DcConVol_DcDc_Qf": [
            "inline static\tVOID\tIfMdl_Set_DcConVol_DcDc_Qf( const CHAR sig )"
        ],
        "IfMdl_Get_DcConVol_DcDc_Qf": [
            "inline static\tCHAR\tIfMdl_Get_DcConVol_DcDc_Qf( VOID )"
        ],
        "IfMdl_Set_DcLinkVol_Pe1_Qf": [
            "inline static\tVOID\tIfMdl_Set_DcLinkVol_Pe1_Qf( const CHAR sig )"
        ],
        "IfMdl_Get_DcLinkVol_Pe1_Qf": [
            "inline static\tCHAR\tIfMdl_Get_DcLinkVol_Pe1_Qf( VOID )"
        ],
        "IfMdl_Set_DcLinkVol_Pe2_Qf": [
            "inline static\tVOID\tIfMdl_Set_DcLinkVol_Pe2_Qf( const CHAR sig )"
        ],
        "IfMdl_Get_DcLinkVol_Pe2_Qf": [
            "inline static\tCHAR\tIfMdl_Get_DcLinkVol_Pe2_Qf( VOID )"
        ]
    },
    "OnlineCalbParameters.h": {},
    "TQ250_IoHwAbs.h": {},
    "Ifx_Cfg.h": {},
    "Configuration.h": {},
    "ConfigurationIsr.h": {},
    "IfxAsclin_Asc.h": {},
    "IfxAsclin_Lin.h": {
        "IfxAsclin_Lin_prepareHeaderReception": [
            "IFX_INLINE void IfxAsclin_Lin_prepareHeaderReception(IfxAsclin_Lin *asclin)"
        ],
        "IfxAsclin_Lin_prepareResponseReception": [
            "IFX_INLINE void IfxAsclin_Lin_prepareResponseReception(IfxAsclin_Lin *asclin, uint32 length)"
        ],
        "IfxAsclin_Lin_readHeader": [
            "IFX_INLINE void IfxAsclin_Lin_readHeader(IfxAsclin_Lin *asclin, uint8 *id)"
        ],
        "IfxAsclin_Lin_readResponse": [
            "IFX_INLINE void IfxAsclin_Lin_readResponse(IfxAsclin_Lin *asclin, uint8 *data, uint32 length)"
        ]
    },
    "IfxAsclin_Spi.h": {},
    "IfxAsclin.h": {
        "IfxAsclin_clearAllFlags": [
            "IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_clearBreakDetectedFlag": [
            "IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_clearCollisionDetectionErrorFlag": [
            "IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_clearFallingEdgeDetectedFlag": [
            "IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_clearFrameErrorFlag": [
            "IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_clearHeaderTimeoutFlag": [
            "IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_clearKernelResetStatus": [
            "IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_clearLinAutoBaudDetectionErrorFlag": [
            "IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_clearLinChecksumErrorFlag": [
            "IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_clearLinParityErrorFlag": [
            "IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_clearParityErrorFlag": [
            "IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_clearRaisingEdgeDetectedFlag": [
            "IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_clearResponseTimeoutFlag": [
            "IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_clearRxFifoFillLevelFlag": [
            "IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_clearRxFifoOverflowFlag": [
            "IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_clearRxFifoUnderflowFlag": [
            "IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_clearRxHeaderEndFlag": [
            "IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_clearRxResponseEndFlag": [
            "IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_clearTransmissionCompletedFlag": [
            "IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_clearTxFifoFillLevelFlag": [
            "IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_clearTxFifoOverflowFlag": [
            "IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_clearTxHeaderEndFlag": [
            "IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_clearTxResponseEndFlag": [
            "IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_disableAllFlags": [
            "IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_enableAutoBaudrateDetection": [
            "IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableBreakDetectedFlag": [
            "IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableCollisionDetection": [
            "IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableCollisionDetectionErrorFlag": [
            "IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableCts": [
            "IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableFallingEdgeDetectedFlag": [
            "IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableFrameErrorFlag": [
            "IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableHardwareChecksum": [
            "IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableHeaderTimeoutFlag": [
            "IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableLinAutoBaudDetectionErrorFlag": [
            "IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableLinChecksumErrorFlag": [
            "IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableLinParityErrorFlag": [
            "IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableLoopBackMode": [
            "IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableParity": [
            "IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableParityErrorFlag": [
            "IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableRaisingEdgeDetectedFlag": [
            "IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableResponseTimeoutFlag": [
            "IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableRxFifoFillLevelFlag": [
            "IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableRxFifoInlet": [
            "IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableRxFifoOverflowFlag": [
            "IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableRxFifoUnderflowFlag": [
            "IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableRxHeaderEndFlag": [
            "IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableRxResponseEndFlag": [
            "IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableTransmissionCompletedFlag": [
            "IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableTxFifoFillLevelFlag": [
            "IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableTxFifoOutlet": [
            "IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableTxFifoOverflowFlag": [
            "IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableTxHeaderEndFlag": [
            "IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_enableTxResponseEndFlag": [
            "IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)"
        ],
        "IfxAsclin_flushRxFifo": [
            "IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_flushTxFifo": [
            "IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getBreakDetectedFlagStatus": [
            "IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getClockSource": [
            "IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getClockStatus": [
            "IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getCollisionDetectionErrorFlagStatus": [
            "IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getFallingEdgeDetectedFlagStatus": [
            "IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getFrameErrorFlagStatus": [
            "IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getHeaderTimeoutFlagStatus": [
            "IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getKernelResetStatus": [
            "IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus": [
            "IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getLinChecksumErrorFlagStatus": [
            "IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getLinParityErrorFlagStatus": [
            "IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getModuleStatus": [
            "IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getParityErrorFlagStatus": [
            "IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getPrescaler": [
            "IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getRaisingEdgeDetectedFlagStatus": [
            "IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getReceiveSignalStatus": [
            "IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getResponseTimeoutFlagStatus": [
            "IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getRxFifoFillLevel": [
            "IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getRxFifoFillLevelFlagStatus": [
            "IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getRxFifoOutletWidth": [
            "IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getRxFifoOverflowFlagStatus": [
            "IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getRxFifoUnderflowFlagStatus": [
            "IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getRxHeaderEndFlagStatus": [
            "IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getRxResponseEndFlagStatus": [
            "IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getTransmissionCompletedFlagStatus": [
            "IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getTransmitSignalStatus": [
            "IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getTxFifoFillLevel": [
            "IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getTxFifoFillLevelFlagStatus": [
            "IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getTxFifoInletWidth": [
            "IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getTxFifoOverflowFlagStatus": [
            "IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getTxHeaderEndFlagStatus": [
            "IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_getTxResponseEndFlagStatus": [
            "IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_initCtsPin": [
            "IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxAsclin_initRtsPin": [
            "IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxAsclin_initRxPin": [
            "IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxAsclin_initSclkPin": [
            "IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxAsclin_initSlsoPin": [
            "IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxAsclin_initTxPin": [
            "IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxAsclin_isModuleSuspended": [
            "IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_readRxData": [
            "IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_setBrdLowerlimt": [
            "IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit)"
        ],
        "IfxAsclin_setBrdUpperlimt": [
            "IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit)"
        ],
        "IfxAsclin_setChecksumInjection": [
            "IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi)"
        ],
        "IfxAsclin_setChecksumMode": [
            "IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode)"
        ],
        "IfxAsclin_setClockPolarity": [
            "IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol)"
        ],
        "IfxAsclin_setCtsInput": [
            "IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)"
        ],
        "IfxAsclin_setDataLength": [
            "IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)"
        ],
        "IfxAsclin_setDenominator": [
            "IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)"
        ],
        "IfxAsclin_setDisableModuleRequest": [
            "IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_setEnableModuleRequest": [
            "IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_setFilterDepth": [
            "IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth)"
        ],
        "IfxAsclin_setFrameMode": [
            "IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)"
        ],
        "IfxAsclin_setHeaderResponseSelect": [
            "IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type)"
        ],
        "IfxAsclin_setIdleDelay": [
            "IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay)"
        ],
        "IfxAsclin_setKernelResetOne": [
            "IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_setKernelResetZero": [
            "IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_setLeadDelay": [
            "IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay)"
        ],
        "IfxAsclin_setLinBreakLength": [
            "IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length)"
        ],
        "IfxAsclin_setLinHeaderTimeout": [
            "IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout)"
        ],
        "IfxAsclin_setLinMode": [
            "IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode)"
        ],
        "IfxAsclin_setLinResponseTimeoutMode": [
            "IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode)"
        ],
        "IfxAsclin_setLinResponseTimeoutThreshold": [
            "IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold)"
        ],
        "IfxAsclin_setNumerator": [
            "IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator)"
        ],
        "IfxAsclin_setOversampling": [
            "IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor)"
        ],
        "IfxAsclin_setParityType": [
            "IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type)"
        ],
        "IfxAsclin_setPrescaler": [
            "IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)"
        ],
        "IfxAsclin_setRtsCtsPolarity": [
            "IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol)"
        ],
        "IfxAsclin_setRxBufferMode": [
            "IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode)"
        ],
        "IfxAsclin_setRxFifoInterruptLevel": [
            "IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level)"
        ],
        "IfxAsclin_setRxFifoInterruptMode": [
            "IFX_INLINE void IfxAsclin_setRxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode)"
        ],
        "IfxAsclin_setRxFifoOutletWidth": [
            "IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width)"
        ],
        "IfxAsclin_setRxInput": [
            "IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti)"
        ],
        "IfxAsclin_setSampleMode": [
            "IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter)"
        ],
        "IfxAsclin_setSamplePointPosition": [
            "IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition)"
        ],
        "IfxAsclin_setShiftDirection": [
            "IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir)"
        ],
        "IfxAsclin_setSlavePolarity": [
            "IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol)"
        ],
        "IfxAsclin_setSleepMode": [
            "IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode)"
        ],
        "IfxAsclin_setStopBit": [
            "IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit)"
        ],
        "IfxAsclin_setSuspendMode": [
            "IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode)"
        ],
        "IfxAsclin_setTransmitHeaderRequestFlag": [
            "IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_setTransmitResponseRequestFlag": [
            "IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_setTransmitWakeRequestFlag": [
            "IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin)"
        ],
        "IfxAsclin_setTxFifoInletWidth": [
            "IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width)"
        ],
        "IfxAsclin_setTxFifoInterruptLevel": [
            "IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level)"
        ],
        "IfxAsclin_setTxFifoInterruptMode": [
            "IFX_INLINE void IfxAsclin_setTxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode)"
        ],
        "IfxAsclin_writeTxData": [
            "IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data)"
        ],
        "IfxAsclin_getAllErrorFlagsStatus": [
            "IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin)"
        ]
    },
    "IfxCan_Can.h": {
        "IfxCan_Can_getRxFifo0FillLevel": [
            "IFX_INLINE uint8 IfxCan_Can_getRxFifo0FillLevel(IfxCan_Can_Node *node)"
        ],
        "IfxCan_Can_getRxFifo1FillLevel": [
            "IFX_INLINE uint8 IfxCan_Can_getRxFifo1FillLevel(IfxCan_Can_Node *node)"
        ],
        "IfxCan_Can_isNewDataReceived": [
            "IFX_INLINE boolean IfxCan_Can_isNewDataReceived(IfxCan_Can_Node *node, IfxCan_RxBufferId rxBufferId)"
        ],
        "IfxCan_Can_isNodeSynchronized": [
            "IFX_INLINE boolean IfxCan_Can_isNodeSynchronized(IfxCan_Can_Node *node)"
        ],
        "IfxCan_Can_isTxBufferRequestPending": [
            "IFX_INLINE boolean IfxCan_Can_isTxBufferRequestPending(IfxCan_Can_Node *node, IfxCan_TxBufferId txBufferId)"
        ],
        "IfxCan_Can_isTxFifoQueueFull": [
            "IFX_INLINE boolean IfxCan_Can_isTxFifoQueueFull(IfxCan_Can_Node *node)"
        ]
    },
    "IfxCan.h": {
        "IfxCan_Node_acceptRemoteFramesWithStandardId": [
            "IFX_INLINE void IfxCan_Node_acceptRemoteFramesWithStandardId(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_acceptRemoteFrameswithExtendedId": [
            "IFX_INLINE void IfxCan_Node_acceptRemoteFrameswithExtendedId(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_clearInterruptFlag": [
            "IFX_INLINE void IfxCan_Node_clearInterruptFlag(Ifx_CAN_N *node, IfxCan_Interrupt interrupt)"
        ],
        "IfxCan_Node_configureExtendedFilterForNonMatchingFrames": [
            "IFX_INLINE void IfxCan_Node_configureExtendedFilterForNonMatchingFrames(Ifx_CAN_N *node, IfxCan_NonMatchingFrame filter)"
        ],
        "IfxCan_Node_configureStandardFilterForNonMatchingFrames": [
            "IFX_INLINE void IfxCan_Node_configureStandardFilterForNonMatchingFrames(Ifx_CAN_N *node, IfxCan_NonMatchingFrame filter)"
        ],
        "IfxCan_Node_disableConfigurationChange": [
            "IFX_INLINE void IfxCan_Node_disableConfigurationChange(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_disableInterrupt": [
            "IFX_INLINE void IfxCan_Node_disableInterrupt(Ifx_CAN_N *node, IfxCan_Interrupt interrupt)"
        ],
        "IfxCan_Node_disableTxBufferCancellationFinishedInterrupt": [
            "IFX_INLINE void IfxCan_Node_disableTxBufferCancellationFinishedInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)"
        ],
        "IfxCan_Node_disableTxBufferTransmissionInterrupt": [
            "IFX_INLINE void IfxCan_Node_disableTxBufferTransmissionInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)"
        ],
        "IfxCan_Node_enableConfigurationChange": [
            "IFX_INLINE void IfxCan_Node_enableConfigurationChange(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_enableInterrupt": [
            "IFX_INLINE void IfxCan_Node_enableInterrupt(Ifx_CAN_N *node, IfxCan_Interrupt interrupt)"
        ],
        "IfxCan_Node_enableLoopbackMode": [
            "IFX_INLINE void IfxCan_Node_enableLoopbackMode(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_enableTxBufferCancellationFinishedInterrupt": [
            "IFX_INLINE void IfxCan_Node_enableTxBufferCancellationFinishedInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)"
        ],
        "IfxCan_Node_enableTxBufferTransmissionInterrupt": [
            "IFX_INLINE void IfxCan_Node_enableTxBufferTransmissionInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)"
        ],
        "IfxCan_Node_getBRSFromTxEventFifo": [
            "IFX_INLINE boolean IfxCan_Node_getBRSFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)"
        ],
        "IfxCan_Node_getDLCFromTxEventFifo": [
            "IFX_INLINE uint32 IfxCan_Node_getDLCFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)"
        ],
        "IfxCan_Node_getDataLengthCode": [
            "IFX_INLINE uint32 IfxCan_Node_getDataLengthCode(Ifx_CAN_RXMSG *rxBufferElement)"
        ],
        "IfxCan_Node_getESIFromTxEventFifo": [
            "IFX_INLINE boolean IfxCan_Node_getESIFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)"
        ],
        "IfxCan_Node_getFDFFromTxEventFifo": [
            "IFX_INLINE boolean IfxCan_Node_getFDFFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)"
        ],
        "IfxCan_Node_getInterruptFlagStatus": [
            "IFX_INLINE boolean IfxCan_Node_getInterruptFlagStatus(Ifx_CAN_N *node, IfxCan_Interrupt interrupt)"
        ],
        "IfxCan_Node_getMMFromTxEventFifo": [
            "IFX_INLINE uint8 IfxCan_Node_getMMFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)"
        ],
        "IfxCan_Node_getMesssageId": [
            "IFX_INLINE uint32 IfxCan_Node_getMesssageId(Ifx_CAN_RXMSG *rxBufferElement)"
        ],
        "IfxCan_Node_getMesssageIdFromTxEventFifo": [
            "IFX_INLINE uint32 IfxCan_Node_getMesssageIdFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)"
        ],
        "IfxCan_Node_getRTRFromTxEventFifo": [
            "IFX_INLINE boolean IfxCan_Node_getRTRFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)"
        ],
        "IfxCan_Node_getRxFifo0FillLevel": [
            "IFX_INLINE uint8 IfxCan_Node_getRxFifo0FillLevel(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_getRxFifo0GetIndex": [
            "IFX_INLINE IfxCan_RxBufferId IfxCan_Node_getRxFifo0GetIndex(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_getRxFifo1FillLevel": [
            "IFX_INLINE uint8 IfxCan_Node_getRxFifo1FillLevel(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_getRxFifo1GetIndex": [
            "IFX_INLINE IfxCan_RxBufferId IfxCan_Node_getRxFifo1GetIndex(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_getTXTSFromTxEventFifo": [
            "IFX_INLINE uint16 IfxCan_Node_getTXTSFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)"
        ],
        "IfxCan_Node_getTxEventFifoAcknowledgeIndex": [
            "IFX_INLINE uint8 IfxCan_Node_getTxEventFifoAcknowledgeIndex(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_getTxEventFifoFillLevel": [
            "IFX_INLINE uint8 IfxCan_Node_getTxEventFifoFillLevel(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_getTxEventFifoGetIndex": [
            "IFX_INLINE uint8 IfxCan_Node_getTxEventFifoGetIndex(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_getTxEventFifoPutIndex": [
            "IFX_INLINE uint8 IfxCan_Node_getTxEventFifoPutIndex(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_getTxEventFifoSize": [
            "IFX_INLINE uint8 IfxCan_Node_getTxEventFifoSize(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_getTxEventFifoStartAddress": [
            "IFX_INLINE uint16 IfxCan_Node_getTxEventFifoStartAddress(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_getTxEventFifoWatermarkLevel": [
            "IFX_INLINE uint8 IfxCan_Node_getTxEventFifoWatermarkLevel(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_getTxFifoQueuePutIndex": [
            "IFX_INLINE IfxCan_TxBufferId IfxCan_Node_getTxFifoQueuePutIndex(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_isNodeSynchronized": [
            "IFX_INLINE boolean IfxCan_Node_isNodeSynchronized(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_isTxBufferCancellationFinished": [
            "IFX_INLINE boolean IfxCan_Node_isTxBufferCancellationFinished(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)"
        ],
        "IfxCan_Node_isTxBufferRequestPending": [
            "IFX_INLINE boolean IfxCan_Node_isTxBufferRequestPending(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)"
        ],
        "IfxCan_Node_isTxBufferTransmissionOccured": [
            "IFX_INLINE boolean IfxCan_Node_isTxBufferTransmissionOccured(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)"
        ],
        "IfxCan_Node_isTxEventFifoElementLost": [
            "IFX_INLINE boolean IfxCan_Node_isTxEventFifoElementLost(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_isTxEventFifoFull": [
            "IFX_INLINE boolean IfxCan_Node_isTxEventFifoFull(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_isTxFifoQueueFull": [
            "IFX_INLINE boolean IfxCan_Node_isTxFifoQueueFull(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_pauseTransmission": [
            "IFX_INLINE void IfxCan_Node_pauseTransmission(Ifx_CAN_N *node, boolean enable)"
        ],
        "IfxCan_Node_rejectRemoteFramesWithExtendedId": [
            "IFX_INLINE void IfxCan_Node_rejectRemoteFramesWithExtendedId(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_rejectRemoteFramesWithStandardId": [
            "IFX_INLINE void IfxCan_Node_rejectRemoteFramesWithStandardId(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_setDataLength": [
            "IFX_INLINE void IfxCan_Node_setDataLength(Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode)"
        ],
        "IfxCan_Node_setDataLengthCode": [
            "IFX_INLINE void IfxCan_Node_setDataLengthCode(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode)"
        ],
        "IfxCan_Node_setDedicatedTxBuffersNumber": [
            "IFX_INLINE void IfxCan_Node_setDedicatedTxBuffersNumber(Ifx_CAN_N *node, uint8 number)"
        ],
        "IfxCan_Node_setErrStateIndicator": [
            "IFX_INLINE void IfxCan_Node_setErrStateIndicator(Ifx_CAN_TXMSG *txBufferElement, boolean enable)"
        ],
        "IfxCan_Node_setErrorStateIndicator": [
            "IFX_INLINE void IfxCan_Node_setErrorStateIndicator(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable)"
        ],
        "IfxCan_Node_setExtendedFilterConfiguration": [
            "IFX_INLINE void IfxCan_Node_setExtendedFilterConfiguration(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_FilterElementConfiguration filterElementConfiguration)"
        ],
        "IfxCan_Node_setExtendedFilterId1": [
            "IFX_INLINE void IfxCan_Node_setExtendedFilterId1(Ifx_CAN_EXTMSG *extendedFilterElement, uint32 id)"
        ],
        "IfxCan_Node_setExtendedFilterId2": [
            "IFX_INLINE void IfxCan_Node_setExtendedFilterId2(Ifx_CAN_EXTMSG *extendedFilterElement, uint32 id)"
        ],
        "IfxCan_Node_setExtendedFilterListSize": [
            "IFX_INLINE void IfxCan_Node_setExtendedFilterListSize(Ifx_CAN_N *node, uint8 size)"
        ],
        "IfxCan_Node_setExtendedFilterListStartAddress": [
            "IFX_INLINE void IfxCan_Node_setExtendedFilterListStartAddress(Ifx_CAN_N *node, uint16 address)"
        ],
        "IfxCan_Node_setExtendedFilterRxBufferOffset": [
            "IFX_INLINE void IfxCan_Node_setExtendedFilterRxBufferOffset(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_RxBufferId rxBufferNumber)"
        ],
        "IfxCan_Node_setExtendedFilterType": [
            "IFX_INLINE void IfxCan_Node_setExtendedFilterType(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_FilterType filterType)"
        ],
        "IfxCan_Node_setInitialisation": [
            "IFX_INLINE void IfxCan_Node_setInitialisation(Ifx_CAN_N *node, boolean enable)"
        ],
        "IfxCan_Node_setMessageMarker": [
            "IFX_INLINE void IfxCan_Node_setMessageMarker(Ifx_CAN_TXMSG *txBufferElement, IfxCan_TxBufferId bufferId)"
        ],
        "IfxCan_Node_setMsgId": [
            "IFX_INLINE void IfxCan_Node_setMsgId(Ifx_CAN_TXMSG *txBufferElement, uint32 messageId, IfxCan_MessageIdLength messageIdLength)"
        ],
        "IfxCan_Node_setMesssageId": [
            "IFX_INLINE void IfxCan_Node_setMesssageId(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, uint32 messageId, IfxCan_MessageIdLength messageIdLength)"
        ],
        "IfxCan_Node_setRemoteTransmitReq": [
            "IFX_INLINE void IfxCan_Node_setRemoteTransmitReq(Ifx_CAN_TXMSG *txBufferElement, boolean enable)"
        ],
        "IfxCan_Node_setRemoteTransmitRequest": [
            "IFX_INLINE void IfxCan_Node_setRemoteTransmitRequest(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable)"
        ],
        "IfxCan_Node_setRxBufferDataFieldSize": [
            "IFX_INLINE void IfxCan_Node_setRxBufferDataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size)"
        ],
        "IfxCan_Node_setRxBuffersStartAddress": [
            "IFX_INLINE void IfxCan_Node_setRxBuffersStartAddress(Ifx_CAN_N *node, uint16 address)"
        ],
        "IfxCan_Node_setRxFifo0AcknowledgeIndex": [
            "IFX_INLINE void IfxCan_Node_setRxFifo0AcknowledgeIndex(Ifx_CAN_N *node, IfxCan_RxBufferId RxBufferNumber)"
        ],
        "IfxCan_Node_setRxFifo0DataFieldSize": [
            "IFX_INLINE void IfxCan_Node_setRxFifo0DataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size)"
        ],
        "IfxCan_Node_setRxFifo0OperatingMode": [
            "IFX_INLINE void IfxCan_Node_setRxFifo0OperatingMode(Ifx_CAN_N *node, IfxCan_RxFifoMode mode)"
        ],
        "IfxCan_Node_setRxFifo0Size": [
            "IFX_INLINE void IfxCan_Node_setRxFifo0Size(Ifx_CAN_N *node, uint8 size)"
        ],
        "IfxCan_Node_setRxFifo0StartAddress": [
            "IFX_INLINE void IfxCan_Node_setRxFifo0StartAddress(Ifx_CAN_N *node, uint16 address)"
        ],
        "IfxCan_Node_setRxFifo0WatermarkLevel": [
            "IFX_INLINE void IfxCan_Node_setRxFifo0WatermarkLevel(Ifx_CAN_N *node, uint8 level)"
        ],
        "IfxCan_Node_setRxFifo1AcknowledgeIndex": [
            "IFX_INLINE void IfxCan_Node_setRxFifo1AcknowledgeIndex(Ifx_CAN_N *node, IfxCan_RxBufferId RxBufferNumber)"
        ],
        "IfxCan_Node_setRxFifo1DataFieldSize": [
            "IFX_INLINE void IfxCan_Node_setRxFifo1DataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size)"
        ],
        "IfxCan_Node_setRxFifo1OperatingMode": [
            "IFX_INLINE void IfxCan_Node_setRxFifo1OperatingMode(Ifx_CAN_N *node, IfxCan_RxFifoMode mode)"
        ],
        "IfxCan_Node_setRxFifo1Size": [
            "IFX_INLINE void IfxCan_Node_setRxFifo1Size(Ifx_CAN_N *node, uint8 size)"
        ],
        "IfxCan_Node_setRxFifo1StartAddress": [
            "IFX_INLINE void IfxCan_Node_setRxFifo1StartAddress(Ifx_CAN_N *node, uint16 address)"
        ],
        "IfxCan_Node_setRxFifo1WatermarkLevel": [
            "IFX_INLINE void IfxCan_Node_setRxFifo1WatermarkLevel(Ifx_CAN_N *node, uint8 level)"
        ],
        "IfxCan_Node_setStandardFilterConfiguration": [
            "IFX_INLINE void IfxCan_Node_setStandardFilterConfiguration(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_FilterElementConfiguration filterElementConfiguration)"
        ],
        "IfxCan_Node_setStandardFilterId1": [
            "IFX_INLINE void IfxCan_Node_setStandardFilterId1(Ifx_CAN_STDMSG *standardFilterElement, uint32 id)"
        ],
        "IfxCan_Node_setStandardFilterId2": [
            "IFX_INLINE void IfxCan_Node_setStandardFilterId2(Ifx_CAN_STDMSG *standardFilterElement, uint32 id)"
        ],
        "IfxCan_Node_setStandardFilterListSize": [
            "IFX_INLINE void IfxCan_Node_setStandardFilterListSize(Ifx_CAN_N *node, uint8 size)"
        ],
        "IfxCan_Node_setStandardFilterListStartAddress": [
            "IFX_INLINE void IfxCan_Node_setStandardFilterListStartAddress(Ifx_CAN_N *node, uint16 address)"
        ],
        "IfxCan_Node_setStandardFilterRxBufferOffset": [
            "IFX_INLINE void IfxCan_Node_setStandardFilterRxBufferOffset(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_RxBufferId rxBufferNumber)"
        ],
        "IfxCan_Node_setStandardFilterType": [
            "IFX_INLINE void IfxCan_Node_setStandardFilterType(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_FilterType filterType)"
        ],
        "IfxCan_Node_setTransceiverDelayCompensationOffset": [
            "IFX_INLINE void IfxCan_Node_setTransceiverDelayCompensationOffset(Ifx_CAN_N *node, uint8 delay)"
        ],
        "IfxCan_Node_setTransmitFifoQueueMode": [
            "IFX_INLINE void IfxCan_Node_setTransmitFifoQueueMode(Ifx_CAN_N *node, IfxCan_TxMode mode)"
        ],
        "IfxCan_Node_setTransmitFifoQueueSize": [
            "IFX_INLINE void IfxCan_Node_setTransmitFifoQueueSize(Ifx_CAN_N *node, uint8 number)"
        ],
        "IfxCan_Node_setTxBufferAddRequest": [
            "IFX_INLINE void IfxCan_Node_setTxBufferAddRequest(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)"
        ],
        "IfxCan_Node_setTxBufferCancellationRequest": [
            "IFX_INLINE void IfxCan_Node_setTxBufferCancellationRequest(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)"
        ],
        "IfxCan_Node_setTxBufferDataFieldSize": [
            "IFX_INLINE void IfxCan_Node_setTxBufferDataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size)"
        ],
        "IfxCan_Node_setTxBuffersStartAddress": [
            "IFX_INLINE void IfxCan_Node_setTxBuffersStartAddress(Ifx_CAN_N *node, uint16 address)"
        ],
        "IfxCan_Node_setTxEventFifoCtrl": [
            "IFX_INLINE void IfxCan_Node_setTxEventFifoCtrl(Ifx_CAN_TXMSG *txBufferElement, boolean enable)"
        ],
        "IfxCan_Node_setTxEventFifoControl": [
            "IFX_INLINE void IfxCan_Node_setTxEventFifoControl(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable)"
        ],
        "IfxCan_Node_setTxEventFifoSize": [
            "IFX_INLINE void IfxCan_Node_setTxEventFifoSize(Ifx_CAN_N *node, uint8 size)"
        ],
        "IfxCan_Node_setTxEventFifoStartAddress": [
            "IFX_INLINE void IfxCan_Node_setTxEventFifoStartAddress(Ifx_CAN_N *node, uint16 address)"
        ],
        "IfxCan_Node_setTxEventFifoWatermarkLevel": [
            "IFX_INLINE void IfxCan_Node_setTxEventFifoWatermarkLevel(Ifx_CAN_N *node, uint8 level)"
        ],
        "IfxCan_getNodePointer": [
            "IFX_INLINE Ifx_CAN_N *IfxCan_getNodePointer(Ifx_CAN *can, IfxCan_NodeId nodeId)"
        ],
        "IfxCan_isModuleEnabled": [
            "IFX_INLINE boolean IfxCan_isModuleEnabled(Ifx_CAN *can)"
        ],
        "IfxCan_isModuleSuspended": [
            "IFX_INLINE boolean IfxCan_isModuleSuspended(Ifx_CAN *can)"
        ],
        "IfxCan_setSleepMode": [
            "IFX_INLINE void IfxCan_setSleepMode(Ifx_CAN *can, IfxCan_SleepMode mode)"
        ],
        "IfxCan_setSuspendMode": [
            "IFX_INLINE void IfxCan_setSuspendMode(Ifx_CAN *can, IfxCan_SuspendMode mode)"
        ],
        "IfxCan_Node_getLastErroCodeStatus": [
            "IFX_INLINE IfxCan_LastErrorCodeType IfxCan_Node_getLastErroCodeStatus(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_isErrorPassive": [
            "IFX_INLINE boolean IfxCan_Node_isErrorPassive(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_getWarningStatus": [
            "IFX_INLINE IfxCan_CanNodeErrorWarningLimitStatus IfxCan_Node_getWarningStatus(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_getBusOffStatus": [
            "IFX_INLINE IfxCan_CanNodeBusOffErrorStatus IfxCan_Node_getBusOffStatus(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_getActivityStatus": [
            "IFX_INLINE IfxCan_CanNodeCommunicationState IfxCan_Node_getActivityStatus(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_getDataPhaseLastErrorCode": [
            "IFX_INLINE IfxCan_LastErrorCodeType IfxCan_Node_getDataPhaseLastErrorCode(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_isProtocolExceptionEventOccured": [
            "IFX_INLINE boolean IfxCan_Node_isProtocolExceptionEventOccured(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_isErrorStatusIndicatorEnabled": [
            "IFX_INLINE boolean IfxCan_Node_isErrorStatusIndicatorEnabled(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_isBitRateSwitchFlagEnabled": [
            "IFX_INLINE boolean IfxCan_Node_isBitRateSwitchFlagEnabled(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_isCanFDMsgReceived": [
            "IFX_INLINE boolean IfxCan_Node_isCanFDMsgReceived(Ifx_CAN_N *node)"
        ],
        "IfxCan_Node_getCodeFromDataLengthInBytes": [
            "IFX_INLINE IfxCan_DataLengthCode IfxCan_Node_getCodeFromDataLengthInBytes(uint32 dataLength)"
        ]
    },
    "IfxCcu6_Icu.h": {},
    "IfxCcu6_PwmBc.h": {},
    "IfxCcu6_PwmHl.h": {
        "IfxCcu6_PwmHl_invertActiveState": [
            "IFX_INLINE Ifx_ActiveState IfxCcu6_PwmHl_invertActiveState(Ifx_ActiveState activeState)"
        ]
    },
    "IfxCcu6.h": {
        "IfxCcu6_clearAllInterruptStatusFlags": [
            "IFX_INLINE void IfxCcu6_clearAllInterruptStatusFlags(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_clearCounter": [
            "IFX_INLINE void IfxCcu6_clearCounter(Ifx_CCU6 *ccu6, boolean t12, boolean t13)"
        ],
        "IfxCcu6_clearDeadTimeCounters": [
            "IFX_INLINE void IfxCcu6_clearDeadTimeCounters(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_clearInterruptStatusFlag": [
            "IFX_INLINE void IfxCcu6_clearInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)"
        ],
        "IfxCcu6_clearT12OneNotification": [
            "IFX_INLINE void IfxCcu6_clearT12OneNotification(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_clearT12PeriodNotification": [
            "IFX_INLINE void IfxCcu6_clearT12PeriodNotification(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_clearT13CompareNotification": [
            "IFX_INLINE void IfxCcu6_clearT13CompareNotification(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_disableAdditionalPrescaler": [
            "IFX_INLINE void IfxCcu6_disableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)"
        ],
        "IfxCcu6_disableDeadTime": [
            "IFX_INLINE void IfxCcu6_disableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)"
        ],
        "IfxCcu6_disableDelayBypass": [
            "IFX_INLINE void IfxCcu6_disableDelayBypass(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_disableInterrupt": [
            "IFX_INLINE void IfxCcu6_disableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)"
        ],
        "IfxCcu6_disableMultiChannelMode": [
            "IFX_INLINE void IfxCcu6_disableMultiChannelMode(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_disableShadowTransfer": [
            "IFX_INLINE void IfxCcu6_disableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13)"
        ],
        "IfxCcu6_disableSingleShotMode": [
            "IFX_INLINE void IfxCcu6_disableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)"
        ],
        "IfxCcu6_disableT13InvertedModulation": [
            "IFX_INLINE void IfxCcu6_disableT13InvertedModulation(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_disableTimer": [
            "IFX_INLINE void IfxCcu6_disableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)"
        ],
        "IfxCcu6_disableTrap": [
            "IFX_INLINE void IfxCcu6_disableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut)"
        ],
        "IfxCcu6_disableTrapPin": [
            "IFX_INLINE void IfxCcu6_disableTrapPin(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_enableAdditionalPrescaler": [
            "IFX_INLINE void IfxCcu6_enableAdditionalPrescaler(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)"
        ],
        "IfxCcu6_enableCountEvent": [
            "IFX_INLINE void IfxCcu6_enableCountEvent(Ifx_CCU6 *ccu6, boolean t12, boolean t13)"
        ],
        "IfxCcu6_enableDeadTime": [
            "IFX_INLINE void IfxCcu6_enableDeadTime(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)"
        ],
        "IfxCcu6_enableDelayBypass": [
            "IFX_INLINE void IfxCcu6_enableDelayBypass(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_enableHallPatternShadowTransfer": [
            "IFX_INLINE void IfxCcu6_enableHallPatternShadowTransfer(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_enableInterrupt": [
            "IFX_INLINE void IfxCcu6_enableInterrupt(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)"
        ],
        "IfxCcu6_enableMultiChannelMode": [
            "IFX_INLINE void IfxCcu6_enableMultiChannelMode(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_enableMultiChannelModeAvailability": [
            "IFX_INLINE void IfxCcu6_enableMultiChannelModeAvailability(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_enableMultiChannelPwmPatternShadowTransfer": [
            "IFX_INLINE void IfxCcu6_enableMultiChannelPwmPatternShadowTransfer(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_enableMultiChannelT12DowncountingShadowTransfer": [
            "IFX_INLINE void IfxCcu6_enableMultiChannelT12DowncountingShadowTransfer(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_enableMultiChannelT12UpcountingShadowTransfer": [
            "IFX_INLINE void IfxCcu6_enableMultiChannelT12UpcountingShadowTransfer(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_enableMultiChannelT13UpcountingShadowTransfer": [
            "IFX_INLINE void IfxCcu6_enableMultiChannelT13UpcountingShadowTransfer(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_enableShadowTransfer": [
            "IFX_INLINE void IfxCcu6_enableShadowTransfer(Ifx_CCU6 *ccu6, boolean t12, boolean t13)"
        ],
        "IfxCcu6_enableSingleShotMode": [
            "IFX_INLINE void IfxCcu6_enableSingleShotMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)"
        ],
        "IfxCcu6_enableT13InvertedModulation": [
            "IFX_INLINE void IfxCcu6_enableT13InvertedModulation(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_enableTimer": [
            "IFX_INLINE void IfxCcu6_enableTimer(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)"
        ],
        "IfxCcu6_enableTrap": [
            "IFX_INLINE void IfxCcu6_enableTrap(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut)"
        ],
        "IfxCcu6_enableTrapPin": [
            "IFX_INLINE void IfxCcu6_enableTrapPin(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_getDeadTimeStatus": [
            "IFX_INLINE boolean IfxCcu6_getDeadTimeStatus(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)"
        ],
        "IfxCcu6_getHallPatternSampleState": [
            "IFX_INLINE boolean IfxCcu6_getHallPatternSampleState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)"
        ],
        "IfxCcu6_getInterruptStatusFlag": [
            "IFX_INLINE boolean IfxCcu6_getInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)"
        ],
        "IfxCcu6_getMultiChannelModeAvailabilityStatus": [
            "IFX_INLINE boolean IfxCcu6_getMultiChannelModeAvailabilityStatus(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_getMultiChannelPWMPatternShadowTransferStatus": [
            "IFX_INLINE boolean IfxCcu6_getMultiChannelPWMPatternShadowTransferStatus(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_getShadowTransferStatus": [
            "IFX_INLINE boolean IfxCcu6_getShadowTransferStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)"
        ],
        "IfxCcu6_getT12CaptureCompareState": [
            "IFX_INLINE boolean IfxCcu6_getT12CaptureCompareState(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel)"
        ],
        "IfxCcu6_getT12CountDirection": [
            "IFX_INLINE IfxCcu6_T12CountDirection IfxCcu6_getT12CountDirection(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_getT12TimerPointer": [
            "IFX_INLINE volatile uint32 *IfxCcu6_getT12TimerPointer(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_getT13CaptureCompareState": [
            "IFX_INLINE boolean IfxCcu6_getT13CaptureCompareState(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_getTimerAvailabilityStatus": [
            "IFX_INLINE boolean IfxCcu6_getTimerAvailabilityStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)"
        ],
        "IfxCcu6_getTimerRunStatus": [
            "IFX_INLINE IfxCcu6_TimerRunStatus IfxCcu6_getTimerRunStatus(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer)"
        ],
        "IfxCcu6_initCc60InPin": [
            "IFX_INLINE void IfxCcu6_initCc60InPin(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode)"
        ],
        "IfxCcu6_initCc60InPinWithPadLevel": [
            "IFX_INLINE void IfxCcu6_initCc60InPinWithPadLevel(const IfxCcu6_Cc60in_In *cc60In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxCcu6_initCc60OutPin": [
            "IFX_INLINE void IfxCcu6_initCc60OutPin(const IfxCcu6_Cc60_Out *cc60Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxCcu6_initCc61InPin": [
            "IFX_INLINE void IfxCcu6_initCc61InPin(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode)"
        ],
        "IfxCcu6_initCc61InPinWithPadLevel": [
            "IFX_INLINE void IfxCcu6_initCc61InPinWithPadLevel(const IfxCcu6_Cc61in_In *cc61In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxCcu6_initCc61OutPin": [
            "IFX_INLINE void IfxCcu6_initCc61OutPin(const IfxCcu6_Cc61_Out *cc61Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxCcu6_initCc62InPin": [
            "IFX_INLINE void IfxCcu6_initCc62InPin(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode)"
        ],
        "IfxCcu6_initCc62InPinWithPadLevel": [
            "IFX_INLINE void IfxCcu6_initCc62InPinWithPadLevel(const IfxCcu6_Cc62in_In *cc62In, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxCcu6_initCc62OutPin": [
            "IFX_INLINE void IfxCcu6_initCc62OutPin(const IfxCcu6_Cc62_Out *cc62Out, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxCcu6_initCcpos0Pin": [
            "IFX_INLINE void IfxCcu6_initCcpos0Pin(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode)"
        ],
        "IfxCcu6_initCcpos0PinWithPadLevel": [
            "IFX_INLINE void IfxCcu6_initCcpos0PinWithPadLevel(const IfxCcu6_Ccpos0_In *ccpos0, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxCcu6_initCcpos1Pin": [
            "IFX_INLINE void IfxCcu6_initCcpos1Pin(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode)"
        ],
        "IfxCcu6_initCcpos1PinWithPadLevel": [
            "IFX_INLINE void IfxCcu6_initCcpos1PinWithPadLevel(const IfxCcu6_Ccpos1_In *ccpos1, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxCcu6_initCcpos2Pin": [
            "IFX_INLINE void IfxCcu6_initCcpos2Pin(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode)"
        ],
        "IfxCcu6_initCcpos2PinWithPadLevel": [
            "IFX_INLINE void IfxCcu6_initCcpos2PinWithPadLevel(const IfxCcu6_Ccpos2_In *ccpos2, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxCcu6_initCout60Pin": [
            "IFX_INLINE void IfxCcu6_initCout60Pin(const IfxCcu6_Cout60_Out *cout60, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxCcu6_initCout61Pin": [
            "IFX_INLINE void IfxCcu6_initCout61Pin(const IfxCcu6_Cout61_Out *cout61, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxCcu6_initCout62Pin": [
            "IFX_INLINE void IfxCcu6_initCout62Pin(const IfxCcu6_Cout62_Out *cout62, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxCcu6_initCout63Pin": [
            "IFX_INLINE void IfxCcu6_initCout63Pin(const IfxCcu6_Cout63_Out *cout63, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxCcu6_initCtrapPin": [
            "IFX_INLINE void IfxCcu6_initCtrapPin(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode)"
        ],
        "IfxCcu6_initCtrapPinWithPadLevel": [
            "IFX_INLINE void IfxCcu6_initCtrapPinWithPadLevel(const IfxCcu6_Ctrap_In *ctrap, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxCcu6_initT12hrPin": [
            "IFX_INLINE void IfxCcu6_initT12hrPin(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode)"
        ],
        "IfxCcu6_initT12hrPinWithPadLevel": [
            "IFX_INLINE void IfxCcu6_initT12hrPinWithPadLevel(const IfxCcu6_T12hr_In *t12hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxCcu6_initT13hrPin": [
            "IFX_INLINE void IfxCcu6_initT13hrPin(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode)"
        ],
        "IfxCcu6_initT13hrPinWithPadLevel": [
            "IFX_INLINE void IfxCcu6_initT13hrPinWithPadLevel(const IfxCcu6_T13hr_In *t13hrIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxCcu6_isModuleEnabled": [
            "IFX_INLINE boolean IfxCcu6_isModuleEnabled(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_isModuleSuspended": [
            "IFX_INLINE boolean IfxCcu6_isModuleSuspended(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_isT12OneNotification": [
            "IFX_INLINE boolean IfxCcu6_isT12OneNotification(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_isT12PeriodNotification": [
            "IFX_INLINE boolean IfxCcu6_isT12PeriodNotification(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_isT13CompareNotification": [
            "IFX_INLINE boolean IfxCcu6_isT13CompareNotification(Ifx_CCU6 *ccu6)"
        ],
        "IfxCcu6_setCaptureCompareInputSignal": [
            "IFX_INLINE void IfxCcu6_setCaptureCompareInputSignal(Ifx_CCU6 *ccu6, IfxCcu6_CaptureCompareInput input, IfxCcu6_CaptureCompareInputSignal signal)"
        ],
        "IfxCcu6_setCountingInputMode": [
            "IFX_INLINE void IfxCcu6_setCountingInputMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_CountingInputMode mode)"
        ],
        "IfxCcu6_setCurrentHallPattern": [
            "IFX_INLINE void IfxCcu6_setCurrentHallPattern(Ifx_CCU6 *ccu6, uint8 pattern)"
        ],
        "IfxCcu6_setDeadTimeValue": [
            "IFX_INLINE void IfxCcu6_setDeadTimeValue(Ifx_CCU6 *ccu6, uint8 value)"
        ],
        "IfxCcu6_setExpectedHallPattern": [
            "IFX_INLINE void IfxCcu6_setExpectedHallPattern(Ifx_CCU6 *ccu6, uint8 pattern)"
        ],
        "IfxCcu6_setExternalRunMode": [
            "IFX_INLINE void IfxCcu6_setExternalRunMode(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_ExternalTriggerMode mode)"
        ],
        "IfxCcu6_setHallSensorTriggerMode": [
            "IFX_INLINE void IfxCcu6_setHallSensorTriggerMode(Ifx_CCU6 *ccu6, IfxCcu6_HallSensorTriggerMode mode)"
        ],
        "IfxCcu6_setInputClockFrequency": [
            "IFX_INLINE void IfxCcu6_setInputClockFrequency(Ifx_CCU6 *ccu6, IfxCcu6_TimerId timer, IfxCcu6_TimerInputClock frequency)"
        ],
        "IfxCcu6_setInterruptStatusFlag": [
            "IFX_INLINE void IfxCcu6_setInterruptStatusFlag(Ifx_CCU6 *ccu6, IfxCcu6_InterruptSource source)"
        ],
        "IfxCcu6_setMultiChannelPwmPattern": [
            "IFX_INLINE void IfxCcu6_setMultiChannelPwmPattern(Ifx_CCU6 *ccu6, uint8 pattern)"
        ],
        "IfxCcu6_setMultiChannelSwitchingMode": [
            "IFX_INLINE void IfxCcu6_setMultiChannelSwitchingMode(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSelect mode)"
        ],
        "IfxCcu6_setMultiChannelSwitchingSync": [
            "IFX_INLINE void IfxCcu6_setMultiChannelSwitchingSync(Ifx_CCU6 *ccu6, IfxCcu6_MultiChannelSwitchingSync sync)"
        ],
        "IfxCcu6_setOutputPassiveState": [
            "IFX_INLINE void IfxCcu6_setOutputPassiveState(Ifx_CCU6 *ccu6, IfxCcu6_ChannelOut channelOut, boolean state)"
        ],
        "IfxCcu6_setSingleShotModeEnable": [
            "IFX_INLINE void IfxCcu6_setSingleShotModeEnable(Ifx_CCU6 *ccu6, boolean t12, boolean t13)"
        ],
        "IfxCcu6_setSleepMode": [
            "IFX_INLINE void IfxCcu6_setSleepMode(Ifx_CCU6 *ccu6, IfxCcu6_SleepMode mode)"
        ],
        "IfxCcu6_setSuspendMode": [
            "IFX_INLINE void IfxCcu6_setSuspendMode(Ifx_CCU6 *ccu6, IfxCcu6_SuspendMode mode)"
        ],
        "IfxCcu6_setT12ChannelMode": [
            "IFX_INLINE void IfxCcu6_setT12ChannelMode(Ifx_CCU6 *ccu6, IfxCcu6_T12Channel channel, IfxCcu6_T12ChannelMode mode)"
        ],
        "IfxCcu6_setT12CountMode": [
            "IFX_INLINE void IfxCcu6_setT12CountMode(Ifx_CCU6 *ccu6, IfxCcu6_T12CountMode mode)"
        ],
        "IfxCcu6_setT12CounterValue": [
            "IFX_INLINE void IfxCcu6_setT12CounterValue(Ifx_CCU6 *ccu6, uint16 value)"
        ],
        "IfxCcu6_setT12PeriodValue": [
            "IFX_INLINE void IfxCcu6_setT12PeriodValue(Ifx_CCU6 *ccu6, uint16 value)"
        ],
        "IfxCcu6_setT13CompareValue": [
            "IFX_INLINE void IfxCcu6_setT13CompareValue(Ifx_CCU6 *ccu6, uint16 value)"
        ],
        "IfxCcu6_setT13CounterValue": [
            "IFX_INLINE void IfxCcu6_setT13CounterValue(Ifx_CCU6 *ccu6, uint16 value)"
        ],
        "IfxCcu6_setT13PeriodValue": [
            "IFX_INLINE void IfxCcu6_setT13PeriodValue(Ifx_CCU6 *ccu6, uint16 value)"
        ],
        "IfxCcu6_setT13TriggerEventDirection": [
            "IFX_INLINE void IfxCcu6_setT13TriggerEventDirection(Ifx_CCU6 *ccu6, IfxCcu6_T13TriggerDirection direction)"
        ],
        "IfxCcu6_setT13TriggerEventMode": [
            "IFX_INLINE void IfxCcu6_setT13TriggerEventMode(Ifx_CCU6 *ccu6, IfxCcu6_T13TriggerEvent mode)"
        ],
        "IfxCcu6_setTrapMode": [
            "IFX_INLINE void IfxCcu6_setTrapMode(Ifx_CCU6 *ccu6, IfxCcu6_TrapMode mode)"
        ],
        "IfxCcu6_setTrapState": [
            "IFX_INLINE void IfxCcu6_setTrapState(Ifx_CCU6 *ccu6, IfxCcu6_TrapState state)"
        ],
        "IfxCcu6_startTimer": [
            "IFX_INLINE void IfxCcu6_startTimer(Ifx_CCU6 *ccu6, boolean t12, boolean t13)"
        ],
        "IfxCcu6_stopTimer": [
            "IFX_INLINE void IfxCcu6_stopTimer(Ifx_CCU6 *ccu6, boolean t12, boolean t13)"
        ],
        "IfxCcu6_updateHallPattern": [
            "IFX_INLINE void IfxCcu6_updateHallPattern(Ifx_CCU6 *ccu6, uint8 currentHall, uint8 expectedHall, uint8 output)"
        ]
    },
    "IfxCcu6_Timer.h": {},
    "IfxCcu6_TimerWithTrigger.h": {},
    "IfxCcu6_TPwm.h": {},
    "IfxConvctrl.h": {
        "IfxConvctrl_clearAlarmFlag": [
            "IFX_INLINE void IfxConvctrl_clearAlarmFlag(Ifx_CONVERTER *convctrl)"
        ],
        "IfxConvctrl_enableConfigurationAccess": [
            "IFX_INLINE void IfxConvctrl_enableConfigurationAccess(Ifx_CONVERTER *convctrl)"
        ],
        "IfxConvctrl_enableModule": [
            "IFX_INLINE void IfxConvctrl_enableModule(Ifx_CONVERTER *convctrl)"
        ],
        "IfxConvctrl_initializeModule": [
            "IFX_INLINE void IfxConvctrl_initializeModule(Ifx_CONVERTER *convctrl, IfxConvctrl_PhaseSynchronizerDivider divisionFactor)"
        ],
        "IfxConvctrl_injectCounterFault": [
            "IFX_INLINE void IfxConvctrl_injectCounterFault(Ifx_CONVERTER *convctrl)"
        ],
        "IfxConvctrl_injectPhaseSyncDividerFault": [
            "IFX_INLINE void IfxConvctrl_injectPhaseSyncDividerFault(Ifx_CONVERTER *convctrl)"
        ],
        "IfxConvctrl_isErrorDetected": [
            "IFX_INLINE boolean IfxConvctrl_isErrorDetected(Ifx_CONVERTER *convctrl)"
        ],
        "IfxConvctrl_isModuleSuspended": [
            "IFX_INLINE boolean IfxConvctrl_isModuleSuspended(Ifx_CONVERTER *convctrl)"
        ],
        "IfxConvctrl_lockConfigurationAccess": [
            "IFX_INLINE void IfxConvctrl_lockConfigurationAccess(Ifx_CONVERTER *convctrl)"
        ],
        "IfxConvctrl_setDividerValue": [
            "IFX_INLINE void IfxConvctrl_setDividerValue(Ifx_CONVERTER *convctrl, IfxConvctrl_PhaseSynchronizerDivider dividerValue)"
        ],
        "IfxConvctrl_setSuspendMode": [
            "IFX_INLINE void IfxConvctrl_setSuspendMode(Ifx_CONVERTER *convctrl, IfxConvctrl_SuspendMode mode)"
        ]
    },
    "IfxCpu_Irq.h": {
        "interruptHandlerInstall": [
            "IFX_INLINE void interruptHandlerInstall(uint32 srpn, uint32 addr)"
        ]
    },
    "IfxCpu.h": {
        "IfxCpu_areInterruptsEnabled": [
            "IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)"
        ],
        "IfxCpu_disableInterrupts": [
            "IFX_INLINE boolean IfxCpu_disableInterrupts(void)"
        ],
        "IfxCpu_enableInterrupts": [
            "IFX_INLINE void IfxCpu_enableInterrupts(void)"
        ],
        "IfxCpu_enableSegmentSpecificDataAccessCacheability": [
            "IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)"
        ],
        "IfxCpu_enableSegmentSpecificInstructionAccessCacheability": [
            "IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)"
        ],
        "IfxCpu_forceDisableInterrupts": [
            "IFX_INLINE void IfxCpu_forceDisableInterrupts(void)"
        ],
        "IfxCpu_getAddress": [
            "IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)"
        ],
        "IfxCpu_getClockCounter": [
            "IFX_INLINE uint32 IfxCpu_getClockCounter(void)"
        ],
        "IfxCpu_getClockCounterStickyOverflow": [
            "IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)"
        ],
        "IfxCpu_getCoreId": [
            "IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)"
        ],
        "IfxCpu_getCoreIndex": [
            "IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)"
        ],
        "IfxCpu_getInstructionCounter": [
            "IFX_INLINE uint32 IfxCpu_getInstructionCounter(void)"
        ],
        "IfxCpu_getInstructionCounterStickyOverflow": [
            "IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void)"
        ],
        "IfxCpu_getPerformanceCounter": [
            "IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address)"
        ],
        "IfxCpu_getPerformanceCounterStickyOverflow": [
            "IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address)"
        ],
        "IfxCpu_initCSA": [
            "IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd)"
        ],
        "IfxCpu_invalidateProgramCache": [
            "IFX_INLINE void IfxCpu_invalidateProgramCache(void)"
        ],
        "IfxCpu_isAddressCachable": [
            "IFX_INLINE boolean IfxCpu_isAddressCachable(void *address)"
        ],
        "IfxCpu_resetAndStartCounters": [
            "IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode)"
        ],
        "IfxCpu_restoreInterrupts": [
            "IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)"
        ],
        "IfxCpu_setDataCache": [
            "IFX_INLINE void IfxCpu_setDataCache(boolean enable)"
        ],
        "IfxCpu_setPerformanceCountersEnableBit": [
            "IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable)"
        ],
        "IfxCpu_setProgramCache": [
            "IFX_INLINE void IfxCpu_setProgramCache(boolean enable)"
        ],
        "IfxCpu_setSafetyTaskIdentifier": [
            "IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId)"
        ],
        "IfxCpu_stopCounters": [
            "IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void)"
        ],
        "IfxCpu_triggerSwReset": [
            "IFX_INLINE void IfxCpu_triggerSwReset(void)"
        ],
        "IfxCpu_updateClockCounter": [
            "IFX_INLINE void IfxCpu_updateClockCounter(uint32 count)"
        ],
        "IfxCpu_updateInstructionCounter": [
            "IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count)"
        ],
        "IfxCpu_updatePerformanceCounter": [
            "IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count)"
        ]
    },
    "IfxCpu_Intrinsics.h": {
        "__cx_to_addr": [
            "IFX_INLINE void *__cx_to_addr(uint32 cx)"
        ],
        "__addr_to_cx": [
            "IFX_INLINE uint32 __addr_to_cx(void *addr)"
        ],
        "__ldmst_c": [
            "IFX_INLINE void __ldmst_c(volatile void *address, unsigned mask, unsigned value)"
        ],
        "__ld32": [
            "IFX_INLINE uint32 __ld32(void *addr)"
        ],
        "__st32": [
            "IFX_INLINE void __st32(void *addr, uint32 value)"
        ],
        "__ld64": [
            "IFX_INLINE uint64 __ld64(void *addr)"
        ],
        "__st64": [
            "IFX_INLINE void __st64(void *addr, uint64 value)"
        ],
        "__ld64_lu": [
            "IFX_INLINE void __ld64_lu(void *addr, uint32 *valueLower, uint32 *valueUpper)"
        ],
        "__st64_lu": [
            "IFX_INLINE void __st64_lu(void *addr, uint32 valueLower, uint32 valueUpper)"
        ]
    },
    "IfxCpu_IntrinsicsDcc.h": {
        "Ifx__non_return_call": [
            "asm volatile void Ifx__non_return_call(void (*fun)(void))"
        ],
        "Ifx__jump_and_link": [
            "asm volatile void Ifx__jump_and_link(void (*fun)(void))"
        ],
        "Ifx__moveToDataParam0": [
            "asm volatile void Ifx__moveToDataParam0(unsigned int var)"
        ],
        "Ifx__moveToDataParamRet": [
            "asm volatile void Ifx__moveToDataParamRet(unsigned int var)"
        ],
        "Ifx__getDataParamRet": [
            "asm volatile unsigned int Ifx__getDataParamRet(void)"
        ],
        "Ifx__moveToAddrParam0": [
            "asm volatile void Ifx__moveToAddrParam0(const void *var)"
        ],
        "Ifx__jumpToFunction": [
            "IFX_INLINE void Ifx__jumpToFunction(const void *fun)"
        ],
        "Ifx__jumpToFunctionWithLink": [
            "IFX_INLINE void Ifx__jumpToFunctionWithLink(const void *fun)"
        ],
        "Ifx__jumpBackToLink": [
            "asm volatile void Ifx__jumpBackToLink(void)"
        ],
        "Ifx__clssf": [
            "asm short Ifx__clssf(sfract a)"
        ],
        "Ifx__float_to_fract": [
            "asm fract Ifx__float_to_fract(float a)"
        ],
        "Ifx__fract_to_float": [
            "asm float Ifx__fract_to_float(fract a)"
        ],
        "Ifx__getfract": [
            "asm fract Ifx__getfract(laccum a)"
        ],
        "Ifx__mac_r_sf": [
            "asm sfract Ifx__mac_r_sf(sfract a, sfract b, sfract c)"
        ],
        "Ifx__mac_sf": [
            "asm sfract Ifx__mac_sf(sfract a, sfract b, sfract c)"
        ],
        "Ifx__mulfractfract": [
            "asm long Ifx__mulfractfract(fract a, fract b)"
        ],
        "Ifx__mulfractlong": [
            "asm long Ifx__mulfractlong(fract a, long b)"
        ],
        "Ifx__round16": [
            "asm sfract Ifx__round16(fract a)"
        ],
        "__float_to_sfract": [
            "IFX_INLINE sfract __float_to_sfract(float a)"
        ],
        "Ifx__s16_to_sfract": [
            "asm sfract Ifx__s16_to_sfract(short a)"
        ],
        "Ifx__sfract_to_s16": [
            "asm short Ifx__sfract_to_s16(sfract a)"
        ],
        "Ifx__sfract_to_u16": [
            "asm volatile uint16 Ifx__sfract_to_u16(sfract a)"
        ],
        "Ifx__shaaccum": [
            "asm laccum Ifx__shaaccum(laccum a, sint32 b)"
        ],
        "Ifx__shafracts": [
            "asm fract Ifx__shafracts(fract a, sint32 b)"
        ],
        "Ifx__shasfracts": [
            "asm sfract Ifx__shasfracts(sfract a, sint32 b)"
        ],
        "Ifx__u16_to_sfract": [
            "asm sfract Ifx__u16_to_sfract(uint16 a)"
        ],
        "Ifx__imaskldmst": [
            "asm volatile void Ifx__imaskldmst(void* a, sint32 b, sint32 p, const sint32 w)"
        ],
        "Ifx__cacheawi_bo_post_inc": [
            "asm volatile uint8* Ifx__cacheawi_bo_post_inc(uint8* p)"
        ],
        "Ifx__cacheiwi": [
            "asm volatile void Ifx__cacheiwi(uint8* p)"
        ],
        "__initcirc": [
            "asm circ_t __initcirc(void* buf, uint16 bufsize, uint16 byteindex)"
        ],
        "Ifx__mulsc": [
            "asm volatile sint32 Ifx__mulsc(sint32 a, sint32 b, sint32 offset)"
        ],
        "Ifx__rol": [
            "asm volatile uint32 Ifx__rol(uint32 operand, uint32 count)"
        ],
        "Ifx__ror": [
            "asm volatile uint32 Ifx__ror(uint32 operand, uint32 count)"
        ],
        "Ifx__absb": [
            "asm __packb Ifx__absb(__packb a)"
        ],
        "Ifx__absh": [
            "asm __packhw Ifx__absh(__packhw a)"
        ],
        "Ifx__abssh": [
            "asm __packhw Ifx__abssh(__packhw a)"
        ],
        "Ifx__extractbyte1": [
            "asm sint8 Ifx__extractbyte1(__packb a)"
        ],
        "Ifx__extractbyte2": [
            "asm sint8 Ifx__extractbyte2(__packb a)"
        ],
        "Ifx__extractbyte3": [
            "asm sint8 Ifx__extractbyte3(__packb a)"
        ],
        "Ifx__extractbyte4": [
            "asm sint8 Ifx__extractbyte4(__packb a)"
        ],
        "Ifx__extracthw1": [
            "asm short Ifx__extracthw1(__packhw a)"
        ],
        "Ifx__extracthw2": [
            "asm short Ifx__extracthw2(__packhw a)"
        ],
        "Ifx__extractubyte1": [
            "asm volatile uint8 Ifx__extractubyte1(__upackb a)"
        ],
        "Ifx__extractubyte2": [
            "asm volatile uint8 Ifx__extractubyte2(__upackb a)"
        ],
        "Ifx__extractubyte3": [
            "asm volatile uint8 Ifx__extractubyte3(__upackb a)"
        ],
        "Ifx__extractubyte4": [
            "asm volatile uint8 Ifx__extractubyte4(__upackb a)"
        ],
        "Ifx__extractuhw1": [
            "asm volatile uint16 Ifx__extractuhw1(__upackhw a)"
        ],
        "Ifx__extractuhw2": [
            "asm volatile uint16 Ifx__extractuhw2(__upackhw a)"
        ],
        "Ifx__getbyte1": [
            "asm sint8 Ifx__getbyte1(__packb* a)"
        ],
        "Ifx__getbyte2": [
            "asm sint8 Ifx__getbyte2(__packb* a)"
        ],
        "Ifx__getbyte3": [
            "asm sint8 Ifx__getbyte3(__packb* a)"
        ],
        "Ifx__getbyte4": [
            "asm sint8 Ifx__getbyte4(__packb* a)"
        ],
        "Ifx__gethw1": [
            "asm short Ifx__gethw1(__packhw* a)"
        ],
        "Ifx__gethw2": [
            "asm short Ifx__gethw2(__packhw* a)"
        ],
        "Ifx__getubyte1": [
            "asm volatile uint8 Ifx__getubyte1(__upackb* a)"
        ],
        "Ifx__getubyte2": [
            "asm volatile uint8 Ifx__getubyte2(__upackb* a)"
        ],
        "Ifx__getubyte3": [
            "asm volatile uint8 Ifx__getubyte3(__upackb* a)"
        ],
        "Ifx__getubyte4": [
            "asm volatile uint8 Ifx__getubyte4(__upackb* a)"
        ],
        "Ifx__getuhw1": [
            "asm volatile uint16 Ifx__getuhw1(__upackhw* a)"
        ],
        "Ifx__getuhw2": [
            "asm volatile uint16 Ifx__getuhw2(__upackhw* a)"
        ],
        "Ifx__initpackb": [
            "asm __packb Ifx__initpackb(sint32 a, sint32 b, sint32 c, sint32 d)"
        ],
        "Ifx__initpackbl": [
            "asm __packb Ifx__initpackbl(long a)"
        ],
        "Ifx__initpackhw": [
            "asm __packhw Ifx__initpackhw(short a, short b)"
        ],
        "Ifx__initpackhwl": [
            "asm __packhw Ifx__initpackhwl(long a)"
        ],
        "Ifx__initupackb": [
            "asm __upackb    Ifx__initupackb( uint32 a, uint32 b, uint32 c, uint32 d)"
        ],
        "Ifx__initupackhw": [
            "asm __upackhw    Ifx__initupackhw( uint16 a, uint16 b)"
        ],
        "Ifx__insertbyte1": [
            "asm __packb Ifx__insertbyte1(__packb a, sint8 b)"
        ],
        "Ifx__insertbyte2": [
            "asm __packb Ifx__insertbyte2(__packb a, sint8 b)"
        ],
        "Ifx__insertbyte3": [
            "asm __packb Ifx__insertbyte3(__packb a, sint8 b)"
        ],
        "Ifx__insertbyte4": [
            "asm __packb Ifx__insertbyte4(__packb a, sint8 b)"
        ],
        "Ifx__inserthw1": [
            "asm __packhw Ifx__inserthw1(__packhw a, short b)"
        ],
        "Ifx__inserthw2": [
            "asm __packhw Ifx__inserthw2(__packhw a, short b)"
        ],
        "Ifx__insertubyte1": [
            "asm __upackb    Ifx__insertubyte1( __upackb a, uint8 b)"
        ],
        "Ifx__insertubyte2": [
            "asm __upackb    Ifx__insertubyte2( __upackb a, uint8 b)"
        ],
        "Ifx__insertubyte3": [
            "asm __upackb     Ifx__insertubyte3( __upackb a, uint8 b)"
        ],
        "Ifx__insertubyte4": [
            "asm __upackb     Ifx__insertubyte4( __upackb a, uint8 b)"
        ],
        "Ifx__insertuhw1": [
            "asm __upackhw    Ifx__insertuhw1( __upackhw a, uint16 b)"
        ],
        "Ifx__insertuhw2": [
            "asm __upackhw    Ifx__insertuhw2( __upackhw a, uint16 b)"
        ],
        "Ifx__minb": [
            "asm __packb Ifx__minb(__packb a, __packb b)"
        ],
        "Ifx__minbu": [
            "asm __upackb     Ifx__minbu( __upackb  a, __upackb  b)"
        ],
        "Ifx__minh": [
            "asm __packhw Ifx__minh(__packhw a, __packhw b)"
        ],
        "Ifx__minhu": [
            "asm __upackhw    Ifx__minhu( __upackhw a, __upackhw b)"
        ],
        "Ifx__setbyte1": [
            "asm volatile void Ifx__setbyte1(__packb* a, sint8 b)"
        ],
        "Ifx__setbyte2": [
            "asm volatile void Ifx__setbyte2(__packb* a, sint8 b)"
        ],
        "Ifx__setbyte3": [
            "asm volatile void Ifx__setbyte3(__packb* a, sint8 b)"
        ],
        "Ifx__setbyte4": [
            "asm volatile void Ifx__setbyte4(__packb* a, sint8 b)"
        ],
        "Ifx__sethw1": [
            "asm volatile void Ifx__sethw1(__packhw* a, short b)"
        ],
        "Ifx__sethw2": [
            "asm volatile void Ifx__sethw2(__packhw* a, short b)"
        ],
        "Ifx__setubyte1": [
            "asm volatile void Ifx__setubyte1(__upackb* a, uint8 b)"
        ],
        "Ifx__setubyte2": [
            "asm volatile void Ifx__setubyte2(__upackb* a, uint8 b)"
        ],
        "Ifx__setubyte3": [
            "asm volatile void Ifx__setubyte3(__upackb* a, uint8 b)"
        ],
        "Ifx__setubyte4": [
            "asm volatile void Ifx__setubyte4(__upackb* a, uint8 b)"
        ],
        "Ifx__setuhw1": [
            "asm volatile void Ifx__setuhw1(__upackhw* a, uint16 b)"
        ],
        "Ifx__setuhw2": [
            "asm volatile void Ifx__setuhw2(__upackhw* a, uint16 b)"
        ],
        "Ifx__fabs": [
            "asm double Ifx__fabs(double d)"
        ],
        "Ifx__fabsf": [
            "asm float Ifx__fabsf(float f)"
        ],
        "Ifx__parity": [
            "asm volatile sint32 Ifx__parity(sint32 a)"
        ],
        "Ifx__satb": [
            "asm sint8 Ifx__satb(sint32 a)"
        ],
        "Ifx__satbu": [
            "asm volatile uint8 Ifx__satbu(sint32 a)"
        ],
        "Ifx__sath": [
            "asm short Ifx__sath(sint32 a)"
        ],
        "Ifx__sathu": [
            "asm volatile uint16 Ifx__sathu(sint32 a)"
        ],
        "Ifx__addsu": [
            "asm volatile uint32 Ifx__addsu(uint32 a, uint32 b)"
        ],
        "Ifx__subs": [
            "asm volatile sint32 Ifx__subs(sint32 a, sint32 b)"
        ],
        "Ifx__subsu": [
            "asm volatile uint32 Ifx__subsu(uint32 a, uint32 b)"
        ],
        "Ifx__ldmst": [
            "asm volatile void Ifx__ldmst(volatile void *address, uint32 mask, uint32 value)"
        ],
        "Ifx__nops": [
            "asm volatile void Ifx__nops(uint32 cnt)"
        ],
        "Ifx__nops1000": [
            "asm volatile void Ifx__nops1000(uint32 x)"
        ],
        "Ifx__swap": [
            "asm volatile uint32 Ifx__swap(void* place, uint32 value)"
        ],
        "Ifx__cmpAndSwap": [
            "asm volatile unsigned int Ifx__cmpAndSwap(unsigned int *address, unsigned long value, unsigned long CmpVal)"
        ],
        "Ifx__stopPerfCounters": [
            "asm volatile void Ifx__stopPerfCounters(void)"
        ],
        "Ifx__fixpoint_to_float32": [
            "asm float Ifx__fixpoint_to_float32(fract value, sint32 shift)"
        ],
        "Ifx__getA11": [
            "asm volatile void* Ifx__getA11(void)"
        ],
        "Ifx__setStackPointer": [
            "asm void Ifx__setStackPointer(void *stackAddr)"
        ],
        "Ifx__crc32": [
            "asm volatile unsigned int Ifx__crc32(uint32 b,uint32 a)"
        ],
        "IfxCpu_calculateCrc32": [
            "IFX_INLINE unsigned int IfxCpu_calculateCrc32(uint32 *startaddress, uint8 length)"
        ],
        "IfxCpu_getRandomVal": [
            "asm volatile uint32 IfxCpu_getRandomVal(uint32 a, uint32 x, uint32 m)"
        ]
    },
    "IfxCpu_IntrinsicsGhs.h": {
        "Ifx__jump_and_link": [
            "IFX_INLINE void Ifx__jump_and_link(void (*fun)(void))"
        ],
        "Ifx__moveToDataParam0": [
            "IFX_INLINE void Ifx__moveToDataParam0(unsigned int var)"
        ],
        "Ifx__moveToDataParamRet": [
            "IFX_INLINE void Ifx__moveToDataParamRet(unsigned int var)"
        ],
        "Ifx__getDataParamRet": [
            "IFX_INLINE unsigned int Ifx__getDataParamRet(void)"
        ],
        "Ifx__moveToAddrParam0": [
            "IFX_INLINE void Ifx__moveToAddrParam0(const void *var)"
        ],
        "Ifx__jumpToFunction": [
            "IFX_INLINE void Ifx__jumpToFunction(void (*fun)(void))"
        ],
        "Ifx__jumpToFunctionWithLink": [
            "IFX_INLINE void Ifx__jumpToFunctionWithLink(void (*fun)(void))"
        ],
        "Ifx__jumpBackToLink": [
            "IFX_INLINE void Ifx__jumpBackToLink(void)"
        ],
        "Ifx__clssf": [
            "IFX_INLINE sint16 Ifx__clssf(sfract a)"
        ],
        "Ifx__fract_to_float": [
            "IFX_INLINE float Ifx__fract_to_float(fract a)"
        ],
        "Ifx__float_to_fract": [
            "IFX_INLINE fract Ifx__float_to_fract(float a)"
        ],
        "Ifx__getfract": [
            "IFX_INLINE fract Ifx__getfract(laccum a)"
        ],
        "Ifx__mac_r_sf": [
            "IFX_INLINE sfract Ifx__mac_r_sf(sfract a, sfract b, sfract c)"
        ],
        "Ifx__mac_sf": [
            "IFX_INLINE sfract Ifx__mac_sf(sfract a, sfract b, sfract c)"
        ],
        "Ifx__mulfractfract": [
            "IFX_INLINE long Ifx__mulfractfract(fract a, fract b)"
        ],
        "Ifx__mulfractlong": [
            "IFX_INLINE long Ifx__mulfractlong(fract a, long b)"
        ],
        "Ifx__round16": [
            "IFX_INLINE sfract Ifx__round16(fract a)"
        ],
        "Ifx__float_to_sfract": [
            "IFX_INLINE sfract Ifx__float_to_sfract(float a)"
        ],
        "Ifx__s16_to_sfract": [
            "IFX_INLINE sfract Ifx__s16_to_sfract(sint16 a)"
        ],
        "Ifx__sfract_to_s16": [
            "IFX_INLINE sint16 Ifx__sfract_to_s16(sfract a)"
        ],
        "Ifx__sfract_to_u16": [
            "IFX_INLINE uint16 Ifx__sfract_to_u16(sfract a)"
        ],
        "Ifx__shaaccum": [
            "__asm__ laccum Ifx__shaaccum(laccum a, sint32 b)"
        ],
        "Ifx__shafracts": [
            "IFX_INLINE fract Ifx__shafracts(fract a, sint32 b)"
        ],
        "Ifx__shasfracts": [
            "IFX_INLINE sfract Ifx__shasfracts(sfract a, sint32 b)"
        ],
        "Ifx__u16_to_sfract": [
            "IFX_INLINE sfract Ifx__u16_to_sfract(uint16 a)"
        ],
        "Ifx__extr": [
            "IFX_INLINE sint32 Ifx__extr(sint32 a, uint32 p, uint32 w)"
        ],
        "Ifx__extru": [
            "IFX_INLINE uint32 Ifx__extru(uint32 a, uint32 p, uint32 w)"
        ],
        "Ifx__insert": [
            "IFX_INLINE sint32 Ifx__insert(sint32 a, sint32 b, sint32 p, const sint32 w)"
        ],
        "Ifx__cacheawi": [
            "IFX_INLINE void Ifx__cacheawi(uint8* p)"
        ],
        "Ifx__cacheiwi": [
            "IFX_INLINE void Ifx__cacheiwi(uint8* p)"
        ],
        "Ifx__cacheawi_bo_post_inc": [
            "IFX_INLINE uint8* Ifx__cacheawi_bo_post_inc(uint8* p)"
        ],
        "Ifx__mulsc": [
            "IFX_INLINE sint32 Ifx__mulsc(sint32 a, sint32 b, sint32 offset)"
        ],
        "Ifx__rol": [
            "IFX_INLINE uint32 Ifx__rol(uint32 operand, uint32 count)"
        ],
        "Ifx__ror": [
            "IFX_INLINE uint32 Ifx__ror(uint32 operand, uint32 count)"
        ],
        "Ifx__extractbyte1": [
            "IFX_INLINE sint8 Ifx__extractbyte1(__packb a)"
        ],
        "Ifx__extractbyte2": [
            "IFX_INLINE sint8 Ifx__extractbyte2(__packb a)"
        ],
        "Ifx__extractbyte3": [
            "IFX_INLINE sint8 Ifx__extractbyte3(__packb a)"
        ],
        "Ifx__extractbyte4": [
            "IFX_INLINE sint8 Ifx__extractbyte4(__packb a)"
        ],
        "Ifx__extracthw1": [
            "IFX_INLINE sint16 Ifx__extracthw1(__packhw a)"
        ],
        "Ifx__extracthw2": [
            "IFX_INLINE sint16 Ifx__extracthw2(__packhw a)"
        ],
        "Ifx__extractubyte1": [
            "IFX_INLINE uint8 Ifx__extractubyte1(__upackb a)"
        ],
        "Ifx__extractubyte2": [
            "IFX_INLINE uint8 Ifx__extractubyte2(__upackb a)"
        ],
        "Ifx__extractubyte3": [
            "IFX_INLINE uint8 Ifx__extractubyte3(__upackb a)"
        ],
        "Ifx__extractubyte4": [
            "IFX_INLINE uint8 Ifx__extractubyte4(__upackb a)"
        ],
        "Ifx__extractuhw1": [
            "IFX_INLINE uint16 Ifx__extractuhw1(__upackhw a)"
        ],
        "Ifx__extractuhw2": [
            "IFX_INLINE uint16 Ifx__extractuhw2(__upackhw a)"
        ],
        "Ifx__getbyte1": [
            "IFX_INLINE sint8 Ifx__getbyte1(__packb* a)"
        ],
        "Ifx__getbyte2": [
            "IFX_INLINE sint8 Ifx__getbyte2(__packb* a)"
        ],
        "Ifx__getbyte3": [
            "IFX_INLINE sint8 Ifx__getbyte3(__packb* a)"
        ],
        "Ifx__getbyte4": [
            "IFX_INLINE sint8 Ifx__getbyte4(__packb* a)"
        ],
        "Ifx__gethw1": [
            "IFX_INLINE sint16 Ifx__gethw1(__packhw* a)"
        ],
        "Ifx__gethw2": [
            "IFX_INLINE sint16 Ifx__gethw2(__packhw* a)"
        ],
        "Ifx__getubyte1": [
            "IFX_INLINE uint8 Ifx__getubyte1(__upackb* a)"
        ],
        "Ifx__getubyte2": [
            "IFX_INLINE uint8 Ifx__getubyte2(__upackb* a)"
        ],
        "Ifx__getubyte3": [
            "IFX_INLINE uint8 Ifx__getubyte3(__upackb* a)"
        ],
        "Ifx__getubyte4": [
            "IFX_INLINE uint8 Ifx__getubyte4(__upackb* a)"
        ],
        "Ifx__getuhw1": [
            "IFX_INLINE uint16 Ifx__getuhw1(__upackhw* a)"
        ],
        "Ifx__getuhw2": [
            "IFX_INLINE uint16 Ifx__getuhw2(__upackhw* a)"
        ],
        "Ifx__initpackb": [
            "IFX_INLINE __packb Ifx__initpackb(sint32 a, sint32 b, sint32 c, sint32 d)"
        ],
        "Ifx__initpackbl": [
            "IFX_INLINE __packb Ifx__initpackbl(long a)"
        ],
        "Ifx__initpackhw": [
            "IFX_INLINE __packhw Ifx__initpackhw(sint16 a, sint16 b)"
        ],
        "Ifx__initpackhwl": [
            "IFX_INLINE __packhw Ifx__initpackhwl(long a)"
        ],
        "Ifx__initupackb": [
            "IFX_INLINE __upackb    Ifx__initupackb( uint32 a, uint32 b, uint32 c, uint32 d)"
        ],
        "Ifx__initupackhw": [
            "IFX_INLINE __upackhw    Ifx__initupackhw( uint16 a, uint16 b)"
        ],
        "Ifx__insertbyte1": [
            "IFX_INLINE __packb Ifx__insertbyte1(__packb a, sint8 b)"
        ],
        "Ifx__insertbyte2": [
            "IFX_INLINE __packb Ifx__insertbyte2(__packb a, sint8 b)"
        ],
        "Ifx__insertbyte3": [
            "IFX_INLINE __packb Ifx__insertbyte3(__packb a, sint8 b)"
        ],
        "Ifx__insertbyte4": [
            "IFX_INLINE __packb Ifx__insertbyte4(__packb a, sint8 b)"
        ],
        "Ifx__insertubyte1": [
            "IFX_INLINE __upackb    Ifx__insertubyte1( __upackb a, uint8 b)"
        ],
        "Ifx__insertubyte2": [
            "IFX_INLINE __upackb    Ifx__insertubyte2( __upackb a, uint8 b)"
        ],
        "Ifx__insertubyte3": [
            "IFX_INLINE __upackb     Ifx__insertubyte3( __upackb a, uint8 b)"
        ],
        "Ifx__insertubyte4": [
            "IFX_INLINE __upackb     Ifx__insertubyte4( __upackb a, uint8 b)"
        ],
        "Ifx__inserthw1": [
            "IFX_INLINE __packhw Ifx__inserthw1(__packhw a, sint16 b)"
        ],
        "Ifx__inserthw2": [
            "IFX_INLINE __packhw Ifx__inserthw2(__packhw a, sint16 b)"
        ],
        "Ifx__insertuhw1": [
            "IFX_INLINE __upackhw    Ifx__insertuhw1( __upackhw a, uint16 b)"
        ],
        "Ifx__insertuhw2": [
            "IFX_INLINE __upackhw    Ifx__insertuhw2( __upackhw a, uint16 b)"
        ],
        "Ifx__setbyte1": [
            "IFX_INLINE void Ifx__setbyte1(__packb* a, sint8 b)"
        ],
        "Ifx__setbyte2": [
            "IFX_INLINE void Ifx__setbyte2(__packb* a, sint8 b)"
        ],
        "Ifx__setbyte3": [
            "IFX_INLINE void Ifx__setbyte3(__packb* a, sint8 b)"
        ],
        "Ifx__setbyte4": [
            "IFX_INLINE void Ifx__setbyte4(__packb* a, sint8 b)"
        ],
        "Ifx__sethw1": [
            "IFX_INLINE void Ifx__sethw1(__packhw* a, sint16 b)"
        ],
        "Ifx__sethw2": [
            "IFX_INLINE void Ifx__sethw2(__packhw* a, sint16 b)"
        ],
        "Ifx__setubyte1": [
            "IFX_INLINE void Ifx__setubyte1(__upackb* a, uint8 b)"
        ],
        "Ifx__setubyte2": [
            "IFX_INLINE void Ifx__setubyte2(__upackb* a, uint8 b)"
        ],
        "Ifx__setubyte3": [
            "IFX_INLINE void Ifx__setubyte3(__upackb* a, uint8 b)"
        ],
        "Ifx__setubyte4": [
            "IFX_INLINE void Ifx__setubyte4(__upackb* a, uint8 b)"
        ],
        "Ifx__setuhw1": [
            "IFX_INLINE void Ifx__setuhw1(__upackhw* a, uint16 b)"
        ],
        "Ifx__setuhw2": [
            "IFX_INLINE void Ifx__setuhw2(__upackhw* a, uint16 b)"
        ],
        "Ifx__ldmst": [
            "IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)"
        ],
        "Ifx__nops": [
            "IFX_INLINE void Ifx__nops(void* cnt)"
        ],
        "Ifx__swap": [
            "IFX_INLINE uint32 Ifx__swap(void* place, uint32 value)"
        ],
        "Ifx__stopPerfCounters": [
            "IFX_INLINE void Ifx__stopPerfCounters(void)"
        ],
        "Ifx__cmpAndSwap": [
            "IFX_INLINE unsigned int Ifx__cmpAndSwap (unsigned int volatile *address,unsigned int value, unsigned int condition)"
        ],
        "Ifx__fixpoint_to_float32": [
            "IFX_INLINE float32 Ifx__fixpoint_to_float32(fract value, sint32 shift)"
        ],
        "Ifx__getA11": [
            "IFX_INLINE void* Ifx__getA11(void)"
        ],
        "Ifx__setStackPointer": [
            "IFX_INLINE void Ifx__setStackPointer(void *stackAddr)"
        ],
        "IfxCpu_calculateCrc32": [
            "IFX_INLINE uint32 IfxCpu_calculateCrc32(uint32 *startaddress, uint8 length)"
        ],
        "IfxCpu_getRandomVal": [
            "IFX_INLINE uint32 IfxCpu_getRandomVal(uint32 a, uint32 x, uint32 m)"
        ],
        "Ifx__cacheai": [
            "IFX_INLINE void Ifx__cacheai(uint8* p)"
        ]
    },
    "IfxCpu_IntrinsicsGnuc.h": {
        "Ifx__jump_and_link": [
            "IFX_INLINE void Ifx__jump_and_link(void (*fun)(void))"
        ],
        "Ifx__moveToDataParam0": [
            "IFX_INLINE void Ifx__moveToDataParam0(unsigned int var)"
        ],
        "Ifx__moveToDataParamRet": [
            "IFX_INLINE void Ifx__moveToDataParamRet(unsigned int var)"
        ],
        "Ifx__getDataParamRet": [
            "IFX_INLINE unsigned int Ifx__getDataParamRet(void)"
        ],
        "Ifx__moveToAddrParam0": [
            "IFX_INLINE void Ifx__moveToAddrParam0(const void *var)"
        ],
        "Ifx__jumpToFunction": [
            "IFX_INLINE void Ifx__jumpToFunction(const void *fun)"
        ],
        "Ifx__jumpToFunctionWithLink": [
            "IFX_INLINE void Ifx__jumpToFunctionWithLink(const void *fun)"
        ],
        "Ifx__jumpBackToLink": [
            "IFX_INLINE void Ifx__jumpBackToLink(void)"
        ],
        "Ifx__max": [
            "IFX_INLINE sint32 Ifx__max(sint32 a, sint32 b)"
        ],
        "Ifx__maxs": [
            "IFX_INLINE sint32 Ifx__maxs(sint16 a, sint16 b)"
        ],
        "Ifx__maxu": [
            "IFX_INLINE uint32 Ifx__maxu(uint32 a, uint32 b)"
        ],
        "Ifx__min": [
            "IFX_INLINE sint32 Ifx__min(sint32 a, sint32 b)"
        ],
        "Ifx__mins": [
            "IFX_INLINE sint16 Ifx__mins(sint16 a, sint16 b)"
        ],
        "Ifx__minu": [
            "IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)"
        ],
        "Ifx__clssf": [
            "IFX_INLINE sint16 Ifx__clssf(sfract a)"
        ],
        "Ifx__fract_to_float": [
            "IFX_INLINE float Ifx__fract_to_float(fract a)"
        ],
        "Ifx__float_to_fract": [
            "IFX_INLINE fract Ifx__float_to_fract(float a)"
        ],
        "Ifx__fract_to_sfract": [
            "IFX_INLINE sfract Ifx__fract_to_sfract(fract a)"
        ],
        "Ifx__float_to_sfract": [
            "IFX_INLINE sfract Ifx__float_to_sfract(float a)"
        ],
        "Ifx__getfract": [
            "IFX_INLINE fract Ifx__getfract(laccum a)"
        ],
        "Ifx__mac_r_sf": [
            "IFX_INLINE sfract Ifx__mac_r_sf(sfract a, sfract b, sfract c)"
        ],
        "Ifx__mac_sf": [
            "IFX_INLINE sfract Ifx__mac_sf(sfract a, sfract b, sfract c)"
        ],
        "Ifx__mulfractfract": [
            "IFX_INLINE long Ifx__mulfractfract(fract a, fract b)"
        ],
        "Ifx__mulfractlong": [
            "IFX_INLINE long Ifx__mulfractlong(fract a, long b)"
        ],
        "Ifx__round16": [
            "IFX_INLINE sfract Ifx__round16(fract a)"
        ],
        "Ifx__s16_to_sfract": [
            "IFX_INLINE sfract Ifx__s16_to_sfract(sint16 a)"
        ],
        "Ifx__sfract_to_s16": [
            "IFX_INLINE sint16 Ifx__sfract_to_s16(sfract a)"
        ],
        "Ifx__sfract_to_u16": [
            "IFX_INLINE uint16 Ifx__sfract_to_u16(sfract a)"
        ],
        "Ifx__shaaccum": [
            "IFX_INLINE laccum Ifx__shaaccum(laccum a, sint32 b)"
        ],
        "Ifx__shafracts": [
            "IFX_INLINE fract Ifx__shafracts(fract a, sint32 b)"
        ],
        "Ifx__shasfracts": [
            "IFX_INLINE sfract Ifx__shasfracts(sfract a, sint32 b)"
        ],
        "Ifx__u16_to_sfract": [
            "IFX_INLINE sfract Ifx__u16_to_sfract(uint16 a)"
        ],
        "Ifx__extr": [
            "IFX_INLINE sint32 Ifx__extr(sint32 a, uint32 p, uint32 w)"
        ],
        "Ifx__extru": [
            "IFX_INLINE uint32 Ifx__extru(uint32 a, uint32 p, uint32 w)"
        ],
        "Ifx__ins": [
            "IFX_INLINE sint32 Ifx__ins(sint32 trg, const sint32 trgbit, sint32 src, const sint32 srcbit)"
        ],
        "Ifx__insert": [
            "IFX_INLINE sint32 Ifx__insert(sint32 a, sint32 b, sint32 p, const sint32 w)"
        ],
        "Ifx__insn": [
            "IFX_INLINE sint32 Ifx__insn(sint32 trg, const sint32 trgbit, sint32 src, const sint32 srcbit)"
        ],
        "Ifx__disable_and_save": [
            "IFX_INLINE sint32 Ifx__disable_and_save(void)"
        ],
        "Ifx__restore": [
            "IFX_INLINE void Ifx__restore(sint32 ie)"
        ],
        "Ifx__cacheawi": [
            "IFX_INLINE void Ifx__cacheawi(uint8* p)"
        ],
        "Ifx__cacheiwi": [
            "IFX_INLINE void Ifx__cacheiwi(uint8* p)"
        ],
        "Ifx__cacheawi_bo_post_inc": [
            "IFX_INLINE uint8* Ifx__cacheawi_bo_post_inc(uint8* p)"
        ],
        "Ifx__mulsc": [
            "IFX_INLINE sint32 Ifx__mulsc(sint32 a, sint32 b, sint32 offset)"
        ],
        "Ifx__rol": [
            "IFX_INLINE uint32 Ifx__rol(uint32 operand, uint32 count)"
        ],
        "Ifx__ror": [
            "IFX_INLINE uint32 Ifx__ror(uint32 operand, uint32 count)"
        ],
        "Ifx__absb": [
            "IFX_INLINE __packb Ifx__absb(__packb a)"
        ],
        "Ifx__absh": [
            "IFX_INLINE __packhw Ifx__absh(__packhw a)"
        ],
        "Ifx__abssh": [
            "IFX_INLINE __packhw Ifx__abssh(__packhw a)"
        ],
        "Ifx__extractbyte1": [
            "IFX_INLINE sint8 Ifx__extractbyte1(__packb a)"
        ],
        "Ifx__extractbyte2": [
            "IFX_INLINE sint8 Ifx__extractbyte2(__packb a)"
        ],
        "Ifx__extractbyte3": [
            "IFX_INLINE sint8 Ifx__extractbyte3(__packb a)"
        ],
        "Ifx__extractbyte4": [
            "IFX_INLINE sint8 Ifx__extractbyte4(__packb a)"
        ],
        "Ifx__extracthw1": [
            "IFX_INLINE sint16 Ifx__extracthw1(__packhw a)"
        ],
        "Ifx__extracthw2": [
            "IFX_INLINE sint16 Ifx__extracthw2(__packhw a)"
        ],
        "Ifx__extractubyte1": [
            "IFX_INLINE uint8 Ifx__extractubyte1(__upackb a)"
        ],
        "Ifx__extractubyte2": [
            "IFX_INLINE uint8 Ifx__extractubyte2(__upackb a)"
        ],
        "Ifx__extractubyte3": [
            "IFX_INLINE uint8 Ifx__extractubyte3(__upackb a)"
        ],
        "Ifx__extractubyte4": [
            "IFX_INLINE uint8 Ifx__extractubyte4(__upackb a)"
        ],
        "Ifx__extractuhw1": [
            "IFX_INLINE uint16 Ifx__extractuhw1(__upackhw a)"
        ],
        "Ifx__extractuhw2": [
            "IFX_INLINE uint16 Ifx__extractuhw2(__upackhw a)"
        ],
        "Ifx__getbyte1": [
            "IFX_INLINE sint8 Ifx__getbyte1(__packb* a)"
        ],
        "Ifx__getbyte2": [
            "IFX_INLINE sint8 Ifx__getbyte2(__packb* a)"
        ],
        "Ifx__getbyte3": [
            "IFX_INLINE sint8 Ifx__getbyte3(__packb* a)"
        ],
        "Ifx__getbyte4": [
            "IFX_INLINE sint8 Ifx__getbyte4(__packb* a)"
        ],
        "Ifx__gethw1": [
            "IFX_INLINE sint16 Ifx__gethw1(__packhw* a)"
        ],
        "Ifx__gethw2": [
            "IFX_INLINE sint16 Ifx__gethw2(__packhw* a)"
        ],
        "Ifx__getubyte1": [
            "IFX_INLINE uint8 Ifx__getubyte1(__upackb* a)"
        ],
        "Ifx__getubyte2": [
            "IFX_INLINE uint8 Ifx__getubyte2(__upackb* a)"
        ],
        "Ifx__getubyte3": [
            "IFX_INLINE uint8 Ifx__getubyte3(__upackb* a)"
        ],
        "Ifx__getubyte4": [
            "IFX_INLINE uint8 Ifx__getubyte4(__upackb* a)"
        ],
        "Ifx__getuhw1": [
            "IFX_INLINE uint16 Ifx__getuhw1(__upackhw* a)"
        ],
        "Ifx__getuhw2": [
            "IFX_INLINE uint16 Ifx__getuhw2(__upackhw* a)"
        ],
        "Ifx__initpackb": [
            "IFX_INLINE __packb Ifx__initpackb(sint32 a, sint32 b, sint32 c, sint32 d)"
        ],
        "Ifx__initpackbl": [
            "IFX_INLINE __packb Ifx__initpackbl(long a)"
        ],
        "Ifx__initpackhw": [
            "IFX_INLINE __packhw Ifx__initpackhw(sint16 a, sint16 b)"
        ],
        "Ifx__initpackhwl": [
            "IFX_INLINE __packhw Ifx__initpackhwl(long a)"
        ],
        "Ifx__initupackb": [
            "IFX_INLINE __upackb    Ifx__initupackb( uint32 a, uint32 b, uint32 c, uint32 d)"
        ],
        "Ifx__initupackhw": [
            "IFX_INLINE __upackhw    Ifx__initupackhw( uint16 a, uint16 b)"
        ],
        "Ifx__insertbyte1": [
            "IFX_INLINE __packb Ifx__insertbyte1(__packb a, sint8 b)"
        ],
        "Ifx__insertbyte2": [
            "IFX_INLINE __packb Ifx__insertbyte2(__packb a, sint8 b)"
        ],
        "Ifx__insertbyte3": [
            "IFX_INLINE __packb Ifx__insertbyte3(__packb a, sint8 b)"
        ],
        "Ifx__insertbyte4": [
            "IFX_INLINE __packb Ifx__insertbyte4(__packb a, sint8 b)"
        ],
        "Ifx__insertubyte1": [
            "IFX_INLINE __upackb    Ifx__insertubyte1( __upackb a, uint8 b)"
        ],
        "Ifx__insertubyte2": [
            "IFX_INLINE __upackb    Ifx__insertubyte2( __upackb a, uint8 b)"
        ],
        "Ifx__insertubyte3": [
            "IFX_INLINE __upackb     Ifx__insertubyte3( __upackb a, uint8 b)"
        ],
        "Ifx__insertubyte4": [
            "IFX_INLINE __upackb     Ifx__insertubyte4( __upackb a, uint8 b)"
        ],
        "Ifx__inserthw1": [
            "IFX_INLINE __packhw Ifx__inserthw1(__packhw a, sint16 b)"
        ],
        "Ifx__inserthw2": [
            "IFX_INLINE __packhw Ifx__inserthw2(__packhw a, sint16 b)"
        ],
        "Ifx__insertuhw1": [
            "IFX_INLINE __upackhw    Ifx__insertuhw1( __upackhw a, uint16 b)"
        ],
        "Ifx__insertuhw2": [
            "IFX_INLINE __upackhw    Ifx__insertuhw2( __upackhw a, uint16 b)"
        ],
        "Ifx__minb": [
            "IFX_INLINE __packb Ifx__minb(__packb a, __packb b)"
        ],
        "Ifx__minbu": [
            "IFX_INLINE __upackb     Ifx__minbu( __upackb  a, __upackb  b)"
        ],
        "Ifx__minh": [
            "IFX_INLINE __packhw Ifx__minh(__packhw a, __packhw b)"
        ],
        "Ifx__minhu": [
            "IFX_INLINE __upackhw    Ifx__minhu( __upackhw a, __upackhw b)"
        ],
        "Ifx__setbyte1": [
            "IFX_INLINE void Ifx__setbyte1(__packb* a, sint8 b)"
        ],
        "Ifx__setbyte2": [
            "IFX_INLINE void Ifx__setbyte2(__packb* a, sint8 b)"
        ],
        "Ifx__setbyte3": [
            "IFX_INLINE void Ifx__setbyte3(__packb* a, sint8 b)"
        ],
        "Ifx__setbyte4": [
            "IFX_INLINE void Ifx__setbyte4(__packb* a, sint8 b)"
        ],
        "Ifx__sethw1": [
            "IFX_INLINE void Ifx__sethw1(__packhw* a, sint16 b)"
        ],
        "Ifx__sethw2": [
            "IFX_INLINE void Ifx__sethw2(__packhw* a, sint16 b)"
        ],
        "Ifx__setubyte1": [
            "IFX_INLINE void Ifx__setubyte1(__upackb* a, uint8 b)"
        ],
        "Ifx__setubyte2": [
            "IFX_INLINE void Ifx__setubyte2(__upackb* a, uint8 b)"
        ],
        "Ifx__setubyte3": [
            "IFX_INLINE void Ifx__setubyte3(__upackb* a, uint8 b)"
        ],
        "Ifx__setubyte4": [
            "IFX_INLINE void Ifx__setubyte4(__upackb* a, uint8 b)"
        ],
        "Ifx__setuhw1": [
            "IFX_INLINE void Ifx__setuhw1(__upackhw* a, uint16 b)"
        ],
        "Ifx__setuhw2": [
            "IFX_INLINE void Ifx__setuhw2(__upackhw* a, uint16 b)"
        ],
        "Ifx__absdif": [
            "IFX_INLINE sint32 Ifx__absdif(sint32 a, sint32 b)"
        ],
        "Ifx__abss": [
            "IFX_INLINE sint32 Ifx__abss(sint32 a)"
        ],
        "Ifx__clo": [
            "IFX_INLINE sint32 Ifx__clo(sint32 a)"
        ],
        "Ifx__cls": [
            "IFX_INLINE sint32 Ifx__cls(sint32 a)"
        ],
        "Ifx__fabs": [
            "IFX_INLINE double Ifx__fabs(double d)"
        ],
        "Ifx__fabsf": [
            "IFX_INLINE float Ifx__fabsf(float f)"
        ],
        "Ifx__parity": [
            "IFX_INLINE sint32 Ifx__parity(sint32 a)"
        ],
        "Ifx__satb": [
            "IFX_INLINE sint8 Ifx__satb(sint32 a)"
        ],
        "Ifx__satbu": [
            "IFX_INLINE uint8 Ifx__satbu(sint32 a)"
        ],
        "Ifx__sath": [
            "IFX_INLINE sint16 Ifx__sath(sint32 a)"
        ],
        "Ifx__sathu": [
            "IFX_INLINE uint16 Ifx__sathu(sint32 a)"
        ],
        "Ifx__adds": [
            "IFX_INLINE sint32 Ifx__adds(sint32 a, sint32 b)"
        ],
        "Ifx__addsu": [
            "IFX_INLINE uint32 Ifx__addsu(uint32 a, uint32 b)"
        ],
        "Ifx__subs": [
            "IFX_INLINE sint32 Ifx__subs(sint32 a, sint32 b)"
        ],
        "Ifx__subsu": [
            "IFX_INLINE uint32 Ifx__subsu(uint32 a, uint32 b)"
        ],
        "Ifx__debug": [
            "IFX_INLINE void Ifx__debug(void)"
        ],
        "Ifx__dsync": [
            "IFX_INLINE void Ifx__dsync(void)"
        ],
        "Ifx__isync": [
            "IFX_INLINE void Ifx__isync(void)"
        ],
        "Ifx__ldmst": [
            "IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)"
        ],
        "Ifx__nop": [
            "IFX_INLINE void Ifx__nop(void)"
        ],
        "Ifx__nops": [
            "IFX_INLINE void Ifx__nops(void* cnt)"
        ],
        "Ifx__rslcx": [
            "IFX_INLINE void Ifx__rslcx(void)"
        ],
        "Ifx__svlcx": [
            "IFX_INLINE void Ifx__svlcx(void)"
        ],
        "Ifx__swap": [
            "IFX_INLINE uint32 Ifx__swap(void* place, uint32 value)"
        ],
        "Ifx__stopPerfCounters": [
            "IFX_INLINE void Ifx__stopPerfCounters(void)"
        ],
        "Ifx__cmpAndSwap": [
            "IFX_INLINE unsigned int Ifx__cmpAndSwap (unsigned int volatile *address,unsigned int value, unsigned int condition)"
        ],
        "Ifx__fixpoint_to_float32": [
            "IFX_INLINE float32 Ifx__fixpoint_to_float32(fract value, sint32 shift)"
        ],
        "Ifx__getA11": [
            "IFX_INLINE void* Ifx__getA11(void)"
        ],
        "Ifx__setStackPointer": [
            "IFX_INLINE void Ifx__setStackPointer(void *stackAddr)"
        ],
        "Ifx__crc32": [
            "IFX_INLINE uint32 Ifx__crc32(uint32 b, uint32 a)"
        ],
        "IfxCpu_calculateCrc32": [
            "IFX_INLINE uint32 IfxCpu_calculateCrc32(uint32 *startaddress, uint8 length)"
        ],
        "IfxCpu_getRandomVal": [
            "IFX_INLINE uint32 IfxCpu_getRandomVal(uint32 a, uint32 x, uint32 m)"
        ],
        "Ifx__popcnt": [
            "IFX_INLINE sint32 Ifx__popcnt(sint32 a)"
        ],
        "Ifx__cacheai": [
            "IFX_INLINE void Ifx__cacheai(uint8* p)"
        ]
    },
    "IfxCpu_IntrinsicsTasking.h": {
        "Ifx__jump_and_link": [
            "IFX_INLINE void Ifx__jump_and_link(void (*fun)(void))"
        ],
        "Ifx__moveToDataParam0": [
            "IFX_INLINE void Ifx__moveToDataParam0(unsigned int var)"
        ],
        "Ifx__moveToAddrParam0": [
            "IFX_INLINE void Ifx__moveToAddrParam0(const void *var)"
        ],
        "Ifx__getDataParamRet": [
            "IFX_INLINE unsigned int Ifx__getDataParamRet(void)"
        ],
        "Ifx__moveToDataParamRet": [
            "IFX_INLINE void Ifx__moveToDataParamRet(unsigned int var)"
        ],
        "Ifx__jumpToFunction": [
            "IFX_INLINE void Ifx__jumpToFunction(const void *fun)"
        ],
        "Ifx__jumpToFunctionWithLink": [
            "IFX_INLINE void Ifx__jumpToFunctionWithLink(const void *fun)"
        ],
        "Ifx__jumpBackToLink": [
            "IFX_INLINE void Ifx__jumpBackToLink(void)"
        ],
        "Ifx__nops": [
            "IFX_INLINE void Ifx__nops(void* cnt)"
        ],
        "Ifx__ldmstC": [
            "IFX_INLINE void Ifx__ldmstC(volatile void *addr, uint32 mask, uint32 data)"
        ],
        "Ifx__ldmstAsm": [
            "IFX_INLINE void Ifx__ldmstAsm(volatile void *addr, uint32 mask, uint32 data)"
        ],
        "Ifx__float_to_fract": [
            "IFX_INLINE fract Ifx__float_to_fract(float a)"
        ],
        "Ifx__float_to_sfract": [
            "IFX_INLINE sfract Ifx__float_to_sfract(float a)"
        ],
        "Ifx__stopPerfCounters": [
            "IFX_INLINE void Ifx__stopPerfCounters(void)"
        ],
        "Ifx__fixpoint_to_float32": [
            "IFX_INLINE float32 Ifx__fixpoint_to_float32(fract value, sint32 shift)"
        ],
        "Ifx__getA11": [
            "IFX_INLINE void* Ifx__getA11(void)"
        ],
        "Ifx__setStackPointer": [
            "IFX_INLINE void Ifx__setStackPointer(void *stackAddr)"
        ],
        "IfxCpu_calculateCrc32": [
            "IFX_INLINE uint32 IfxCpu_calculateCrc32(uint32 *startaddress, uint8 length)"
        ],
        "IfxCpu_getRandomVal": [
            "IFX_INLINE uint32 IfxCpu_getRandomVal(uint32 a, uint32 x, uint32 m)"
        ],
        "Ifx__popcnt": [
            "IFX_INLINE sint32 Ifx__popcnt(sint32 a)"
        ]
    },
    "Ifx_Types.h": {},
    "Ifx_TypesDcc.h": {},
    "Ifx_TypesGhs.h": {},
    "Ifx_TypesGnuc.h": {},
    "Ifx_TypesTasking.h": {},
    "Platform_Types.h": {},
    "IfxCpu_Trap.h": {},
    "IfxDma_Dma.h": {
        "IfxDma_Dma_clearChannelInterrupt": [
            "IFX_INLINE void IfxDma_Dma_clearChannelInterrupt(IfxDma_Dma_Channel *channel)"
        ],
        "IfxDma_Dma_getAndClearChannelInterrupt": [
            "IFX_INLINE boolean IfxDma_Dma_getAndClearChannelInterrupt(IfxDma_Dma_Channel *channel)"
        ],
        "IfxDma_Dma_getChannelInterrupt": [
            "IFX_INLINE boolean IfxDma_Dma_getChannelInterrupt(IfxDma_Dma_Channel *channel)"
        ],
        "IfxDma_Dma_getSrcPointer": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_Dma_getSrcPointer(IfxDma_Dma_Channel *channel)"
        ],
        "IfxDma_Dma_isChannelTransactionPending": [
            "IFX_INLINE boolean IfxDma_Dma_isChannelTransactionPending(IfxDma_Dma_Channel *channel)"
        ],
        "IfxDma_Dma_setChannelDestinationAddress": [
            "IFX_INLINE void IfxDma_Dma_setChannelDestinationAddress(IfxDma_Dma_Channel *channel, uint32 address)"
        ],
        "IfxDma_Dma_setChannelSourceAddress": [
            "IFX_INLINE void IfxDma_Dma_setChannelSourceAddress(IfxDma_Dma_Channel *channel, uint32 address)"
        ],
        "IfxDma_Dma_setChannelTransferCount": [
            "IFX_INLINE void IfxDma_Dma_setChannelTransferCount(IfxDma_Dma_Channel *channel, uint32 transferCount)"
        ],
        "IfxDma_Dma_startChannelTransaction": [
            "IFX_INLINE void IfxDma_Dma_startChannelTransaction(IfxDma_Dma_Channel *channel)"
        ]
    },
    "IfxDma.h": {
        "IfxDma_clearChannelHalt": [
            "IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_clearChannelInterrupt": [
            "IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_clearChannelTransactionRequestLost": [
            "IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_clearErrorFlags": [
            "IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)"
        ],
        "IfxDma_disableChannelInterrupt": [
            "IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_disableChannelTransaction": [
            "IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_disableChannelTransactionLostError": [
            "IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_disableMoveEngineDestinationError": [
            "IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)"
        ],
        "IfxDma_disableMoveEngineSourceError": [
            "IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)"
        ],
        "IfxDma_enableChannelInterrupt": [
            "IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_enableChannelTransaction": [
            "IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_enableChannelTransactionLostError": [
            "IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_enableMoveEngineDestinationError": [
            "IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)"
        ],
        "IfxDma_enableMoveEngineSourceError": [
            "IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)"
        ],
        "IfxDma_getAndClearChannelInterrupt": [
            "IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_getAndClearChannelPatternDetectionInterrupt": [
            "IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_getAndClearChannelWrapDestinationBufferInterrupt": [
            "IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_getAndClearChannelWrapSourceBufferInterrupt": [
            "IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_getChannelDestinationAddress": [
            "IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_getChannelHalt": [
            "IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_getChannelInterrupt": [
            "IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_getChannelPatternDetectionOldValue": [
            "IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_getChannelSourceAddress": [
            "IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_getChannelSuspendModeStatus": [
            "IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_getChannelTransactionRequestLost": [
            "IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_getChannelTransferCount": [
            "IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_getCircularRangeCode": [
            "IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)"
        ],
        "IfxDma_getDoubleBufferRead": [
            "IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_getDoubleBufferSelection": [
            "IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_getErrorFlags": [
            "IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)"
        ],
        "IfxDma_getSrcPointer": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_getTimestamp": [
            "IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma)"
        ],
        "IfxDma_isChannelReset": [
            "IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_isChannelTransactionEnabled": [
            "IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_isChannelTransactionPending": [
            "IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_keepDoubleBufferActive": [
            "IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_resetChannel": [
            "IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_setChannelBlockMode": [
            "IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode)"
        ],
        "IfxDma_setChannelContinuousMode": [
            "IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_setChannelDestinationAddress": [
            "IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address)"
        ],
        "IfxDma_setChannelDestinationIncrementStep": [
            "IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size)"
        ],
        "IfxDma_setChannelHalt": [
            "IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_setChannelInterruptServiceRequest": [
            "IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_setChannelMoveSize": [
            "IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize)"
        ],
        "IfxDma_setChannelShadow": [
            "IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow)"
        ],
        "IfxDma_setChannelSingleMode": [
            "IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_setChannelSingleTransaction": [
            "IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_setChannelSingleTransfer": [
            "IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_setChannelSourceAddress": [
            "IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address)"
        ],
        "IfxDma_setChannelSourceIncrementStep": [
            "IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size)"
        ],
        "IfxDma_setChannelSuspendEnable": [
            "IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable)"
        ],
        "IfxDma_setChannelTransferCount": [
            "IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount)"
        ],
        "IfxDma_setSleepMode": [
            "IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode)"
        ],
        "IfxDma_startChannelTransaction": [
            "IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_switchDoubleBuffer": [
            "IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_writeChannelShadowDisable": [
            "IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_writeChannelShadowEnable": [
            "IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_enableSwapDataByte": [
            "IFX_INLINE void IfxDma_enableSwapDataByte(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_setChannelHardwareResourcePartition": [
            "IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition)"
        ],
        "IfxDma_setInterruptControlValue": [
            "IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value)"
        ],
        "IfxDma_setCircularBufferDestinationLength": [
            "IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length)"
        ],
        "IfxDma_setCircularBufferSourceLength": [
            "IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length)"
        ],
        "IfxDma_enableSourceCircularBuffer": [
            "IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_enableDestinationCircularBuffer": [
            "IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_getDataCRC": [
            "IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_getSourceAndDestinationCRC": [
            "IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId)"
        ],
        "IfxDma_getErrPointer": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma, IfxDma_HardwareResourcePartition resourcePartition)"
        ]
    },
    "IfxDts_Dts.h": {
        "IfxDts_Dts_getTemperatureCelsius": [
            "IFX_INLINE float32 IfxDts_Dts_getTemperatureCelsius(void)"
        ],
        "IfxDts_Dts_getTemperatureValue": [
            "IFX_INLINE uint16 IfxDts_Dts_getTemperatureValue(void)"
        ]
    },
    "IfxDts.h": {
        "IfxDts_getSrcPointer": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxDts_getSrcPointer(void)"
        ],
        "IfxDts_getTemperatureValue": [
            "IFX_INLINE uint16 IfxDts_getTemperatureValue(void)"
        ]
    },
    "IfxEdsadc_Edsadc.h": {
        "IfxEdsadc_Edsadc_getAuxSrc": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxEdsadc_Edsadc_getAuxSrc(IfxEdsadc_Edsadc_Channel *channel)"
        ],
        "IfxEdsadc_Edsadc_getMainResult": [
            "IFX_INLINE sint16 IfxEdsadc_Edsadc_getMainResult(IfxEdsadc_Edsadc_Channel *channel)"
        ],
        "IfxEdsadc_Edsadc_getMainSrc": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxEdsadc_Edsadc_getMainSrc(IfxEdsadc_Edsadc_Channel *channel)"
        ],
        "IfxEdsadc_Edsadc_getSubsequentResult": [
            "IFX_INLINE sint32 IfxEdsadc_Edsadc_getSubsequentResult(IfxEdsadc_Edsadc_Channel *channel)"
        ],
        "IfxEdsadc_Edsadc_startScan": [
            "IFX_INLINE void IfxEdsadc_Edsadc_startScan(IfxEdsadc_Edsadc *edsadc, uint32 modulatorMask, uint32 channelMask)"
        ],
        "IfxEdsadc_Edsadc_stopScan": [
            "IFX_INLINE void IfxEdsadc_Edsadc_stopScan(IfxEdsadc_Edsadc *edsadc, uint32 modulatorMask)"
        ],
        "IfxEdsadc_Edsadc_setGainCorrectionFactor": [
            "IFX_INLINE void IfxEdsadc_Edsadc_setGainCorrectionFactor(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift)"
        ],
        "IfxEdsadc_Edsadc_initTimeStampCounter": [
            "IFX_INLINE void IfxEdsadc_Edsadc_initTimeStampCounter(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, const IfxEdsadc_Edsadc_TimeStampCounter *timeStamp)"
        ],
        "IfxEdsadc_Edsadc_initCommonModeVoltage": [
            "IFX_INLINE void IfxEdsadc_Edsadc_initCommonModeVoltage(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, const IfxEdsadc_Edsadc_CommonModeVoltageConfig *commonMode)"
        ]
    },
    "IfxEdsadc.h": {
        "IfxEdsadc_getMainCombDecimation": [
            "IFX_INLINE uint16 IfxEdsadc_getMainCombDecimation(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)"
        ],
        "IfxEdsadc_getMainResult": [
            "IFX_INLINE sint16 IfxEdsadc_getMainResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)"
        ],
        "IfxEdsadc_getSubsequentResult": [
            "IFX_INLINE sint32 IfxEdsadc_getSubsequentResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)"
        ],
        "IfxEdsadc_initCgPwmPin": [
            "IFX_INLINE void IfxEdsadc_initCgPwmPin(const IfxEdsadc_Cgpwm_Out *cgPwm, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxEdsadc_initCinPin": [
            "IFX_INLINE void IfxEdsadc_initCinPin(const IfxEdsadc_Cin_In *cIn, IfxPort_InputMode cInMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxEdsadc_initCoutPin": [
            "IFX_INLINE void IfxEdsadc_initCoutPin(const IfxEdsadc_Cout_Out *cout, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxEdsadc_initDinPin": [
            "IFX_INLINE void IfxEdsadc_initDinPin(const IfxEdsadc_Din_In *dIn, IfxPort_InputMode dInMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxEdsadc_initDsnPin": [
            "IFX_INLINE void IfxEdsadc_initDsnPin(const IfxEdsadc_Dsn_In *dsn, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxEdsadc_initDspPin": [
            "IFX_INLINE void IfxEdsadc_initDspPin(const IfxEdsadc_Dsp_In *dsp, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxEdsadc_initItrPin": [
            "IFX_INLINE void IfxEdsadc_initItrPin(const IfxEdsadc_Itr_In *itr, IfxPort_InputMode itrMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxEdsadc_initSgPin": [
            "IFX_INLINE void IfxEdsadc_initSgPin(const IfxEdsadc_Sg_In *sg, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxEdsadc_isModuleEnabled": [
            "IFX_INLINE boolean IfxEdsadc_isModuleEnabled(Ifx_EDSADC *edsadc)"
        ],
        "IfxEdsadc_isModuleSuspended": [
            "IFX_INLINE boolean IfxEdsadc_isModuleSuspended(Ifx_EDSADC *edsadc)"
        ],
        "IfxEdsadc_setCarrierMode": [
            "IFX_INLINE void IfxEdsadc_setCarrierMode(Ifx_EDSADC *edsadc, IfxEdsadc_CarrierWaveformMode waveformMode)"
        ],
        "IfxEdsadc_setSleepMode": [
            "IFX_INLINE void IfxEdsadc_setSleepMode(Ifx_EDSADC *edsadc, IfxEdsadc_SleepMode mode)"
        ],
        "IfxEdsadc_setSuspendMode": [
            "IFX_INLINE void IfxEdsadc_setSuspendMode(Ifx_EDSADC *edsadc, IfxEdsadc_SuspendMode mode)"
        ],
        "IfxEdsadc_startScan": [
            "IFX_INLINE void IfxEdsadc_startScan(Ifx_EDSADC *edsadc, uint32 modulatorMask, uint32 channelMask)"
        ],
        "IfxEdsadc_stopScan": [
            "IFX_INLINE void IfxEdsadc_stopScan(Ifx_EDSADC *edsadc, uint32 modulatorMask)"
        ],
        "IfxEdsadc_getPositiveInputLineConfiguration": [
            "IFX_INLINE uint8 IfxEdsadc_getPositiveInputLineConfiguration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)"
        ],
        "IfxEdsadc_getNegativeInputLineConfiguration": [
            "IFX_INLINE uint8 IfxEdsadc_getNegativeInputLineConfiguration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)"
        ],
        "IfxEdsadc_setOffsetCompensationValue": [
            "IFX_INLINE void IfxEdsadc_setOffsetCompensationValue(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 value)"
        ],
        "IfxEdsadc_getResultRegisterAddress": [
            "IFX_INLINE uint32 *IfxEdsadc_getResultRegisterAddress(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)"
        ]
    },
    "IfxEray_Eray.h": {
        "IfxEray_Eray_allowColdStart": [
            "IFX_INLINE boolean IfxEray_Eray_allowColdStart(IfxEray_Eray *eray)"
        ],
        "IfxEray_Eray_bufferReconfig": [
            "IFX_INLINE void IfxEray_Eray_bufferReconfig(IfxEray_Eray *eray, IfxEray_Eray_BufferReconfig *reconfigBuffer)"
        ],
        "IfxEray_Eray_changePocState": [
            "IFX_INLINE boolean IfxEray_Eray_changePocState(IfxEray_Eray *eray, IfxEray_PocCommand PocCommand)"
        ],
        "IfxEray_Eray_clearErrorFlag": [
            "IFX_INLINE void IfxEray_Eray_clearErrorFlag(IfxEray_Eray *eray, IfxEray_ClearErrorFlag errorFlag)"
        ],
        "IfxEray_Eray_clearStatusFlag": [
            "IFX_INLINE void IfxEray_Eray_clearStatusFlag(IfxEray_Eray *eray, IfxEray_ClearStatusFlag statusFlag)"
        ],
        "IfxEray_Eray_deInitModule": [
            "IFX_INLINE void IfxEray_Eray_deInitModule(IfxEray_Eray *eray)"
        ],
        "IfxEray_Eray_getErrorInterrupts": [
            "IFX_INLINE Ifx_ERAY_EIR IfxEray_Eray_getErrorInterrupts(IfxEray_Eray *eray)"
        ],
        "IfxEray_Eray_getMessageBufferInterruptStatus": [
            "IFX_INLINE uint8 IfxEray_Eray_getMessageBufferInterruptStatus(IfxEray_Eray *eray, uint8 messageBuffer)"
        ],
        "IfxEray_Eray_getNewDataInterruptStatus": [
            "IFX_INLINE uint8 IfxEray_Eray_getNewDataInterruptStatus(IfxEray_Eray *eray, uint8 ndat)"
        ],
        "IfxEray_Eray_getPocState": [
            "IFX_INLINE IfxEray_PocState IfxEray_Eray_getPocState(IfxEray_Eray *eray)"
        ],
        "IfxEray_Eray_getStatusInterrupts": [
            "IFX_INLINE Ifx_ERAY_SIR IfxEray_Eray_getStatusInterrupts(IfxEray_Eray *eray)"
        ],
        "IfxEray_Eray_getWakeupPatternReceivedChannel": [
            "IFX_INLINE IfxEray_WakeupChannel IfxEray_Eray_getWakeupPatternReceivedChannel(IfxEray_Eray *eray)"
        ],
        "IfxEray_Eray_readData": [
            "IFX_INLINE void IfxEray_Eray_readData(IfxEray_Eray *eray, uint32 *data, uint8 payloadLength)"
        ],
        "IfxEray_Eray_readFrame": [
            "IFX_INLINE void IfxEray_Eray_readFrame(IfxEray_Eray *eray, IfxEray_Eray_ReceivedFrame *frame, Ifx_SizeT maxPayloadLength)"
        ],
        "IfxEray_Eray_setMessageBufferInterruptDestination": [
            "IFX_INLINE void IfxEray_Eray_setMessageBufferInterruptDestination(IfxEray_Eray *eray, uint8 messageBuffer, uint8 messageBufferDestination)"
        ],
        "IfxEray_Eray_setNewDataInterruptDestination": [
            "IFX_INLINE void IfxEray_Eray_setNewDataInterruptDestination(IfxEray_Eray *eray, uint8 ndat, uint8 ndatDestination)"
        ],
        "IfxEray_Eray_setPocAllSlots": [
            "IFX_INLINE boolean IfxEray_Eray_setPocAllSlots(IfxEray_Eray *eray)"
        ],
        "IfxEray_Eray_startCommunication": [
            "IFX_INLINE boolean IfxEray_Eray_startCommunication(IfxEray_Eray *eray)"
        ],
        "IfxEray_Eray_wakeUpChannel": [
            "IFX_INLINE void IfxEray_Eray_wakeUpChannel(IfxEray_Eray *eray, IfxEray_Channel channel)"
        ],
        "IfxEray_Eray_wakeUpCluster": [
            "IFX_INLINE boolean IfxEray_Eray_wakeUpCluster(IfxEray_Eray *eray)"
        ],
        "IfxEray_Eray_writeData": [
            "IFX_INLINE void IfxEray_Eray_writeData(IfxEray_Eray *eray, uint32 *data, uint8 payloadLength)"
        ]
    },
    "IfxEray.h": {
        "IfxEray_clearErrorFlag": [
            "IFX_INLINE void IfxEray_clearErrorFlag(Ifx_ERAY *eray, IfxEray_ClearErrorFlag errorFlag)"
        ],
        "IfxEray_clearStatusFlag": [
            "IFX_INLINE void IfxEray_clearStatusFlag(Ifx_ERAY *eray, IfxEray_ClearStatusFlag statusFlag)"
        ],
        "IfxEray_disableModule": [
            "IFX_INLINE void IfxEray_disableModule(Ifx_ERAY *eray)"
        ],
        "IfxEray_enableModule": [
            "IFX_INLINE void IfxEray_enableModule(Ifx_ERAY *eray)"
        ],
        "IfxEray_getErrorInterrupts": [
            "IFX_INLINE Ifx_ERAY_EIR IfxEray_getErrorInterrupts(Ifx_ERAY *eray)"
        ],
        "IfxEray_getFifoIndex": [
            "IFX_INLINE uint8 IfxEray_getFifoIndex(Ifx_ERAY *eray)"
        ],
        "IfxEray_getFifoStatus": [
            "IFX_INLINE Ifx_ERAY_FSR IfxEray_getFifoStatus(Ifx_ERAY *eray)"
        ],
        "IfxEray_getInputBufferBusyHostStatus": [
            "IFX_INLINE boolean IfxEray_getInputBufferBusyHostStatus(Ifx_ERAY *eray)"
        ],
        "IfxEray_getInputBufferBusyShadowStatus": [
            "IFX_INLINE uint8 IfxEray_getInputBufferBusyShadowStatus(Ifx_ERAY *eray)"
        ],
        "IfxEray_getInputBufferBusySrcPtr": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getInputBufferBusySrcPtr(Ifx_ERAY *eray)"
        ],
        "IfxEray_getInterruptLine0SrcPtr": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getInterruptLine0SrcPtr(Ifx_ERAY *eray)"
        ],
        "IfxEray_getInterruptLine1SrcPtr": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getInterruptLine1SrcPtr(Ifx_ERAY *eray)"
        ],
        "IfxEray_getMessageBufferInterruptStatus": [
            "IFX_INLINE boolean IfxEray_getMessageBufferInterruptStatus(Ifx_ERAY *eray, uint8 messageBuffer)"
        ],
        "IfxEray_getMessageBufferStatus0SrcPtr": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getMessageBufferStatus0SrcPtr(Ifx_ERAY *eray)"
        ],
        "IfxEray_getMessageBufferStatus1SrcPtr": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getMessageBufferStatus1SrcPtr(Ifx_ERAY *eray)"
        ],
        "IfxEray_getNewDataInterrupt0SrcPtr": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getNewDataInterrupt0SrcPtr(Ifx_ERAY *eray)"
        ],
        "IfxEray_getNewDataInterrupt1SrcPtr": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getNewDataInterrupt1SrcPtr(Ifx_ERAY *eray)"
        ],
        "IfxEray_getNewDataInterruptStatus": [
            "IFX_INLINE boolean IfxEray_getNewDataInterruptStatus(Ifx_ERAY *eray, uint8 ndat)"
        ],
        "IfxEray_getOutputBuffer": [
            "IFX_INLINE uint8 IfxEray_getOutputBuffer(Ifx_ERAY *eray)"
        ],
        "IfxEray_getOutputBufferBusyShadowStatus": [
            "IFX_INLINE boolean IfxEray_getOutputBufferBusyShadowStatus(Ifx_ERAY *eray)"
        ],
        "IfxEray_getOutputBufferBusySrcPtr": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getOutputBufferBusySrcPtr(Ifx_ERAY *eray)"
        ],
        "IfxEray_getPocState": [
            "IFX_INLINE IfxEray_PocState IfxEray_getPocState(Ifx_ERAY *eray)"
        ],
        "IfxEray_getStatusInterrupts": [
            "IFX_INLINE Ifx_ERAY_SIR IfxEray_getStatusInterrupts(Ifx_ERAY *eray)"
        ],
        "IfxEray_getTimerInterrupt0SrcPtr": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getTimerInterrupt0SrcPtr(Ifx_ERAY *eray)"
        ],
        "IfxEray_getTimerInterrupt1SrcPtr": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getTimerInterrupt1SrcPtr(Ifx_ERAY *eray)"
        ],
        "IfxEray_getWakeupPatternReceivedChannel": [
            "IFX_INLINE IfxEray_WakeupChannel IfxEray_getWakeupPatternReceivedChannel(Ifx_ERAY *eray)"
        ],
        "IfxEray_initRxPin": [
            "IFX_INLINE void IfxEray_initRxPin(const IfxEray_Rxd_In *rx, IfxPort_InputMode rxMode)"
        ],
        "IfxEray_initTxEnPin": [
            "IFX_INLINE void IfxEray_initTxEnPin(const IfxEray_Txen_Out *txEn, IfxPort_OutputMode txEnMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxEray_initTxPin": [
            "IFX_INLINE void IfxEray_initTxPin(const IfxEray_Txd_Out *tx, IfxPort_OutputMode txMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxEray_isModuleSuspended": [
            "IFX_INLINE boolean IfxEray_isModuleSuspended(Ifx_ERAY *eray)"
        ],
        "IfxEray_receiveData": [
            "IFX_INLINE void IfxEray_receiveData(Ifx_ERAY *eray, boolean dataReceived)"
        ],
        "IfxEray_receiveHeader": [
            "IFX_INLINE void IfxEray_receiveHeader(Ifx_ERAY *eray, boolean headerReceived)"
        ],
        "IfxEray_sendData": [
            "IFX_INLINE void IfxEray_sendData(Ifx_ERAY *eray, boolean dataTransfered)"
        ],
        "IfxEray_sendHeader": [
            "IFX_INLINE void IfxEray_sendHeader(Ifx_ERAY *eray, boolean headerTransfered)"
        ],
        "IfxEray_setActiveCyclePairs": [
            "IFX_INLINE void IfxEray_setActiveCyclePairs(Ifx_ERAY *eray, uint8 numberOfCyclePairsForActive)"
        ],
        "IfxEray_setAutoDelayBuffers": [
            "IFX_INLINE void IfxEray_setAutoDelayBuffers(Ifx_ERAY *eray)"
        ],
        "IfxEray_setBaudrate": [
            "IFX_INLINE void IfxEray_setBaudrate(Ifx_ERAY *eray, IfxEray_Baudrate baudrate)"
        ],
        "IfxEray_setBufferReconfigSecure": [
            "IFX_INLINE void IfxEray_setBufferReconfigSecure(Ifx_ERAY *eray, uint8 secureValue)"
        ],
        "IfxEray_setChannelAInitialOffsets": [
            "IFX_INLINE void IfxEray_setChannelAInitialOffsets(Ifx_ERAY *eray, uint8 channelAMicrotickInitialOffset, uint8 channelAMacrotickInitialOffset)"
        ],
        "IfxEray_setChannelBInitialOffsets": [
            "IFX_INLINE void IfxEray_setChannelBInitialOffsets(Ifx_ERAY *eray, uint8 channelBMicrotickInitialOffset, uint8 channelBMacrotickInitialOffset)"
        ],
        "IfxEray_setChannelsReceiveDelay": [
            "IFX_INLINE void IfxEray_setChannelsReceiveDelay(Ifx_ERAY *eray, uint8 channelAReceptionDelay, uint8 channelBReceptionDelay)"
        ],
        "IfxEray_setClockCorrectionCycles": [
            "IFX_INLINE void IfxEray_setClockCorrectionCycles(Ifx_ERAY *eray, uint8 clockCorrectionCyclesPassive, uint8 clockCorrectionCyclesHalt)"
        ],
        "IfxEray_setClockSynchErrorHalt": [
            "IFX_INLINE void IfxEray_setClockSynchErrorHalt(Ifx_ERAY *eray, boolean clockSyncErrorHalt)"
        ],
        "IfxEray_setClusterDriftValues": [
            "IFX_INLINE void IfxEray_setClusterDriftValues(Ifx_ERAY *eray, uint8 clusterDrift, uint16 maxDriftOffset)"
        ],
        "IfxEray_setClusterStartupDeviation": [
            "IFX_INLINE void IfxEray_setClusterStartupDeviation(Ifx_ERAY *eray, uint16 acceptedStartupDeviation)"
        ],
        "IfxEray_setCollisionAvoidanceDuration": [
            "IFX_INLINE void IfxEray_setCollisionAvoidanceDuration(Ifx_ERAY *eray, uint8 collisionAvoidanceDuration)"
        ],
        "IfxEray_setCycleDurationMacroticks": [
            "IFX_INLINE void IfxEray_setCycleDurationMacroticks(Ifx_ERAY *eray, uint16 macroticks)"
        ],
        "IfxEray_setCycleDurationMicroticks": [
            "IFX_INLINE void IfxEray_setCycleDurationMicroticks(Ifx_ERAY *eray, uint32 microticks)"
        ],
        "IfxEray_setDecodingCorrectionValue": [
            "IFX_INLINE void IfxEray_setDecodingCorrectionValue(Ifx_ERAY *eray, uint8 decodingCorrection)"
        ],
        "IfxEray_setDynamicSlots": [
            "IFX_INLINE void IfxEray_setDynamicSlots(Ifx_ERAY *eray, uint8 dynamicSlotLength, uint16 dynamicSlotCount, IfxEray_IdleDynamicSlots idleDynamicSlots)"
        ],
        "IfxEray_setExternalCorrectionControl": [
            "IFX_INLINE void IfxEray_setExternalCorrectionControl(Ifx_ERAY *eray, IfxEray_ExternalOffset externalOffset, IfxEray_ExternalRate externalRate)"
        ],
        "IfxEray_setExternalCorrectionValues": [
            "IFX_INLINE void IfxEray_setExternalCorrectionValues(Ifx_ERAY *eray, IfxEray_ExternalOffsetCorrection externalOffsetCorrection, IfxEray_ExternalRateCorrection externalRateCorrection)"
        ],
        "IfxEray_setFifoBufferStartIndex": [
            "IFX_INLINE void IfxEray_setFifoBufferStartIndex(Ifx_ERAY *eray, uint8 fifoBufferStartIndex)"
        ],
        "IfxEray_setFifoFilterConfigurations": [
            "IFX_INLINE void IfxEray_setFifoFilterConfigurations(Ifx_ERAY *eray, uint16 rejectedFrameId, uint8 filteredCycleNumber, boolean fifoNullFramesRejected, uint16 frameIdFilter)"
        ],
        "IfxEray_setFifoMessageBufferConfigurations": [
            "IFX_INLINE void IfxEray_setFifoMessageBufferConfigurations(Ifx_ERAY *eray, IfxEray_ReceiveChannel receiveChannel, boolean staticFifoDisabled, uint8 fifoDepth)"
        ],
        "IfxEray_setFirstDynamicBuffer": [
            "IFX_INLINE void IfxEray_setFirstDynamicBuffer(Ifx_ERAY *eray, uint8 firstDynamicBuffer)"
        ],
        "IfxEray_setListenTimeOuts": [
            "IFX_INLINE void IfxEray_setListenTimeOuts(Ifx_ERAY *eray, uint32 listenTimeOut, IfxEray_ListenTimeOutNoise listenTimeOutNoise)"
        ],
        "IfxEray_setMaxColdStartAttempts": [
            "IFX_INLINE void IfxEray_setMaxColdStartAttempts(Ifx_ERAY *eray, uint8 maxColdStartAttempts)"
        ],
        "IfxEray_setMaxCorrectionValues": [
            "IFX_INLINE void IfxEray_setMaxCorrectionValues(Ifx_ERAY *eray, uint16 maxOffsetCorrection, uint16 maxRateCorrection)"
        ],
        "IfxEray_setMaxSynchFrames": [
            "IFX_INLINE void IfxEray_setMaxSynchFrames(Ifx_ERAY *eray, IfxEray_MaxSynchFrames maxSyncFrames)"
        ],
        "IfxEray_setMessageBufferCount": [
            "IFX_INLINE void IfxEray_setMessageBufferCount(Ifx_ERAY *eray, uint8 numberOfMessageBuffers)"
        ],
        "IfxEray_setMessageHandlerConfigurations": [
            "IFX_INLINE void IfxEray_setMessageHandlerConfigurations(Ifx_ERAY *eray, uint8 staticFramepayload, uint8 latestTransmissionStart)"
        ],
        "IfxEray_setNetworkStartIdleTime": [
            "IFX_INLINE void IfxEray_setNetworkStartIdleTime(Ifx_ERAY *eray, uint16 networkStartIdleTime)"
        ],
        "IfxEray_setNetworkVectorLength": [
            "IFX_INLINE void IfxEray_setNetworkVectorLength(Ifx_ERAY *eray, uint32 networkVectorLength)"
        ],
        "IfxEray_setNodeChannels": [
            "IFX_INLINE void IfxEray_setNodeChannels(Ifx_ERAY *eray, boolean channelAConnectedNode, boolean channelBConnectedNode)"
        ],
        "IfxEray_setOffsetCorrection": [
            "IFX_INLINE void IfxEray_setOffsetCorrection(Ifx_ERAY *eray, uint16 correctionOffset)"
        ],
        "IfxEray_setReceiveRequest": [
            "IFX_INLINE void IfxEray_setReceiveRequest(Ifx_ERAY *eray, boolean receiveRequested)"
        ],
        "IfxEray_setReceiveWakeupTimes": [
            "IFX_INLINE void IfxEray_setReceiveWakeupTimes(Ifx_ERAY *eray, uint16 receiveWakeupTestDuration, uint8 receiveWakeupIdleTime, uint8 receiveWakeupLowTime)"
        ],
        "IfxEray_setRxBufferNumber": [
            "IFX_INLINE void IfxEray_setRxBufferNumber(Ifx_ERAY *eray, uint8 bufferIndex)"
        ],
        "IfxEray_setSleepMode": [
            "IFX_INLINE void IfxEray_setSleepMode(Ifx_ERAY *eray, IfxEray_SleepMode mode)"
        ],
        "IfxEray_setSlotActionPoints": [
            "IFX_INLINE void IfxEray_setSlotActionPoints(Ifx_ERAY *eray, uint8 staticActionPoint, uint8 dynamicActionPoint)"
        ],
        "IfxEray_setStaticSlots": [
            "IFX_INLINE void IfxEray_setStaticSlots(Ifx_ERAY *eray, uint16 staticSlotLength, uint16 staticSlotsCount)"
        ],
        "IfxEray_setStrobePosition": [
            "IFX_INLINE void IfxEray_setStrobePosition(Ifx_ERAY *eray, IfxEray_StrobePosition strobePosition)"
        ],
        "IfxEray_setSuspendMode": [
            "IFX_INLINE void IfxEray_setSuspendMode(Ifx_ERAY *eray, IfxEray_SuspendMode mode)"
        ],
        "IfxEray_setSymbolChannels": [
            "IFX_INLINE void IfxEray_setSymbolChannels(Ifx_ERAY *eray, boolean channelASymbolTransmitted, boolean channelBSymbolTransmitted)"
        ],
        "IfxEray_setTransmissionSlotMode": [
            "IFX_INLINE void IfxEray_setTransmissionSlotMode(Ifx_ERAY *eray, IfxEray_TransmissionSlotMode transmissionSlotMode)"
        ],
        "IfxEray_setTransmissionStartTime": [
            "IFX_INLINE void IfxEray_setTransmissionStartTime(Ifx_ERAY *eray, uint8 transmissionStartTime)"
        ],
        "IfxEray_setTransmitRequest": [
            "IFX_INLINE void IfxEray_setTransmitRequest(Ifx_ERAY *eray, boolean transferRequested)"
        ],
        "IfxEray_setTransmitWakeupTimes": [
            "IFX_INLINE void IfxEray_setTransmitWakeupTimes(Ifx_ERAY *eray, uint8 transmitWakeupRepetitions, uint8 transmitWakeupIdleTime, uint8 transmitWakeupLowTime)"
        ],
        "IfxEray_setTransmittedFrames": [
            "IFX_INLINE void IfxEray_setTransmittedFrames(Ifx_ERAY *eray, boolean startupFrameTransmitted, boolean synchFrameTransmitted)"
        ],
        "IfxEray_setTxBufferNumber": [
            "IFX_INLINE void IfxEray_setTxBufferNumber(Ifx_ERAY *eray, uint8 bufferIndex)"
        ],
        "IfxEray_setViewData": [
            "IFX_INLINE void IfxEray_setViewData(Ifx_ERAY *eray, boolean swapRequested)"
        ],
        "IfxEray_setWakeupPatternChannel": [
            "IFX_INLINE void IfxEray_setWakeupPatternChannel(Ifx_ERAY *eray, IfxEray_WakeupChannel wakeupPatternChannel)"
        ],
        "IfxEray_waitForPocState": [
            "IFX_INLINE void IfxEray_waitForPocState(Ifx_ERAY *eray, IfxEray_PocState pocState)"
        ],
        "IfxEray_initRxPinWithPadLevel": [
            "IFX_INLINE void IfxEray_initRxPinWithPadLevel(const IfxEray_Rxd_In *rx, IfxPort_InputMode rxMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxEray_selectRecieveInput": [
            "IFX_INLINE void IfxEray_selectRecieveInput(Ifx_ERAY *eray, IfxEray_NodeId nodeId, Ifx_RxSel select)"
        ],
        "IfxEray_setPocCommand": [
            "IFX_INLINE void IfxEray_setPocCommand(Ifx_ERAY *eray, IfxEray_PocCommand cmd)"
        ],
        "IfxEray_isRamsCleared": [
            "IFX_INLINE boolean IfxEray_isRamsCleared(Ifx_ERAY *eray)"
        ],
        "IfxEray_isPocBusy": [
            "IFX_INLINE boolean IfxEray_isPocBusy(Ifx_ERAY *eray)"
        ],
        "IfxEray_enableInterruptLine": [
            "IFX_INLINE void IfxEray_enableInterruptLine(Ifx_ERAY *eray, IfxEray_InterruptLine intLine)"
        ],
        "IfxEray_enableTransmitInterrupt": [
            "IFX_INLINE void IfxEray_enableTransmitInterrupt(Ifx_ERAY *eray)"
        ],
        "IfxEray_enableAllErrorInterrupts": [
            "IFX_INLINE void IfxEray_enableAllErrorInterrupts(Ifx_ERAY *eray)"
        ],
        "IfxEray_unlockTestModeKey": [
            "IFX_INLINE void IfxEray_unlockTestModeKey(Ifx_ERAY *eray)"
        ],
        "IfxEray_enableWriteTestRegister": [
            "IFX_INLINE void IfxEray_enableWriteTestRegister(Ifx_ERAY *eray)"
        ],
        "IfxEray_enableExternalLoopback": [
            "IFX_INLINE void IfxEray_enableExternalLoopback(Ifx_ERAY *eray)"
        ],
        "IfxEray_unlockConfigurationKey": [
            "IFX_INLINE void IfxEray_unlockConfigurationKey(Ifx_ERAY *eray)"
        ],
        "IfxEray_configureSuc1Register": [
            "IFX_INLINE void IfxEray_configureSuc1Register(Ifx_ERAY *eray, uint32 configValue)"
        ],
        "IfxEray_setMacroTickValue": [
            "IFX_INLINE void IfxEray_setMacroTickValue(Ifx_ERAY *eray, uint32 tickValue)"
        ]
    },
    "IfxEvadc_Adc.h": {
        "IfxEvadc_Adc_addToQueue": [
            "IFX_INLINE void IfxEvadc_Adc_addToQueue(IfxEvadc_Adc_Channel *channel, IfxEvadc_RequestSource sourceType, uint32 options)"
        ],
        "IfxEvadc_Adc_clearQueue": [
            "IFX_INLINE void IfxEvadc_Adc_clearQueue(IfxEvadc_Adc_Group *group, IfxEvadc_RequestSource sourceType)"
        ],
        "IfxEvadc_Adc_configureWaitForReadMode": [
            "IFX_INLINE void IfxEvadc_Adc_configureWaitForReadMode(IfxEvadc_Adc_Channel *channel, boolean waitForReadMode)"
        ],
        "IfxEvadc_Adc_configureWaitForReadModeForGlobalResultRegister": [
            "IFX_INLINE void IfxEvadc_Adc_configureWaitForReadModeForGlobalResultRegister(IfxEvadc_Adc *evadc, boolean waitForReadMode)"
        ],
        "IfxEvadc_Adc_deInitModule": [
            "IFX_INLINE void IfxEvadc_Adc_deInitModule(IfxEvadc_Adc *evadc)"
        ],
        "IfxEvadc_Adc_getEvadcFromGroup": [
            "IFX_INLINE Ifx_EVADC *IfxEvadc_Adc_getEvadcFromGroup(const IfxEvadc_Adc_Group *group)"
        ],
        "IfxEvadc_Adc_getGlobalResult": [
            "IFX_INLINE Ifx_EVADC_GLOB_RES IfxEvadc_Adc_getGlobalResult(IfxEvadc_Adc *evadc)"
        ],
        "IfxEvadc_Adc_getGroupRegsFromGroup": [
            "IFX_INLINE Ifx_EVADC_G *IfxEvadc_Adc_getGroupRegsFromGroup(const IfxEvadc_Adc_Group *group)"
        ],
        "IfxEvadc_Adc_getGroupResult": [
            "IFX_INLINE void IfxEvadc_Adc_getGroupResult(IfxEvadc_Adc_Group *group, Ifx_EVADC_G_RES *results, uint32 resultOffset, uint32 numResults)"
        ],
        "IfxEvadc_Adc_getModuleConfig": [
            "IFX_INLINE void IfxEvadc_Adc_getModuleConfig(IfxEvadc_Adc *evadc, IfxEvadc_Adc_Config *config, Ifx_EVADC_G *evadcG)"
        ],
        "IfxEvadc_Adc_getQueueStatus": [
            "IFX_INLINE IfxEvadc_Status IfxEvadc_Adc_getQueueStatus(IfxEvadc_Adc_Group *group, IfxEvadc_RequestSource sourceType)"
        ],
        "IfxEvadc_Adc_getResult": [
            "IFX_INLINE Ifx_EVADC_G_RES IfxEvadc_Adc_getResult(IfxEvadc_Adc_Channel *channel)"
        ],
        "IfxEvadc_Adc_getResultBasedOnRequestSource": [
            "IFX_INLINE Ifx_EVADC_G_RES IfxEvadc_Adc_getResultBasedOnRequestSource(IfxEvadc_Adc_Group *group, IfxEvadc_ChannelId channel, IfxEvadc_RequestSource sourceType)"
        ],
        "IfxEvadc_Adc_startQueue": [
            "IFX_INLINE void IfxEvadc_Adc_startQueue(IfxEvadc_Adc_Group *group, IfxEvadc_RequestSource sourceType)"
        ]
    },
    "IfxEvadc.h": {
        "IfxEvadc_setAnalogClockSynchronizationDelay": [
            "IFX_INLINE void IfxEvadc_setAnalogClockSynchronizationDelay(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_AnalogClockSynchronizationDelay delay)"
        ],
        "IfxEvadc_calculateSampleTime": [
            "IFX_INLINE uint32 IfxEvadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)"
        ],
        "IfxEvadc_setCalibrationSampleTime": [
            "IFX_INLINE void IfxEvadc_setCalibrationSampleTime(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_CalibrationSampleTimeControl mode)"
        ],
        "IfxEvadc_clearAllResultRequests": [
            "IFX_INLINE void IfxEvadc_clearAllResultRequests(Ifx_EVADC_G *evadcG)"
        ],
        "IfxEvadc_clearChannelRequest": [
            "IFX_INLINE void IfxEvadc_clearChannelRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelId)"
        ],
        "IfxEvadc_clearQueue": [
            "IFX_INLINE void IfxEvadc_clearQueue(Ifx_EVADC_G *evadcG, boolean flushQueue, IfxEvadc_RequestSource sourceType)"
        ],
        "IfxEvadc_configureWaitForReadMode": [
            "IFX_INLINE void IfxEvadc_configureWaitForReadMode(Ifx_EVADC_G *group, uint32 resultIdx, boolean enabled)"
        ],
        "IfxEvadc_configureWaitForReadModeForGlobalResultRegister": [
            "IFX_INLINE void IfxEvadc_configureWaitForReadModeForGlobalResultRegister(Ifx_EVADC *evadc, boolean enabled)"
        ],
        "IfxEvadc_setFastCompareBoundaryFlagSwControl": [
            "IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagSwControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagSwControl control)"
        ],
        "IfxEvadc_setFastCompareBoundaryFlagInversion": [
            "IFX_INLINE void IfxEvadc_setFastCompareBoundaryFlagInversion(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagInversionControl mode)"
        ],
        "IfxEvadc_disableFastCompareBoundaryFlag": [
            "IFX_INLINE void IfxEvadc_disableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC)"
        ],
        "IfxEvadc_disableModule": [
            "IFX_INLINE void IfxEvadc_disableModule(Ifx_EVADC *evadc)"
        ],
        "IfxEvadc_disablePostCalibration": [
            "IFX_INLINE void IfxEvadc_disablePostCalibration(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, boolean enabled)"
        ],
        "IfxEvadc_enableFastCompareBoundaryFlag": [
            "IFX_INLINE void IfxEvadc_enableFastCompareBoundaryFlag(Ifx_EVADC_FC *evadcFC)"
        ],
        "IfxEvadc_enableFastCompareSampleSynchronization": [
            "IFX_INLINE void IfxEvadc_enableFastCompareSampleSynchronization(Ifx_EVADC_FC *evadcFC, IfxEvadc_SampleSynchronization mode)"
        ],
        "IfxEvadc_enableFifoMode": [
            "IFX_INLINE void IfxEvadc_enableFifoMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_FifoMode fifoMode)"
        ],
        "IfxEvadc_enableModule": [
            "IFX_INLINE void IfxEvadc_enableModule(Ifx_EVADC *evadc)"
        ],
        "IfxEvadc_enableServiceRequest": [
            "IFX_INLINE void IfxEvadc_enableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister)"
        ],
        "IfxEvadc_disableServiceRequest": [
            "IFX_INLINE void IfxEvadc_disableServiceRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister)"
        ],
        "IfxEvadc_setFastCompareReferencePrechargeDuration": [
            "IFX_INLINE void IfxEvadc_setFastCompareReferencePrechargeDuration(Ifx_EVADC_FC *evadcFC, IfxEvadc_ReferencePrechargeControl duration)"
        ],
        "IfxEvadc_getAdcAnalogFrequency": [
            "IFX_INLINE float32 IfxEvadc_getAdcAnalogFrequency(Ifx_EVADC_G *group)"
        ],
        "IfxEvadc_getAdcCalibrationActiveState": [
            "IFX_INLINE uint8 IfxEvadc_getAdcCalibrationActiveState(Ifx_EVADC *evadc, uint8 adcCalGroupNum)"
        ],
        "IfxEvadc_getAnalogFunctionConfiguration": [
            "IFX_INLINE Ifx_EVADC_G_ANCFG IfxEvadc_getAnalogFunctionConfiguration(Ifx_EVADC_G *evadcG)"
        ],
        "IfxEvadc_getChannelControlConfig": [
            "IFX_INLINE Ifx_EVADC_G_CHCTR IfxEvadc_getChannelControlConfig(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex)"
        ],
        "IfxEvadc_getChannelInputclass": [
            "IFX_INLINE IfxEvadc_InputClasses IfxEvadc_getChannelInputclass(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex)"
        ],
        "IfxEvadc_getChannelResultServiceRequestNodePointer0": [
            "IFX_INLINE Ifx_EVADC_G_REVNP0 IfxEvadc_getChannelResultServiceRequestNodePointer0(Ifx_EVADC_G *evadcG)"
        ],
        "IfxEvadc_getChannelResultServiceRequestNodePointer1": [
            "IFX_INLINE Ifx_EVADC_G_REVNP1 IfxEvadc_getChannelResultServiceRequestNodePointer1(Ifx_EVADC_G *evadcG)"
        ],
        "IfxEvadc_getChannelServiceRequestNodePointer0": [
            "IFX_INLINE Ifx_EVADC_G_CEVNP0 IfxEvadc_getChannelServiceRequestNodePointer0(Ifx_EVADC_G *evadcG)"
        ],
        "IfxEvadc_getChannelServiceRequestNodePointer1": [
            "IFX_INLINE Ifx_EVADC_G_CEVNP1 IfxEvadc_getChannelServiceRequestNodePointer1(Ifx_EVADC_G *evadcG)"
        ],
        "IfxEvadc_getEmuxGlobalConversionMode": [
            "IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getEmuxGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum)"
        ],
        "IfxEvadc_getEmuxGlobalSampleTime": [
            "IFX_INLINE float32 IfxEvadc_getEmuxGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency)"
        ],
        "IfxEvadc_getEmuxGroupConversionMode": [
            "IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getEmuxGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum)"
        ],
        "IfxEvadc_getEmuxGroupSampleTime": [
            "IFX_INLINE float32 IfxEvadc_getEmuxGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency)"
        ],
        "IfxEvadc_getFastCompareBoundaryFlagStatus": [
            "IFX_INLINE boolean IfxEvadc_getFastCompareBoundaryFlagStatus(Ifx_EVADC_FC *evadcFC)"
        ],
        "IfxEvadc_getFastCompareExternalTriggerLevelStatus": [
            "IFX_INLINE boolean IfxEvadc_getFastCompareExternalTriggerLevelStatus(Ifx_EVADC_FC *evadcFC)"
        ],
        "IfxEvadc_getFastCompareResultStatus": [
            "IFX_INLINE boolean IfxEvadc_getFastCompareResultStatus(Ifx_EVADC_FC *evadcFC)"
        ],
        "IfxEvadc_getGlobalConfigValue": [
            "IFX_INLINE Ifx_EVADC_GLOBCFG IfxEvadc_getGlobalConfigValue(Ifx_EVADC *evadc)"
        ],
        "IfxEvadc_getGlobalConversionMode": [
            "IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum)"
        ],
        "IfxEvadc_getGlobalResult": [
            "IFX_INLINE Ifx_EVADC_GLOB_RES IfxEvadc_getGlobalResult(Ifx_EVADC *evadc)"
        ],
        "IfxEvadc_getGlobalSampleTime": [
            "IFX_INLINE float32 IfxEvadc_getGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency)"
        ],
        "IfxEvadc_getGroupConversionMode": [
            "IFX_INLINE IfxEvadc_ChannelNoiseReduction IfxEvadc_getGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum)"
        ],
        "IfxEvadc_getGroupResult": [
            "IFX_INLINE void IfxEvadc_getGroupResult(Ifx_EVADC_G *group, Ifx_EVADC_G_RES *results, uint32 resultOffset, uint32 numResults)"
        ],
        "IfxEvadc_getGroupSampleTime": [
            "IFX_INLINE float32 IfxEvadc_getGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency)"
        ],
        "IfxEvadc_getMasterIndex": [
            "IFX_INLINE uint8 IfxEvadc_getMasterIndex(Ifx_EVADC_G *evadcG)"
        ],
        "IfxEvadc_getResult": [
            "IFX_INLINE Ifx_EVADC_G_RES IfxEvadc_getResult(Ifx_EVADC_G *group, uint32 resultIdx)"
        ],
        "IfxEvadc_getSrcAddress": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxEvadc_getSrcAddress(IfxEvadc_GroupId group, IfxEvadc_SrcNr index)"
        ],
        "IfxEvadc_getStartupCalibrationStatus": [
            "IFX_INLINE boolean IfxEvadc_getStartupCalibrationStatus(Ifx_EVADC *evadc)"
        ],
        "IfxEvadc_selectIdlePrechargeLevel": [
            "IFX_INLINE void IfxEvadc_selectIdlePrechargeLevel(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_IdlePrecharge mode)"
        ],
        "IfxEvadc_initEmuxPin": [
            "IFX_INLINE void IfxEvadc_initEmuxPin(const IfxEvadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxEvadc_initGxBflPin": [
            "IFX_INLINE void IfxEvadc_initGxBflPin(const IfxEvadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxEvadc_initialiseAdcConverterClock": [
            "IFX_INLINE void IfxEvadc_initialiseAdcConverterClock(Ifx_EVADC *evadc, Ifx_EVADC_G *evadcG, IfxEvadc_ClockDividerFactor converterClockDivider)"
        ],
        "IfxEvadc_initiateStartupCalibration": [
            "IFX_INLINE void IfxEvadc_initiateStartupCalibration(Ifx_EVADC *evadc)"
        ],
        "IfxEvadc_enableInputBuffer": [
            "IFX_INLINE void IfxEvadc_enableInputBuffer(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group)"
        ],
        "IfxEvadc_isFastCompareNewResultAvailable": [
            "IFX_INLINE boolean IfxEvadc_isFastCompareNewResultAvailable(Ifx_EVADC_FC *evadcFC)"
        ],
        "IfxEvadc_isModuleSuspended": [
            "IFX_INLINE boolean IfxEvadc_isModuleSuspended(Ifx_EVADC *evadc)"
        ],
        "IfxEvadc_setReferencePrechargeDuration": [
            "IFX_INLINE void IfxEvadc_setReferencePrechargeDuration(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_ReferencePrechargeControl duration)"
        ],
        "IfxEvadc_enableReferencePrecharge": [
            "IFX_INLINE void IfxEvadc_enableReferencePrecharge(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group)"
        ],
        "IfxEvadc_resetGroup": [
            "IFX_INLINE void IfxEvadc_resetGroup(Ifx_EVADC_G *evadcG)"
        ],
        "IfxEvadc_setSampleSynchronizationMode": [
            "IFX_INLINE void IfxEvadc_setSampleSynchronizationMode(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_SampleSynchronization mode)"
        ],
        "IfxEvadc_selectDoubleClockForMSBConversion": [
            "IFX_INLINE void IfxEvadc_selectDoubleClockForMSBConversion(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group, IfxEvadc_MsbConversionTime mode)"
        ],
        "IfxEvadc_selectFastCompareBoundaryFlagActivationMode": [
            "IFX_INLINE void IfxEvadc_selectFastCompareBoundaryFlagActivationMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagActivationMode mode)"
        ],
        "IfxEvadc_selectFastCompareBoundaryFlagNodePointer": [
            "IFX_INLINE void IfxEvadc_selectFastCompareBoundaryFlagNodePointer(Ifx_EVADC_FC *evadcFC, IfxEvadc_BoundaryFlagNodePointer nodePointer)"
        ],
        "IfxEvadc_setAnalogConvertControl": [
            "IFX_INLINE void IfxEvadc_setAnalogConvertControl(Ifx_EVADC_G *evadcG, IfxEvadc_AnalogConverterMode analogConverterMode)"
        ],
        "IfxEvadc_setAnalogInputPrechargeControlEMUX": [
            "IFX_INLINE void IfxEvadc_setAnalogInputPrechargeControlEMUX(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_AnalogInputPrechargeControl mode)"
        ],
        "IfxEvadc_setAnalogInputPrechargeControlStandard": [
            "IFX_INLINE void IfxEvadc_setAnalogInputPrechargeControlStandard(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_AnalogInputPrechargeControl mode)"
        ],
        "IfxEvadc_setBoundaryMode": [
            "IFX_INLINE void IfxEvadc_setBoundaryMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_BoundaryExtension boundaryMode)"
        ],
        "IfxEvadc_setChannelEventNodePointer0": [
            "IFX_INLINE void IfxEvadc_setChannelEventNodePointer0(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr channelSrcNr, IfxEvadc_ChannelId channel)"
        ],
        "IfxEvadc_setChannelEventNodePointer1": [
            "IFX_INLINE void IfxEvadc_setChannelEventNodePointer1(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr channelSrcNr, IfxEvadc_ChannelId channel)"
        ],
        "IfxEvadc_setChannelInputClass": [
            "IFX_INLINE void IfxEvadc_setChannelInputClass(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_InputClasses inputClass)"
        ],
        "IfxEvadc_setChannelLimitCheckMode": [
            "IFX_INLINE void IfxEvadc_setChannelLimitCheckMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_LimitCheck limitCheck)"
        ],
        "IfxEvadc_setDataModificationMode": [
            "IFX_INLINE void IfxEvadc_setDataModificationMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_DataModificationMode mode)"
        ],
        "IfxEvadc_setDataReductionControlMode": [
            "IFX_INLINE void IfxEvadc_setDataReductionControlMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, uint32 mode)"
        ],
        "IfxEvadc_setEmuxGlobalConversionMode": [
            "IFX_INLINE void IfxEvadc_setEmuxGlobalConversionMode(Ifx_EVADC *evadc, uint8 inputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode)"
        ],
        "IfxEvadc_setEmuxGlobalSampleTime": [
            "IFX_INLINE void IfxEvadc_setEmuxGlobalSampleTime(Ifx_EVADC *evadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime)"
        ],
        "IfxEvadc_setEmuxGroupConversionMode": [
            "IFX_INLINE void IfxEvadc_setEmuxGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode)"
        ],
        "IfxEvadc_setEmuxGroupSampletime": [
            "IFX_INLINE void IfxEvadc_setEmuxGroupSampletime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime)"
        ],
        "IfxEvadc_setEmuxInterfaceForGroup": [
            "IFX_INLINE void IfxEvadc_setEmuxInterfaceForGroup(Ifx_EVADC *evadc, IfxEvadc_EmuxInterface emuxInterface, IfxEvadc_GroupId group)"
        ],
        "IfxEvadc_setFastCompareAnalogClockSynchronizationDelay": [
            "IFX_INLINE void IfxEvadc_setFastCompareAnalogClockSynchronizationDelay(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareAnalogClockSynchronizationDelay delay)"
        ],
        "IfxEvadc_setFastCompareAnalogConverter": [
            "IFX_INLINE void IfxEvadc_setFastCompareAnalogConverter(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareAnalogConverterControl mode)"
        ],
        "IfxEvadc_setFastCompareAnalogInputPrechargeControl": [
            "IFX_INLINE void IfxEvadc_setFastCompareAnalogInputPrechargeControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_AnalogInputPrechargeControl mode)"
        ],
        "IfxEvadc_setFastCompareAnalogInternalClockDivider": [
            "IFX_INLINE void IfxEvadc_setFastCompareAnalogInternalClockDivider(Ifx_EVADC_FC *evadcFC, IfxEvadc_ClockDividerFactor divider)"
        ],
        "IfxEvadc_setFastCompareAutomaticUpdateMode": [
            "IFX_INLINE void IfxEvadc_setFastCompareAutomaticUpdateMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareAutomaticUpdate mode)"
        ],
        "IfxEvadc_setFastCompareChannelEventMode": [
            "IFX_INLINE void IfxEvadc_setFastCompareChannelEventMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_ChannelEventMode mode)"
        ],
        "IfxEvadc_setFastCompareExternalTriggerPolarity": [
            "IFX_INLINE void IfxEvadc_setFastCompareExternalTriggerPolarity(Ifx_EVADC_FC *evadcFC, IfxEvadc_ExternalTriggerPolarity mode)"
        ],
        "IfxEvadc_setFastCompareGateOperatingMode": [
            "IFX_INLINE void IfxEvadc_setFastCompareGateOperatingMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_GateOperatingMode mode)"
        ],
        "IfxEvadc_setFastCompareRampDirection": [
            "IFX_INLINE void IfxEvadc_setFastCompareRampDirection(Ifx_EVADC_FC *evadcFC, IfxEvadc_RampDirection rampDirection)"
        ],
        "IfxEvadc_setFastCompareReferenceValue": [
            "IFX_INLINE void IfxEvadc_setFastCompareReferenceValue(Ifx_EVADC_FC *evadcFC, uint16 referenceValue)"
        ],
        "IfxEvadc_setFastCompareRunControl": [
            "IFX_INLINE void IfxEvadc_setFastCompareRunControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareRunControl mode)"
        ],
        "IfxEvadc_setFastCompareRunRampControl": [
            "IFX_INLINE void IfxEvadc_setFastCompareRunRampControl(Ifx_EVADC_FC *evadcFC, IfxEvadc_RampRunControl rampStartMode)"
        ],
        "IfxEvadc_setFastCompareSampleTimeControl": [
            "IFX_INLINE void IfxEvadc_setFastCompareSampleTimeControl(Ifx_EVADC_FC *evadcFC, uint8 additionalCycles)"
        ],
        "IfxEvadc_setFastCompareServiceRequestGeneration": [
            "IFX_INLINE void IfxEvadc_setFastCompareServiceRequestGeneration(Ifx_EVADC_FC *evadcFC, IfxEvadc_FastCompareServiceRequestGeneration mode)"
        ],
        "IfxEvadc_setFastCompareTriggerInterval": [
            "IFX_INLINE void IfxEvadc_setFastCompareTriggerInterval(Ifx_EVADC_FC *evadcFC, uint8 interval)"
        ],
        "IfxEvadc_setFastCompareTriggerOperatingMode": [
            "IFX_INLINE void IfxEvadc_setFastCompareTriggerOperatingMode(Ifx_EVADC_FC *evadcFC, IfxEvadc_TriggerOperatingMode mode)"
        ],
        "IfxEvadc_setFifoMode": [
            "IFX_INLINE void IfxEvadc_setFifoMode(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelResult resultRegister, IfxEvadc_FifoMode mode)"
        ],
        "IfxEvadc_setGlobalConversionMode": [
            "IFX_INLINE void IfxEvadc_setGlobalConversionMode(Ifx_EVADC *evadc, uint8 InputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode)"
        ],
        "IfxEvadc_setGlobalSampleTime": [
            "IFX_INLINE void IfxEvadc_setGlobalSampleTime(Ifx_EVADC *evadc, uint8 groupInputClassNum, float32 analogFrequency, float32 sampleTime)"
        ],
        "IfxEvadc_setGroupConversionMode": [
            "IFX_INLINE void IfxEvadc_setGroupConversionMode(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_ChannelNoiseReduction conversionMode)"
        ],
        "IfxEvadc_setGroupConversionModeEMUX": [
            "IFX_INLINE void IfxEvadc_setGroupConversionModeEMUX(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_ChannelNoiseReductionEMUX conversionMode)"
        ],
        "IfxEvadc_setGroupSampleTime": [
            "IFX_INLINE void IfxEvadc_setGroupSampleTime(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime)"
        ],
        "IfxEvadc_setGroupSampleTimeEMUX": [
            "IFX_INLINE void IfxEvadc_setGroupSampleTimeEMUX(Ifx_EVADC_G *evadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime)"
        ],
        "IfxEvadc_setLowerBoundary": [
            "IFX_INLINE void IfxEvadc_setLowerBoundary(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_BoundarySelection lowerBoundary)"
        ],
        "IfxEvadc_setMasterIndex": [
            "IFX_INLINE void IfxEvadc_setMasterIndex(Ifx_EVADC_G *evadcG, uint8 masterIndex)"
        ],
        "IfxEvadc_setReferenceInput": [
            "IFX_INLINE void IfxEvadc_setReferenceInput(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_ChannelReference reference)"
        ],
        "IfxEvadc_setResultNodeEventPointer0": [
            "IFX_INLINE void IfxEvadc_setResultNodeEventPointer0(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr resultSrcNr, IfxEvadc_ChannelResult resultRegister)"
        ],
        "IfxEvadc_setResultNodeEventPointer1": [
            "IFX_INLINE void IfxEvadc_setResultNodeEventPointer1(Ifx_EVADC_G *evadcG, IfxEvadc_SrcNr resultSrcNr, IfxEvadc_ChannelResult resultRegister)"
        ],
        "IfxEvadc_setResultPosition": [
            "IFX_INLINE void IfxEvadc_setResultPosition(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, boolean rightAlignedStorage)"
        ],
        "IfxEvadc_setSleepMode": [
            "IFX_INLINE void IfxEvadc_setSleepMode(Ifx_EVADC *evadc, IfxEvadc_SleepMode mode)"
        ],
        "IfxEvadc_setSuspendMode": [
            "IFX_INLINE void IfxEvadc_setSuspendMode(Ifx_EVADC *evadc, IfxEvadc_SuspendMode mode)"
        ],
        "IfxEvadc_setSyncRequest": [
            "IFX_INLINE void IfxEvadc_setSyncRequest(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, boolean synchonize)"
        ],
        "IfxEvadc_setUpperBoundary": [
            "IFX_INLINE void IfxEvadc_setUpperBoundary(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_BoundarySelection upperBoundary)"
        ],
        "IfxEvadc_spreadEarlySamplePointEMUXConversions": [
            "IFX_INLINE void IfxEvadc_spreadEarlySamplePointEMUXConversions(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_SpreadEarlySamplePointEMUXConversionsMode mode)"
        ],
        "IfxEvadc_spreadEarlySamplePointStandardConversions": [
            "IFX_INLINE void IfxEvadc_spreadEarlySamplePointStandardConversions(Ifx_EVADC_G *evadcG, uint8 inputClassNum, IfxEvadc_SpreadEarlySamplePointStandardConversionsMode mode)"
        ],
        "IfxEvadc_startQueue": [
            "IFX_INLINE void IfxEvadc_startQueue(Ifx_EVADC_G *group, IfxEvadc_RequestSource sourceType)"
        ],
        "IfxEvadc_storeGroupResult": [
            "IFX_INLINE void IfxEvadc_storeGroupResult(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channelIndex, IfxEvadc_ChannelResult resultRegister)"
        ],
        "IfxEvadc_disableReferencePrecharge": [
            "IFX_INLINE void IfxEvadc_disableReferencePrecharge(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group)"
        ],
        "IfxEvadc_disableInputBuffer": [
            "IFX_INLINE void IfxEvadc_disableInputBuffer(Ifx_EVADC_G *evadcG, IfxEvadc_GroupId group)"
        ],
        "IfxEvadc_isModuleEnabled": [
            "IFX_INLINE boolean IfxEvadc_isModuleEnabled(Ifx_EVADC *evadc)"
        ],
        "IfxEvadc_enableStartupCalibration": [
            "IFX_INLINE void IfxEvadc_enableStartupCalibration(Ifx_EVADC *evadc)"
        ],
        "IfxEvadc_selectQueueGatingMode": [
            "IFX_INLINE void IfxEvadc_selectQueueGatingMode(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource queue, IfxEvadc_GatingMode gatingMode)"
        ],
        "IfxEvadc_setChannelRequest": [
            "IFX_INLINE void IfxEvadc_setChannelRequest(Ifx_EVADC_G *evadcG, IfxEvadc_RequestSource queue, IfxEvadc_ChannelId channel)"
        ],
        "IfxEvadc_configureIclass": [
            "IFX_INLINE void IfxEvadc_configureIclass(Ifx_EVADC_G *evadcG, uint8 inputClassNum, uint32 value)"
        ],
        "IfxEvadc_getResultRegisterAddress": [
            "IFX_INLINE volatile uint32 *IfxEvadc_getResultRegisterAddress(Ifx_EVADC_G *evadcG, IfxEvadc_ChannelId channel)"
        ]
    },
    "IfxFce_Crc.h": {},
    "IfxFce.h": {
        "IfxFce_clearCrcErrorFlags": [
            "IFX_INLINE void IfxFce_clearCrcErrorFlags(Ifx_FCE *fce, IfxFce_CrcChannel channel)"
        ],
        "IfxFce_disableModule": [
            "IFX_INLINE void IfxFce_disableModule(Ifx_FCE *fce)"
        ],
        "IfxFce_enableModule": [
            "IFX_INLINE void IfxFce_enableModule(Ifx_FCE *fce)"
        ],
        "IfxFce_getCrcInterruptStatus": [
            "IFX_INLINE Ifx_FCE_IN_STS IfxFce_getCrcInterruptStatus(Ifx_FCE *fce, IfxFce_CrcChannel channel)"
        ],
        "IfxFce_getSrcPointer": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxFce_getSrcPointer(Ifx_FCE *fce)"
        ],
        "IfxFce_setChannelCrcLength": [
            "IFX_INLINE void IfxFce_setChannelCrcLength(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 crcLength)"
        ],
        "IfxFce_setCrcstartValue": [
            "IFX_INLINE void IfxFce_setCrcstartValue(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 crcStartValue)"
        ],
        "IfxFce_setExpectedCrc": [
            "IFX_INLINE void IfxFce_setExpectedCrc(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 expectedCrc)"
        ]
    },
    "IfxFlash.h": {
        "IfxFlash_clearStatus": [
            "IFX_INLINE void IfxFlash_clearStatus(uint32 flash)"
        ],
        "IfxFlash_enterPageMode": [
            "IFX_INLINE uint8 IfxFlash_enterPageMode(uint32 pageAddr)"
        ],
        "IfxFlash_eraseMultipleSectors": [
            "IFX_INLINE void IfxFlash_eraseMultipleSectors(uint32 sectorAddr, uint32 numSector)"
        ],
        "IfxFlash_eraseSector": [
            "IFX_INLINE void IfxFlash_eraseSector(uint32 sectorAddr)"
        ],
        "IfxFlash_eraseVerifyMultipleSectors": [
            "IFX_INLINE void IfxFlash_eraseVerifyMultipleSectors(uint32 sectorAddr, uint32 numSector)"
        ],
        "IfxFlash_eraseVerifySector": [
            "IFX_INLINE void IfxFlash_eraseVerifySector(uint32 sectorAddr)"
        ],
        "IfxFlash_loadPage": [
            "IFX_INLINE void IfxFlash_loadPage(uint32 pageAddr, uint32 wordL, uint32 wordU)"
        ],
        "IfxFlash_loadPage2X32": [
            "IFX_INLINE void IfxFlash_loadPage2X32(uint32 pageAddr, uint32 wordL, uint32 wordU)"
        ],
        "IfxFlash_resetToRead": [
            "IFX_INLINE void IfxFlash_resetToRead(uint32 flash)"
        ],
        "IfxFlash_resumeProtection": [
            "IFX_INLINE void IfxFlash_resumeProtection(uint32 flash)"
        ],
        "IfxFlash_suspendResumeMultipleSectors": [
            "IFX_INLINE void IfxFlash_suspendResumeMultipleSectors(uint32 sectorAddr, uint32 numSector)"
        ],
        "IfxFlash_suspendResumeSector": [
            "IFX_INLINE void IfxFlash_suspendResumeSector(uint32 sectorAddr)"
        ],
        "IfxFlash_userContentCount": [
            "IFX_INLINE void IfxFlash_userContentCount(uint32 wordAddr)"
        ],
        "IfxFlash_userMarginCount": [
            "IFX_INLINE void IfxFlash_userMarginCount(uint32 wordAddr)"
        ],
        "IfxFlash_userVthCount": [
            "IFX_INLINE void IfxFlash_userVthCount(uint32 wordAddr)"
        ],
        "IfxFlash_verifyErasedPage": [
            "IFX_INLINE void IfxFlash_verifyErasedPage(uint32 pageAddr)"
        ],
        "IfxFlash_verifyErasedWordLine": [
            "IFX_INLINE void IfxFlash_verifyErasedWordLine(uint32 wordLineAddr)"
        ],
        "IfxFlash_waitUnbusy": [
            "IFX_INLINE uint8 IfxFlash_waitUnbusy(uint32 flash, IfxFlash_FlashType flashType)"
        ],
        "IfxFlash_writeBurst": [
            "IFX_INLINE void IfxFlash_writeBurst(uint32 pageAddr)"
        ],
        "IfxFlash_writeBurstOnce": [
            "IFX_INLINE void IfxFlash_writeBurstOnce(uint32 pageAddr)"
        ],
        "IfxFlash_writePage": [
            "IFX_INLINE void IfxFlash_writePage(uint32 pageAddr)"
        ],
        "IfxFlash_writePageOnce": [
            "IFX_INLINE void IfxFlash_writePageOnce(uint32 pageAddr)"
        ],
        "IfxFlash_waitUnbusyAll": [
            "IFX_INLINE boolean IfxFlash_waitUnbusyAll(void)"
        ],
        "IfxFlash_enterCrankingMode": [
            "IFX_INLINE void IfxFlash_enterCrankingMode(void)"
        ],
        "IfxFlash_exitCrankingMode": [
            "IFX_INLINE void IfxFlash_exitCrankingMode(void)"
        ],
        "IfxFlash_enterDemandMode": [
            "IFX_INLINE void IfxFlash_enterDemandMode(void)"
        ],
        "IfxFlash_exitDemandMode": [
            "IFX_INLINE void IfxFlash_exitDemandMode(void)"
        ],
        "IfxFlash_enterDynamicIdleMode": [
            "IFX_INLINE void IfxFlash_enterDynamicIdleMode(void)"
        ],
        "IfxFlash_exitDynamicIdleMode": [
            "IFX_INLINE void IfxFlash_exitDynamicIdleMode(void)"
        ],
        "IfxFlash_isCrankingMode": [
            "IFX_INLINE boolean IfxFlash_isCrankingMode(void)"
        ],
        "IfxFlash_isDemandMode": [
            "IFX_INLINE boolean IfxFlash_isDemandMode(void)"
        ],
        "IfxFlash_isDynamicIdleMode": [
            "IFX_INLINE boolean IfxFlash_isDynamicIdleMode(void)"
        ],
        "IfxFlash_replaceLogicalSector": [
            "IFX_INLINE void IfxFlash_replaceLogicalSector(uint32 pageAddr)"
        ]
    },
    "IfxGeth_Eth.h": {
        "IfxGeth_Eth_getActualRxDescriptor": [
            "IFX_INLINE volatile IfxGeth_RxDescr *IfxGeth_Eth_getActualRxDescriptor(IfxGeth_Eth *geth, IfxGeth_RxDmaChannel channelId)"
        ],
        "IfxGeth_Eth_getActualTxDescriptor": [
            "IFX_INLINE volatile IfxGeth_TxDescr *IfxGeth_Eth_getActualTxDescriptor(IfxGeth_Eth *geth, IfxGeth_TxDmaChannel channelId)"
        ],
        "IfxGeth_Eth_getBaseRxDescriptor": [
            "IFX_INLINE volatile IfxGeth_RxDescr *IfxGeth_Eth_getBaseRxDescriptor(IfxGeth_Eth *geth, IfxGeth_RxDmaChannel channelId)"
        ],
        "IfxGeth_Eth_getBaseTxDescriptor": [
            "IFX_INLINE volatile IfxGeth_TxDescr *IfxGeth_Eth_getBaseTxDescriptor(IfxGeth_Eth *geth, IfxGeth_TxDmaChannel channelId)"
        ],
        "IfxGeth_Eth_isRxDataAvailable": [
            "IFX_INLINE boolean IfxGeth_Eth_isRxDataAvailable(IfxGeth_Eth *geth, IfxGeth_RxDmaChannel channelId)"
        ],
        "IfxGeth_Eth_waitTransmitBuffer": [
            "IFX_INLINE void *IfxGeth_Eth_waitTransmitBuffer(IfxGeth_Eth *geth, IfxGeth_TxDmaChannel channelId)"
        ]
    },
    "IfxGeth.h": {
        "IfxGeth_dma_applySoftwareReset": [
            "IFX_INLINE void IfxGeth_dma_applySoftwareReset(Ifx_GETH *gethSFR)"
        ],
        "IfxGeth_dma_clearAllInterruptFlags": [
            "IFX_INLINE void IfxGeth_dma_clearAllInterruptFlags(Ifx_GETH *gethSFR, IfxGeth_DmaChannel channelId)"
        ],
        "IfxGeth_dma_clearInterruptFlag": [
            "IFX_INLINE void IfxGeth_dma_clearInterruptFlag(Ifx_GETH *gethSFR, IfxGeth_DmaChannel channelId, IfxGeth_DmaInterruptFlag flag)"
        ],
        "IfxGeth_dma_disableInterrupt": [
            "IFX_INLINE void IfxGeth_dma_disableInterrupt(Ifx_GETH *gethSFR, IfxGeth_DmaChannel channelId, IfxGeth_DmaInterruptFlag flag)"
        ],
        "IfxGeth_dma_enableInterrupt": [
            "IFX_INLINE void IfxGeth_dma_enableInterrupt(Ifx_GETH *gethSFR, IfxGeth_DmaChannel channelId, IfxGeth_DmaInterruptFlag flag)"
        ],
        "IfxGeth_dma_isInterruptFlagSet": [
            "IFX_INLINE boolean IfxGeth_dma_isInterruptFlagSet(Ifx_GETH *gethSFR, IfxGeth_DmaChannel channelId, IfxGeth_DmaInterruptFlag flag)"
        ],
        "IfxGeth_dma_isSoftwareResetDone": [
            "IFX_INLINE boolean IfxGeth_dma_isSoftwareResetDone(Ifx_GETH *gethSFR)"
        ],
        "IfxGeth_dma_setAddressAlignedBeats": [
            "IFX_INLINE void IfxGeth_dma_setAddressAlignedBeats(Ifx_GETH *gethSFR, boolean enabled)"
        ],
        "IfxGeth_dma_setFixedBurst": [
            "IFX_INLINE void IfxGeth_dma_setFixedBurst(Ifx_GETH *gethSFR, boolean enabled)"
        ],
        "IfxGeth_dma_setMixedBurst": [
            "IFX_INLINE void IfxGeth_dma_setMixedBurst(Ifx_GETH *gethSFR, boolean enabled)"
        ],
        "IfxGeth_dma_setRxBufferSize": [
            "IFX_INLINE void IfxGeth_dma_setRxBufferSize(Ifx_GETH *gethSFR, IfxGeth_RxDmaChannel channel, uint16 size)"
        ],
        "IfxGeth_dma_setRxDescriptorListAddress": [
            "IFX_INLINE void IfxGeth_dma_setRxDescriptorListAddress(Ifx_GETH *gethSFR, IfxGeth_RxDmaChannel channel, uint32 address)"
        ],
        "IfxGeth_dma_setRxDescriptorRingLength": [
            "IFX_INLINE void IfxGeth_dma_setRxDescriptorRingLength(Ifx_GETH *gethSFR, IfxGeth_RxDmaChannel channel, uint32 length)"
        ],
        "IfxGeth_dma_setRxDescriptorTailPointer": [
            "IFX_INLINE void IfxGeth_dma_setRxDescriptorTailPointer(Ifx_GETH *gethSFR, IfxGeth_RxDmaChannel channel, uint32 address)"
        ],
        "IfxGeth_dma_setRxMaxBurstLength": [
            "IFX_INLINE void IfxGeth_dma_setRxMaxBurstLength(Ifx_GETH *gethSFR, IfxGeth_RxDmaChannel channel, IfxGeth_DmaBurstLength length)"
        ],
        "IfxGeth_dma_setTxDescriptorListAddress": [
            "IFX_INLINE void IfxGeth_dma_setTxDescriptorListAddress(Ifx_GETH *gethSFR, IfxGeth_TxDmaChannel channel, uint32 address)"
        ],
        "IfxGeth_dma_setTxDescriptorRingLength": [
            "IFX_INLINE void IfxGeth_dma_setTxDescriptorRingLength(Ifx_GETH *gethSFR, IfxGeth_TxDmaChannel channel, uint32 length)"
        ],
        "IfxGeth_dma_setTxDescriptorTailPointer": [
            "IFX_INLINE void IfxGeth_dma_setTxDescriptorTailPointer(Ifx_GETH *gethSFR, IfxGeth_TxDmaChannel channel, uint32 address)"
        ],
        "IfxGeth_dma_setTxMaxBurstLength": [
            "IFX_INLINE void IfxGeth_dma_setTxMaxBurstLength(Ifx_GETH *gethSFR, IfxGeth_TxDmaChannel channel, IfxGeth_DmaBurstLength length)"
        ],
        "IfxGeth_dma_startReceiver": [
            "IFX_INLINE void IfxGeth_dma_startReceiver(Ifx_GETH *gethSFR, IfxGeth_RxDmaChannel channel)"
        ],
        "IfxGeth_dma_startTransmitter": [
            "IFX_INLINE void IfxGeth_dma_startTransmitter(Ifx_GETH *gethSFR, IfxGeth_TxDmaChannel channel)"
        ],
        "IfxGeth_dma_stopTransmitter": [
            "IFX_INLINE void IfxGeth_dma_stopTransmitter(Ifx_GETH *gethSFR, IfxGeth_TxDmaChannel channel)"
        ],
        "IfxGeth_isModuleEnabled": [
            "IFX_INLINE boolean IfxGeth_isModuleEnabled(Ifx_GETH *gethSFR)"
        ],
        "IfxGeth_mac_disableReceiver": [
            "IFX_INLINE void IfxGeth_mac_disableReceiver(Ifx_GETH *gethSFR)"
        ],
        "IfxGeth_mac_disableTransmitter": [
            "IFX_INLINE void IfxGeth_mac_disableTransmitter(Ifx_GETH *gethSFR)"
        ],
        "IfxGeth_mac_enableReceiver": [
            "IFX_INLINE void IfxGeth_mac_enableReceiver(Ifx_GETH *gethSFR)"
        ],
        "IfxGeth_mac_enableTransmitter": [
            "IFX_INLINE void IfxGeth_mac_enableTransmitter(Ifx_GETH *gethSFR)"
        ],
        "IfxGeth_mac_setAllMulticastPassing": [
            "IFX_INLINE void IfxGeth_mac_setAllMulticastPassing(Ifx_GETH *gethSFR, boolean enabled)"
        ],
        "IfxGeth_mac_setCrcChecking": [
            "IFX_INLINE void IfxGeth_mac_setCrcChecking(Ifx_GETH *gethSFR, boolean enabled)"
        ],
        "IfxGeth_mac_setCrcStripping": [
            "IFX_INLINE void IfxGeth_mac_setCrcStripping(Ifx_GETH *gethSFR, boolean acsEnabled, boolean cstEnabled)"
        ],
        "IfxGeth_mac_setDuplexMode": [
            "IFX_INLINE void IfxGeth_mac_setDuplexMode(Ifx_GETH *gethSFR, IfxGeth_DuplexMode mode)"
        ],
        "IfxGeth_mac_setLoopbackMode": [
            "IFX_INLINE void IfxGeth_mac_setLoopbackMode(Ifx_GETH *gethSFR, IfxGeth_LoopbackMode mode)"
        ],
        "IfxGeth_mac_setPreambleLength": [
            "IFX_INLINE void IfxGeth_mac_setPreambleLength(Ifx_GETH *gethSFR, IfxGeth_PreambleLength length)"
        ],
        "IfxGeth_mac_setPromiscuousMode": [
            "IFX_INLINE void IfxGeth_mac_setPromiscuousMode(Ifx_GETH *gethSFR, boolean enabled)"
        ],
        "IfxGeth_mtl_enableRxQueue": [
            "IFX_INLINE void IfxGeth_mtl_enableRxQueue(Ifx_GETH *gethSFR, IfxGeth_RxMtlQueue queueId)"
        ],
        "IfxGeth_mtl_setRxArbitrationAlgorithm": [
            "IFX_INLINE void IfxGeth_mtl_setRxArbitrationAlgorithm(Ifx_GETH *gethSFR, IfxGeth_RxArbitrationAlgorithm arbitrationAlgorithm)"
        ],
        "IfxGeth_mtl_setRxQueueDmaChannelMapping": [
            "IFX_INLINE void IfxGeth_mtl_setRxQueueDmaChannelMapping(Ifx_GETH *gethSFR, IfxGeth_RxMtlQueue queueId, IfxGeth_RxDmaChannel dmaChannel)"
        ],
        "IfxGeth_mtl_setRxQueueForDaBasedDmaChannel": [
            "IFX_INLINE void IfxGeth_mtl_setRxQueueForDaBasedDmaChannel(Ifx_GETH *gethSFR, IfxGeth_RxMtlQueue queueId, boolean enabled)"
        ],
        "IfxGeth_mtl_setTxSchedulingAlgorithm": [
            "IFX_INLINE void IfxGeth_mtl_setTxSchedulingAlgorithm(Ifx_GETH *gethSFR, IfxGeth_TxSchedulingAlgorithm schedulingAlgorithm)"
        ],
        "IfxGeth_setPhyInterfaceMode": [
            "IFX_INLINE void IfxGeth_setPhyInterfaceMode(Ifx_GETH *gethSFR, IfxGeth_PhyInterfaceMode mode)"
        ],
        "IfxGeth_mac_setVlanPriorityQueueRouting": [
            "IFX_INLINE void IfxGeth_mac_setVlanPriorityQueueRouting(Ifx_GETH *gethSFR, IfxGeth_RxDmaChannel channel, uint8 priorities)"
        ],
        "IfxGeth_mtl_enableUnicastFilterFailQueuing": [
            "IFX_INLINE void IfxGeth_mtl_enableUnicastFilterFailQueuing(Ifx_GETH *gethSFR, IfxGeth_RxMtlQueue queueId)"
        ],
        "IfxGeth_mtl_disableUnicastFilterFailQueuing": [
            "IFX_INLINE void IfxGeth_mtl_disableUnicastFilterFailQueuing(Ifx_GETH *gethSFR)"
        ],
        "IfxGeth_mtl_enableMulticastFilterFailQueuing": [
            "IFX_INLINE void IfxGeth_mtl_enableMulticastFilterFailQueuing(Ifx_GETH *gethSFR, IfxGeth_RxMtlQueue queueId)"
        ],
        "IfxGeth_mtl_disableMulticastFilterFailQueuing": [
            "IFX_INLINE void IfxGeth_mtl_disableMulticastFilterFailQueuing(Ifx_GETH *gethSFR)"
        ],
        "IfxGeth_mtl_enableVlanFilterFailQueuing": [
            "IFX_INLINE void IfxGeth_mtl_enableVlanFilterFailQueuing(Ifx_GETH *gethSFR, IfxGeth_RxMtlQueue queueId)"
        ],
        "IfxGeth_mtl_disableVlanFilterFailQueuing": [
            "IFX_INLINE void IfxGeth_mtl_disableVlanFilterFailQueuing(Ifx_GETH *gethSFR)"
        ]
    },
    "IfxGpt12_IncrEnc.h": {},
    "IfxGpt12.h": {
        "IfxGpt12_T2_getMode": [
            "IFX_INLINE IfxGpt12_Mode IfxGpt12_T2_getMode(Ifx_GPT12 *gpt12)"
        ],
        "IfxGpt12_T2_getSrc": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxGpt12_T2_getSrc(Ifx_GPT12 *gpt12)"
        ],
        "IfxGpt12_T2_getTimerValue": [
            "IFX_INLINE uint16 IfxGpt12_T2_getTimerValue(Ifx_GPT12 *gpt12)"
        ],
        "IfxGpt12_T2_run": [
            "IFX_INLINE void IfxGpt12_T2_run(Ifx_GPT12 *gpt12, IfxGpt12_TimerRun runTimer)"
        ],
        "IfxGpt12_T2_setCaptureInputMode": [
            "IFX_INLINE void IfxGpt12_T2_setCaptureInputMode(Ifx_GPT12 *gpt12, IfxGpt12_CaptureInputMode inputMode)"
        ],
        "IfxGpt12_T2_setCounterInputMode": [
            "IFX_INLINE void IfxGpt12_T2_setCounterInputMode(Ifx_GPT12 *gpt12, IfxGpt12_CounterInputMode inputMode)"
        ],
        "IfxGpt12_T2_setDirectionSource": [
            "IFX_INLINE void IfxGpt12_T2_setDirectionSource(Ifx_GPT12 *gpt12, IfxGpt12_TimerDirectionSource source)"
        ],
        "IfxGpt12_T2_setEudInput": [
            "IFX_INLINE void IfxGpt12_T2_setEudInput(Ifx_GPT12 *gpt12, IfxGpt12_EudInput input)"
        ],
        "IfxGpt12_T2_setIncrementalInterfaceInputMode": [
            "IFX_INLINE void IfxGpt12_T2_setIncrementalInterfaceInputMode(Ifx_GPT12 *gpt12, IfxGpt12_IncrementalInterfaceInputMode inputMode)"
        ],
        "IfxGpt12_T2_setInput": [
            "IFX_INLINE void IfxGpt12_T2_setInput(Ifx_GPT12 *gpt12, IfxGpt12_Input input)"
        ],
        "IfxGpt12_T2_setInterruptEnable": [
            "IFX_INLINE void IfxGpt12_T2_setInterruptEnable(Ifx_GPT12 *gpt12, boolean enabled)"
        ],
        "IfxGpt12_T2_setMode": [
            "IFX_INLINE void IfxGpt12_T2_setMode(Ifx_GPT12 *gpt12, IfxGpt12_Mode mode)"
        ],
        "IfxGpt12_T2_setReloadInputMode": [
            "IFX_INLINE void IfxGpt12_T2_setReloadInputMode(Ifx_GPT12 *gpt12, IfxGpt12_ReloadInputMode inputMode)"
        ],
        "IfxGpt12_T2_setRemoteControl": [
            "IFX_INLINE void IfxGpt12_T2_setRemoteControl(Ifx_GPT12 *gpt12, IfxGpt12_TimerRemoteControl control)"
        ],
        "IfxGpt12_T2_setTimerDirection": [
            "IFX_INLINE void IfxGpt12_T2_setTimerDirection(Ifx_GPT12 *gpt12, IfxGpt12_TimerDirection direction)"
        ],
        "IfxGpt12_T2_setTimerPrescaler": [
            "IFX_INLINE void IfxGpt12_T2_setTimerPrescaler(Ifx_GPT12 *gpt12, IfxGpt12_TimerInputPrescaler inputPrescaler)"
        ],
        "IfxGpt12_T2_setTimerValue": [
            "IFX_INLINE void IfxGpt12_T2_setTimerValue(Ifx_GPT12 *gpt12, uint16 value)"
        ],
        "IfxGpt12_T3_enableOutput": [
            "IFX_INLINE void IfxGpt12_T3_enableOutput(Ifx_GPT12 *gpt12, boolean enable)"
        ],
        "IfxGpt12_T3_getMode": [
            "IFX_INLINE IfxGpt12_Mode IfxGpt12_T3_getMode(Ifx_GPT12 *gpt12)"
        ],
        "IfxGpt12_T3_getSrc": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxGpt12_T3_getSrc(Ifx_GPT12 *gpt12)"
        ],
        "IfxGpt12_T3_getTimerValue": [
            "IFX_INLINE uint16 IfxGpt12_T3_getTimerValue(Ifx_GPT12 *gpt12)"
        ],
        "IfxGpt12_T3_run": [
            "IFX_INLINE void IfxGpt12_T3_run(Ifx_GPT12 *gpt12, IfxGpt12_TimerRun runTimer)"
        ],
        "IfxGpt12_T3_setCounterInputMode": [
            "IFX_INLINE void IfxGpt12_T3_setCounterInputMode(Ifx_GPT12 *gpt12, IfxGpt12_CounterInputMode inputMode)"
        ],
        "IfxGpt12_T3_setDirectionSource": [
            "IFX_INLINE void IfxGpt12_T3_setDirectionSource(Ifx_GPT12 *gpt12, IfxGpt12_TimerDirectionSource source)"
        ],
        "IfxGpt12_T3_setEudInput": [
            "IFX_INLINE void IfxGpt12_T3_setEudInput(Ifx_GPT12 *gpt12, IfxGpt12_EudInput input)"
        ],
        "IfxGpt12_T3_setIncrementalInterfaceInputMode": [
            "IFX_INLINE void IfxGpt12_T3_setIncrementalInterfaceInputMode(Ifx_GPT12 *gpt12, IfxGpt12_IncrementalInterfaceInputMode inputMode)"
        ],
        "IfxGpt12_T3_setInput": [
            "IFX_INLINE void IfxGpt12_T3_setInput(Ifx_GPT12 *gpt12, IfxGpt12_Input input)"
        ],
        "IfxGpt12_T3_setMode": [
            "IFX_INLINE void IfxGpt12_T3_setMode(Ifx_GPT12 *gpt12, IfxGpt12_Mode mode)"
        ],
        "IfxGpt12_T3_setTimerDirection": [
            "IFX_INLINE void IfxGpt12_T3_setTimerDirection(Ifx_GPT12 *gpt12, IfxGpt12_TimerDirection direction)"
        ],
        "IfxGpt12_T3_setTimerPrescaler": [
            "IFX_INLINE void IfxGpt12_T3_setTimerPrescaler(Ifx_GPT12 *gpt12, IfxGpt12_TimerInputPrescaler inputPrescaler)"
        ],
        "IfxGpt12_T3_setTimerValue": [
            "IFX_INLINE void IfxGpt12_T3_setTimerValue(Ifx_GPT12 *gpt12, uint16 value)"
        ],
        "IfxGpt12_T4_enableClearTimerT2": [
            "IFX_INLINE void IfxGpt12_T4_enableClearTimerT2(Ifx_GPT12 *gpt12, boolean enabled)"
        ],
        "IfxGpt12_T4_enableClearTimerT3": [
            "IFX_INLINE void IfxGpt12_T4_enableClearTimerT3(Ifx_GPT12 *gpt12, boolean enabled)"
        ],
        "IfxGpt12_T4_getMode": [
            "IFX_INLINE IfxGpt12_Mode IfxGpt12_T4_getMode(Ifx_GPT12 *gpt12)"
        ],
        "IfxGpt12_T4_getSrc": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxGpt12_T4_getSrc(Ifx_GPT12 *gpt12)"
        ],
        "IfxGpt12_T4_getTimerValue": [
            "IFX_INLINE uint16 IfxGpt12_T4_getTimerValue(Ifx_GPT12 *gpt12)"
        ],
        "IfxGpt12_T4_run": [
            "IFX_INLINE void IfxGpt12_T4_run(Ifx_GPT12 *gpt12, IfxGpt12_TimerRun runTimer)"
        ],
        "IfxGpt12_T4_setCaptureInputMode": [
            "IFX_INLINE void IfxGpt12_T4_setCaptureInputMode(Ifx_GPT12 *gpt12, IfxGpt12_CaptureInputMode inputMode)"
        ],
        "IfxGpt12_T4_setCounterInputMode": [
            "IFX_INLINE void IfxGpt12_T4_setCounterInputMode(Ifx_GPT12 *gpt12, IfxGpt12_CounterInputMode inputMode)"
        ],
        "IfxGpt12_T4_setDirectionSource": [
            "IFX_INLINE void IfxGpt12_T4_setDirectionSource(Ifx_GPT12 *gpt12, IfxGpt12_TimerDirectionSource source)"
        ],
        "IfxGpt12_T4_setEudInput": [
            "IFX_INLINE void IfxGpt12_T4_setEudInput(Ifx_GPT12 *gpt12, IfxGpt12_EudInput input)"
        ],
        "IfxGpt12_T4_setIncrementalInterfaceInputMode": [
            "IFX_INLINE void IfxGpt12_T4_setIncrementalInterfaceInputMode(Ifx_GPT12 *gpt12, IfxGpt12_IncrementalInterfaceInputMode inputMode)"
        ],
        "IfxGpt12_T4_setInput": [
            "IFX_INLINE void IfxGpt12_T4_setInput(Ifx_GPT12 *gpt12, IfxGpt12_Input input)"
        ],
        "IfxGpt12_T4_setInterruptEnable": [
            "IFX_INLINE void IfxGpt12_T4_setInterruptEnable(Ifx_GPT12 *gpt12, boolean enabled)"
        ],
        "IfxGpt12_T4_setMode": [
            "IFX_INLINE void IfxGpt12_T4_setMode(Ifx_GPT12 *gpt12, IfxGpt12_Mode mode)"
        ],
        "IfxGpt12_T4_setReloadInputMode": [
            "IFX_INLINE void IfxGpt12_T4_setReloadInputMode(Ifx_GPT12 *gpt12, IfxGpt12_ReloadInputMode inputMode)"
        ],
        "IfxGpt12_T4_setRemoteControl": [
            "IFX_INLINE void IfxGpt12_T4_setRemoteControl(Ifx_GPT12 *gpt12, IfxGpt12_TimerRemoteControl control)"
        ],
        "IfxGpt12_T4_setTimerDirection": [
            "IFX_INLINE void IfxGpt12_T4_setTimerDirection(Ifx_GPT12 *gpt12, IfxGpt12_TimerDirection direction)"
        ],
        "IfxGpt12_T4_setTimerPrescaler": [
            "IFX_INLINE void IfxGpt12_T4_setTimerPrescaler(Ifx_GPT12 *gpt12, IfxGpt12_TimerInputPrescaler inputPrescaler)"
        ],
        "IfxGpt12_T4_setTimerValue": [
            "IFX_INLINE void IfxGpt12_T4_setTimerValue(Ifx_GPT12 *gpt12, uint16 value)"
        ],
        "IfxGpt12_T5_enableClearTimer": [
            "IFX_INLINE void IfxGpt12_T5_enableClearTimer(Ifx_GPT12 *gpt12, boolean enabled)"
        ],
        "IfxGpt12_T5_getMode": [
            "IFX_INLINE IfxGpt12_Mode IfxGpt12_T5_getMode(Ifx_GPT12 *gpt12)"
        ],
        "IfxGpt12_T5_getSrc": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxGpt12_T5_getSrc(Ifx_GPT12 *gpt12)"
        ],
        "IfxGpt12_T5_getTimerValue": [
            "IFX_INLINE uint16 IfxGpt12_T5_getTimerValue(Ifx_GPT12 *gpt12)"
        ],
        "IfxGpt12_T5_run": [
            "IFX_INLINE void IfxGpt12_T5_run(Ifx_GPT12 *gpt12, IfxGpt12_TimerRun runTimer)"
        ],
        "IfxGpt12_T5_setCaptureTrigger": [
            "IFX_INLINE void IfxGpt12_T5_setCaptureTrigger(Ifx_GPT12 *gpt12, IfxGpt12_CaptureTrigger trigger)"
        ],
        "IfxGpt12_T5_setCaptureTriggerEnable": [
            "IFX_INLINE void IfxGpt12_T5_setCaptureTriggerEnable(Ifx_GPT12 *gpt12, boolean enabled)"
        ],
        "IfxGpt12_T5_setCaptureTriggerMode": [
            "IFX_INLINE void IfxGpt12_T5_setCaptureTriggerMode(Ifx_GPT12 *gpt12, IfxGpt12_CaptureTriggerMode mode)"
        ],
        "IfxGpt12_T5_setCounterInputMode": [
            "IFX_INLINE void IfxGpt12_T5_setCounterInputMode(Ifx_GPT12 *gpt12, IfxGpt12_CounterInputMode inputMode)"
        ],
        "IfxGpt12_T5_setDirectionSource": [
            "IFX_INLINE void IfxGpt12_T5_setDirectionSource(Ifx_GPT12 *gpt12, IfxGpt12_TimerDirectionSource source)"
        ],
        "IfxGpt12_T5_setEudInput": [
            "IFX_INLINE void IfxGpt12_T5_setEudInput(Ifx_GPT12 *gpt12, IfxGpt12_EudInput input)"
        ],
        "IfxGpt12_T5_setInput": [
            "IFX_INLINE void IfxGpt12_T5_setInput(Ifx_GPT12 *gpt12, IfxGpt12_Input input)"
        ],
        "IfxGpt12_T5_setMode": [
            "IFX_INLINE void IfxGpt12_T5_setMode(Ifx_GPT12 *gpt12, IfxGpt12_Mode mode)"
        ],
        "IfxGpt12_T5_setRemoteControl": [
            "IFX_INLINE void IfxGpt12_T5_setRemoteControl(Ifx_GPT12 *gpt12, IfxGpt12_TimerRemoteControl control)"
        ],
        "IfxGpt12_T5_setTimerDirection": [
            "IFX_INLINE void IfxGpt12_T5_setTimerDirection(Ifx_GPT12 *gpt12, IfxGpt12_TimerDirection direction)"
        ],
        "IfxGpt12_T5_setTimerPrescaler": [
            "IFX_INLINE void IfxGpt12_T5_setTimerPrescaler(Ifx_GPT12 *gpt12, IfxGpt12_TimerInputPrescaler inputPrescaler)"
        ],
        "IfxGpt12_T5_setTimerValue": [
            "IFX_INLINE void IfxGpt12_T5_setTimerValue(Ifx_GPT12 *gpt12, uint16 value)"
        ],
        "IfxGpt12_T6_enableClearTimer": [
            "IFX_INLINE void IfxGpt12_T6_enableClearTimer(Ifx_GPT12 *gpt12, boolean enabled)"
        ],
        "IfxGpt12_T6_getMode": [
            "IFX_INLINE IfxGpt12_Mode IfxGpt12_T6_getMode(Ifx_GPT12 *gpt12)"
        ],
        "IfxGpt12_T6_getSrc": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxGpt12_T6_getSrc(Ifx_GPT12 *gpt12)"
        ],
        "IfxGpt12_T6_getTimerValue": [
            "IFX_INLINE uint16 IfxGpt12_T6_getTimerValue(Ifx_GPT12 *gpt12)"
        ],
        "IfxGpt12_T6_run": [
            "IFX_INLINE void IfxGpt12_T6_run(Ifx_GPT12 *gpt12, IfxGpt12_TimerRun runTimer)"
        ],
        "IfxGpt12_T6_setCounterInputMode": [
            "IFX_INLINE void IfxGpt12_T6_setCounterInputMode(Ifx_GPT12 *gpt12, IfxGpt12_CounterInputMode inputMode)"
        ],
        "IfxGpt12_T6_setDirectionSource": [
            "IFX_INLINE void IfxGpt12_T6_setDirectionSource(Ifx_GPT12 *gpt12, IfxGpt12_TimerDirectionSource source)"
        ],
        "IfxGpt12_T6_setEudInput": [
            "IFX_INLINE void IfxGpt12_T6_setEudInput(Ifx_GPT12 *gpt12, IfxGpt12_EudInput input)"
        ],
        "IfxGpt12_T6_setInput": [
            "IFX_INLINE void IfxGpt12_T6_setInput(Ifx_GPT12 *gpt12, IfxGpt12_Input input)"
        ],
        "IfxGpt12_T6_setMode": [
            "IFX_INLINE void IfxGpt12_T6_setMode(Ifx_GPT12 *gpt12, IfxGpt12_Mode mode)"
        ],
        "IfxGpt12_T6_setReloadMode": [
            "IFX_INLINE void IfxGpt12_T6_setReloadMode(Ifx_GPT12 *gpt12, IfxGpt12_TimerReloadMode mode)"
        ],
        "IfxGpt12_T6_setTimerDirection": [
            "IFX_INLINE void IfxGpt12_T6_setTimerDirection(Ifx_GPT12 *gpt12, IfxGpt12_TimerDirection direction)"
        ],
        "IfxGpt12_T6_setTimerPrescaler": [
            "IFX_INLINE void IfxGpt12_T6_setTimerPrescaler(Ifx_GPT12 *gpt12, IfxGpt12_TimerInputPrescaler inputPrescaler)"
        ],
        "IfxGpt12_T6_setTimerValue": [
            "IFX_INLINE void IfxGpt12_T6_setTimerValue(Ifx_GPT12 *gpt12, uint16 value)"
        ],
        "IfxGpt12_getCaptureSrc": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxGpt12_getCaptureSrc(Ifx_GPT12 *gpt12)"
        ],
        "IfxGpt12_getModuleFrequency": [
            "IFX_INLINE float32 IfxGpt12_getModuleFrequency(Ifx_GPT12 *gpt12)"
        ],
        "IfxGpt12_initCapInPin": [
            "IFX_INLINE void IfxGpt12_initCapInPin(const IfxGpt12_TxIn_In *capIn, IfxPort_InputMode inputMode)"
        ],
        "IfxGpt12_initCapInPinWithPadLevel": [
            "IFX_INLINE void IfxGpt12_initCapInPinWithPadLevel(const IfxGpt12_TxIn_In *capIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxGpt12_initTxOutPin": [
            "IFX_INLINE void IfxGpt12_initTxOutPin(const IfxGpt12_TxOut_Out *txOut, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxGpt12_isModuleSuspended": [
            "IFX_INLINE boolean IfxGpt12_isModuleSuspended(Ifx_GPT12 *gpt12)"
        ],
        "IfxGpt12_setCaptureInput": [
            "IFX_INLINE void IfxGpt12_setCaptureInput(Ifx_GPT12 *gpt12, IfxGpt12_CaptureInput input)"
        ],
        "IfxGpt12_setCaptureReload": [
            "IFX_INLINE void IfxGpt12_setCaptureReload(Ifx_GPT12 *gpt12, IfxGpt12_SleepMode value)"
        ],
        "IfxGpt12_setGpt1BlockPrescaler": [
            "IFX_INLINE void IfxGpt12_setGpt1BlockPrescaler(Ifx_GPT12 *gpt12, IfxGpt12_Gpt1BlockPrescaler bps1)"
        ],
        "IfxGpt12_setGpt2BlockPrescaler": [
            "IFX_INLINE void IfxGpt12_setGpt2BlockPrescaler(Ifx_GPT12 *gpt12, IfxGpt12_Gpt2BlockPrescaler bps2)"
        ],
        "IfxGpt12_setSleepMode": [
            "IFX_INLINE void IfxGpt12_setSleepMode(Ifx_GPT12 *gpt12, IfxGpt12_SleepMode mode)"
        ],
        "IfxGpt12_setSuspendMode": [
            "IFX_INLINE void IfxGpt12_setSuspendMode(Ifx_GPT12 *gpt12, IfxGpt12_SuspendMode mode)"
        ]
    },
    "IfxGtm_Atom_Pwm.h": {},
    "IfxGtm_Atom_PwmHl.h": {},
    "IfxGtm_Atom_Timer.h": {},
    "IfxGtm.h": {
        "IfxGtm_isEnabled": [
            "IFX_INLINE boolean IfxGtm_isEnabled(Ifx_GTM *gtm)"
        ],
        "IfxGtm_isModuleSuspended": [
            "IFX_INLINE boolean IfxGtm_isModuleSuspended(Ifx_GTM *gtm)"
        ],
        "IfxGtm_setSuspendMode": [
            "IFX_INLINE void IfxGtm_setSuspendMode(Ifx_GTM *gtm, IfxGtm_SuspendMode mode)"
        ]
    },
    "IfxGtm_Atom.h": {
        "IfxGtm_Atom_Ch_getChannelPointer": [
            "IFX_INLINE Ifx_GTM_ATOM_CH *IfxGtm_Atom_Ch_getChannelPointer(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel)"
        ],
        "IfxGtm_Atom_Ch_setCompareShadow": [
            "IFX_INLINE void IfxGtm_Atom_Ch_setCompareShadow(Ifx_GTM_ATOM *atom, IfxGtm_Atom_Ch channel, uint32 shadowZero, uint32 shadowOne)"
        ],
        "IfxGtm_Atom_Agc_setChannelsUpdate": [
            "IFX_INLINE void IfxGtm_Atom_Agc_setChannelsUpdate(Ifx_GTM_ATOM_AGC *agc, uint32 value)"
        ],
        "IfxGtm_Atom_setTout": [
            "IFX_INLINE void IfxGtm_Atom_setTout(uint32 toutNum, uint32 toutSel)"
        ]
    },
    "IfxGtm_Cmu.h": {},
    "IfxGtm_Dpll.h": {},
    "IfxGtm_Dtm.h": {
        "IfxGtm_Dtm_setClockSource": [
            "IFX_INLINE void IfxGtm_Dtm_setClockSource(Ifx_GTM_CDTM_DTM *dtm, IfxGtm_Dtm_ClockSource clockSource)"
        ],
        "IfxGtm_Dtm_setOutput0DeadTimePath": [
            "IFX_INLINE void IfxGtm_Dtm_setOutput0DeadTimePath(Ifx_GTM_CDTM_DTM *dtm, IfxGtm_Dtm_Ch channel, IfxGtm_Dtm_DeadTimePath deadTimePath)"
        ],
        "IfxGtm_Dtm_setOutput1DeadTimePath": [
            "IFX_INLINE void IfxGtm_Dtm_setOutput1DeadTimePath(Ifx_GTM_CDTM_DTM *dtm, IfxGtm_Dtm_Ch channel, IfxGtm_Dtm_DeadTimePath deadTimePath)"
        ],
        "IfxGtm_Dtm_setOutput1Function": [
            "IFX_INLINE void IfxGtm_Dtm_setOutput1Function(Ifx_GTM_CDTM_DTM *dtm, IfxGtm_Dtm_Ch channel, IfxGtm_Dtm_Output1Function output1Function)"
        ],
        "IfxGtm_Dtm_setOutput1Select": [
            "IFX_INLINE void IfxGtm_Dtm_setOutput1Select(Ifx_GTM_CDTM_DTM *dtm, IfxGtm_Dtm_Ch channel, IfxGtm_Dtm_Output1Select output1Select)"
        ]
    },
    "IfxGtm_Psm.h": {
        "IfxGtm_Psm_Fifo_setChannelMode": [
            "IFX_INLINE void IfxGtm_Psm_Fifo_setChannelMode(IfxGtm_Psm_Fifo fifo, IfxGtm_Psm_FifoChannel channel, IfxGtm_Psm_FifoChannelMode mode)"
        ],
        "IfxGtm_Psm_Fifo_getChannelPointer": [
            "IFX_INLINE Ifx_GTM_PSM_FIFO_CH *IfxGtm_Psm_Fifo_getChannelPointer(IfxGtm_Psm_Fifo fifo, IfxGtm_Psm_FifoChannel channel)"
        ],
        "IfxGtm_Psm_Fifo_getPointer": [
            "IFX_INLINE Ifx_GTM_PSM_FIFO *IfxGtm_Psm_Fifo_getPointer(IfxGtm_Psm_Fifo fifo)"
        ],
        "IfxGtm_Psm_Fifo_flushChannelFifo": [
            "IFX_INLINE void IfxGtm_Psm_Fifo_flushChannelFifo(IfxGtm_Psm_Fifo fifo, IfxGtm_Psm_FifoChannel channel)"
        ],
        "IfxGtm_Psm_Fifo_enableRamAccess": [
            "IFX_INLINE void IfxGtm_Psm_Fifo_enableRamAccess(IfxGtm_Psm_Fifo fifo)"
        ],
        "IfxGtm_Psm_Fifo_disableRamAccess": [
            "IFX_INLINE void IfxGtm_Psm_Fifo_disableRamAccess(IfxGtm_Psm_Fifo fifo)"
        ],
        "IfxGtm_Psm_Fifo_getChannelStartAddress": [
            "IFX_INLINE uint32 IfxGtm_Psm_Fifo_getChannelStartAddress(IfxGtm_Psm_Fifo fifo, IfxGtm_Psm_FifoChannel channel)"
        ],
        "IfxGtm_Psm_Fifo_getChannelEndAddress": [
            "IFX_INLINE uint32 IfxGtm_Psm_Fifo_getChannelEndAddress(IfxGtm_Psm_Fifo fifo, IfxGtm_Psm_FifoChannel channel)"
        ],
        "IfxGtm_Psm_Fifo_getChannelSize": [
            "IFX_INLINE uint32 IfxGtm_Psm_Fifo_getChannelSize(IfxGtm_Psm_Fifo fifo, IfxGtm_Psm_FifoChannel channel)"
        ],
        "IfxGtm_Psm_Fifo_getChannelFillLevel": [
            "IFX_INLINE uint32 IfxGtm_Psm_Fifo_getChannelFillLevel(IfxGtm_Psm_Fifo fifo, IfxGtm_Psm_FifoChannel channel)"
        ],
        "IfxGtm_Psm_Fifo_getChannelUpperWatermark": [
            "IFX_INLINE uint32 IfxGtm_Psm_Fifo_getChannelUpperWatermark(IfxGtm_Psm_Fifo fifo, IfxGtm_Psm_FifoChannel channel)"
        ],
        "IfxGtm_Psm_Fifo_getChannelLowerWatermark": [
            "IFX_INLINE uint32 IfxGtm_Psm_Fifo_getChannelLowerWatermark(IfxGtm_Psm_Fifo fifo, IfxGtm_Psm_FifoChannel channel)"
        ],
        "IfxGtm_Psm_Fifo_getChannelWritePtr": [
            "IFX_INLINE uint32 IfxGtm_Psm_Fifo_getChannelWritePtr(IfxGtm_Psm_Fifo fifo, IfxGtm_Psm_FifoChannel channel)"
        ],
        "IfxGtm_Psm_Fifo_getChannelReadPtr": [
            "IFX_INLINE uint32 IfxGtm_Psm_Fifo_getChannelReadPtr(IfxGtm_Psm_Fifo fifo, IfxGtm_Psm_FifoChannel channel)"
        ],
        "IfxGtm_Psm_Fifo_getChannelInterruptStatus": [
            "IFX_INLINE boolean IfxGtm_Psm_Fifo_getChannelInterruptStatus(IfxGtm_Psm_Fifo fifo, IfxGtm_Psm_FifoChannel channel, IfxGtm_Psm_FifoChannelInterrupt interrupt)"
        ],
        "IfxGtm_Psm_Fifo_setChannelInterruptMode": [
            "IFX_INLINE void IfxGtm_Psm_Fifo_setChannelInterruptMode(IfxGtm_Psm_Fifo fifo, IfxGtm_Psm_FifoChannel channel, IfxGtm_Psm_InterruptMode irqmode)"
        ],
        "IfxGtm_Psm_Fifo_setChannelDmaHystMode": [
            "IFX_INLINE void IfxGtm_Psm_Fifo_setChannelDmaHystMode(IfxGtm_Psm_Fifo fifo, IfxGtm_Psm_FifoChannel channel, boolean enabled, IfxGtm_Psm_FifoChannelDmaHystDir dir)"
        ],
        "IfxGtm_Psm_Fifo_clearChannelInterrupt": [
            "IFX_INLINE void IfxGtm_Psm_Fifo_clearChannelInterrupt(IfxGtm_Psm_Fifo fifo, IfxGtm_Psm_FifoChannel channel, IfxGtm_Psm_FifoChannelInterrupt interrupt)"
        ],
        "IfxGtm_Psm_Fifo_clearAllChannelInterrupts": [
            "IFX_INLINE void IfxGtm_Psm_Fifo_clearAllChannelInterrupts(IfxGtm_Psm_Fifo fifo, IfxGtm_Psm_FifoChannel channel)"
        ],
        "IfxGtm_Psm_F2a_getPointer": [
            "IFX_INLINE Ifx_GTM_PSM_F2A *IfxGtm_Psm_F2a_getPointer(IfxGtm_Psm_F2a f2a)"
        ],
        "IfxGtm_Psm_F2a_setAruReadAddress": [
            "IFX_INLINE void IfxGtm_Psm_F2a_setAruReadAddress(IfxGtm_Psm_F2a f2a, IfxGtm_Psm_F2aStream f2aStream, uint32 address)"
        ],
        "IfxGtm_Psm_F2a_setTransferMode": [
            "IFX_INLINE void IfxGtm_Psm_F2a_setTransferMode(IfxGtm_Psm_F2a f2a, IfxGtm_Psm_F2aStream f2aStream, IfxGtm_Psm_F2aTransferMode mode)"
        ],
        "IfxGtm_Psm_F2a_getTransferMode": [
            "IFX_INLINE IfxGtm_Psm_F2aTransferMode IfxGtm_Psm_F2a_getTransferMode(IfxGtm_Psm_F2a f2a, IfxGtm_Psm_F2aStream f2aStream)"
        ],
        "IfxGtm_Psm_F2a_setTransferDirection": [
            "IFX_INLINE void IfxGtm_Psm_F2a_setTransferDirection(IfxGtm_Psm_F2a f2a, IfxGtm_Psm_F2aStream f2aStream, IfxGtm_Psm_F2aTransferDirection dir)"
        ],
        "IfxGtm_Psm_F2a_getTransferDirection": [
            "IFX_INLINE IfxGtm_Psm_F2aTransferDirection IfxGtm_Psm_F2a_getTransferDirection(IfxGtm_Psm_F2a f2a, IfxGtm_Psm_F2aStream f2aStream)"
        ],
        "IfxGtm_Psm_Fifo_getChannelSrcPointer": [
            "IFX_INLINE Ifx_SRC_SRCR *IfxGtm_Psm_Fifo_getChannelSrcPointer(IfxGtm_Psm_Fifo fifo, IfxGtm_Psm_FifoChannel channel)"
        ],
        "IfxGtm_Psm_Afd_getChannelPointer": [
            "IFX_INLINE Ifx_GTM_PSM_AFD_CH *IfxGtm_Psm_Afd_getChannelPointer(IfxGtm_Psm_Fifo fifo, IfxGtm_Psm_FifoChannel channel)"
        ],
        "IfxGtm_Psm_Afd_writeChannelBuffer": [
            "IFX_INLINE void IfxGtm_Psm_Afd_writeChannelBuffer(IfxGtm_Psm_Fifo fifo, IfxGtm_Psm_FifoChannel channel, uint32 data)"
        ]
    },
    "IfxGtm_Spe.h": {
        "IfxGtm_Spe_clearAllInterrupts": [
            "IFX_INLINE void IfxGtm_Spe_clearAllInterrupts(Ifx_GTM_SPE *spe)"
        ],
        "IfxGtm_Spe_clearInterrupt": [
            "IFX_INLINE void IfxGtm_Spe_clearInterrupt(Ifx_GTM_SPE *spe, IfxGtm_Spe_InterruptSignal interrupt)"
        ],
        "IfxGtm_Spe_enableModule": [
            "IFX_INLINE void IfxGtm_Spe_enableModule(Ifx_GTM_SPE *spe, boolean enabled)"
        ],
        "IfxGtm_Spe_getActualInputPat": [
            "IFX_INLINE uint32 IfxGtm_Spe_getActualInputPat(Ifx_GTM_SPE *spe)"
        ],
        "IfxGtm_Spe_getBwdPatternPtr": [
            "IFX_INLINE uint32 IfxGtm_Spe_getBwdPatternPtr(Ifx_GTM_SPE *spe)"
        ],
        "IfxGtm_Spe_getControlCommand": [
            "IFX_INLINE IfxGtm_Spe_ControlCommand IfxGtm_Spe_getControlCommand(Ifx_GTM_SPE *spe)"
        ],
        "IfxGtm_Spe_getDir": [
            "IFX_INLINE IfxGtm_Spe_Direction IfxGtm_Spe_getDir(Ifx_GTM_SPE *spe)"
        ],
        "IfxGtm_Spe_getNewInputPat": [
            "IFX_INLINE uint32 IfxGtm_Spe_getNewInputPat(Ifx_GTM_SPE *spe)"
        ],
        "IfxGtm_Spe_getOutputCtrl": [
            "IFX_INLINE uint32 IfxGtm_Spe_getOutputCtrl(Ifx_GTM_SPE *spe)"
        ],
        "IfxGtm_Spe_getOutputPattern": [
            "IFX_INLINE uint32 IfxGtm_Spe_getOutputPattern(Ifx_GTM_SPE *spe, IfxGtm_Spe_PatternIndex patIndex)"
        ],
        "IfxGtm_Spe_getPatternPtr": [
            "IFX_INLINE uint32 IfxGtm_Spe_getPatternPtr(Ifx_GTM_SPE *spe)"
        ],
        "IfxGtm_Spe_getPrevDir": [
            "IFX_INLINE IfxGtm_Spe_Direction IfxGtm_Spe_getPrevDir(Ifx_GTM_SPE *spe)"
        ],
        "IfxGtm_Spe_getPreviousInputPat": [
            "IFX_INLINE uint32 IfxGtm_Spe_getPreviousInputPat(Ifx_GTM_SPE *spe)"
        ],
        "IfxGtm_Spe_getRevCounter": [
            "IFX_INLINE uint32 IfxGtm_Spe_getRevCounter(Ifx_GTM_SPE *spe)"
        ],
        "IfxGtm_Spe_getSrcPointer": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxGtm_Spe_getSrcPointer(IfxGtm_Spe spe)"
        ],
        "IfxGtm_Spe_selectTimInput": [
            "IFX_INLINE void IfxGtm_Spe_selectTimInput(Ifx_GTM_SPE *spe, IfxGtm_Spe_TimInput timInput)"
        ],
        "IfxGtm_Spe_setBwdPatternPtr": [
            "IFX_INLINE void IfxGtm_Spe_setBwdPatternPtr(Ifx_GTM_SPE *spe, IfxGtm_Spe_PatternIndex patIndex)"
        ],
        "IfxGtm_Spe_setControlCommand": [
            "IFX_INLINE void IfxGtm_Spe_setControlCommand(Ifx_GTM_SPE *spe, IfxGtm_Spe_ControlCommand cmd)"
        ],
        "IfxGtm_Spe_setFastShutoff": [
            "IFX_INLINE void IfxGtm_Spe_setFastShutoff(Ifx_GTM_SPE *spe, boolean enabled)"
        ],
        "IfxGtm_Spe_setInterruptMode": [
            "IFX_INLINE void IfxGtm_Spe_setInterruptMode(Ifx_GTM_SPE *spe, IfxGtm_Spe_InterruptMode mode)"
        ],
        "IfxGtm_Spe_setOutputCtrl": [
            "IFX_INLINE void IfxGtm_Spe_setOutputCtrl(Ifx_GTM_SPE *spe, IfxGtm_Spe_OutputPattern *patPtr)"
        ],
        "IfxGtm_Spe_setPatternPtr": [
            "IFX_INLINE void IfxGtm_Spe_setPatternPtr(Ifx_GTM_SPE *spe, IfxGtm_Spe_PatternIndex patIndex)"
        ],
        "IfxGtm_Spe_setRevCounter": [
            "IFX_INLINE void IfxGtm_Spe_setRevCounter(Ifx_GTM_SPE *spe, uint32 count)"
        ],
        "IfxGtm_Spe_triggerUpdate": [
            "IFX_INLINE void IfxGtm_Spe_triggerUpdate(Ifx_GTM_SPE *spe)"
        ]
    },
    "IfxGtm_Tbu.h": {
        "IfxGtm_Tbu_enableChannel": [
            "IFX_INLINE void IfxGtm_Tbu_enableChannel(Ifx_GTM *gtm, IfxGtm_Tbu_Ts channel)"
        ],
        "IfxGtm_Tbu_isChannelEnabled": [
            "IFX_INLINE boolean IfxGtm_Tbu_isChannelEnabled(Ifx_GTM *gtm, IfxGtm_Tbu_Ts channel)"
        ]
    },
    "IfxGtm_Tim.h": {
        "IfxGtm_Tim_Ch_clearAuxInputSourceSelection": [
            "IFX_INLINE void IfxGtm_Tim_Ch_clearAuxInputSourceSelection(Ifx_GTM *gtm, IfxGtm_Tim timIndex, IfxGtm_Tim_Ch channel)"
        ],
        "IfxGtm_Tim_Ch_clearCntOverflowEvent": [
            "IFX_INLINE void IfxGtm_Tim_Ch_clearCntOverflowEvent(Ifx_GTM_TIM_CH *channel)"
        ],
        "IfxGtm_Tim_Ch_clearDataLostEvent": [
            "IFX_INLINE void IfxGtm_Tim_Ch_clearDataLostEvent(Ifx_GTM_TIM_CH *channel)"
        ],
        "IfxGtm_Tim_Ch_clearEcntOverflowEvent": [
            "IFX_INLINE void IfxGtm_Tim_Ch_clearEcntOverflowEvent(Ifx_GTM_TIM_CH *channel)"
        ],
        "IfxGtm_Tim_Ch_clearGlitchEvent": [
            "IFX_INLINE void IfxGtm_Tim_Ch_clearGlitchEvent(Ifx_GTM_TIM_CH *channel)"
        ],
        "IfxGtm_Tim_Ch_clearNewValueEvent": [
            "IFX_INLINE void IfxGtm_Tim_Ch_clearNewValueEvent(Ifx_GTM_TIM_CH *channel)"
        ],
        "IfxGtm_Tim_Ch_clearNotification": [
            "IFX_INLINE void IfxGtm_Tim_Ch_clearNotification(Ifx_GTM_TIM_CH *channel, IfxGtm_Tim_IrqType irqType)"
        ],
        "IfxGtm_Tim_Ch_getNotification": [
            "IFX_INLINE boolean IfxGtm_Tim_Ch_getNotification(Ifx_GTM_TIM_CH *channel, IfxGtm_Tim_IrqType irqType)"
        ],
        "IfxGtm_Tim_Ch_getSrcPointer": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxGtm_Tim_Ch_getSrcPointer(Ifx_GTM *gtm, IfxGtm_Tim tim, IfxGtm_Tim_Ch channel)"
        ],
        "IfxGtm_Tim_Ch_isCntOverflowEvent": [
            "IFX_INLINE boolean IfxGtm_Tim_Ch_isCntOverflowEvent(Ifx_GTM_TIM_CH *channel)"
        ],
        "IfxGtm_Tim_Ch_isDataLostEvent": [
            "IFX_INLINE boolean IfxGtm_Tim_Ch_isDataLostEvent(Ifx_GTM_TIM_CH *channel)"
        ],
        "IfxGtm_Tim_Ch_isEcntOverflowEvent": [
            "IFX_INLINE boolean IfxGtm_Tim_Ch_isEcntOverflowEvent(Ifx_GTM_TIM_CH *channel)"
        ],
        "IfxGtm_Tim_Ch_isGlitchEvent": [
            "IFX_INLINE boolean IfxGtm_Tim_Ch_isGlitchEvent(Ifx_GTM_TIM_CH *channel)"
        ],
        "IfxGtm_Tim_Ch_isNewValueEvent": [
            "IFX_INLINE boolean IfxGtm_Tim_Ch_isNewValueEvent(Ifx_GTM_TIM_CH *channel)"
        ],
        "IfxGtm_Tim_Ch_setAuxInputSourceSelection": [
            "IFX_INLINE void IfxGtm_Tim_Ch_setAuxInputSourceSelection(Ifx_GTM *gtm, IfxGtm_Tim timIndex, IfxGtm_Tim_Ch channel)"
        ],
        "IfxGtm_Tim_Ch_setEdgeCounter": [
            "IFX_INLINE void IfxGtm_Tim_Ch_setEdgeCounter(Ifx_GTM_TIM_CH *channel, uint8 edgeCounter)"
        ],
        "IfxGtm_Tim_Ch_setFallingEdgeFilterTime": [
            "IFX_INLINE void IfxGtm_Tim_Ch_setFallingEdgeFilterTime(Ifx_GTM_TIM_CH *channel, uint32 filterTime)"
        ],
        "IfxGtm_Tim_Ch_setInputSourceSelection": [
            "IFX_INLINE void IfxGtm_Tim_Ch_setInputSourceSelection(Ifx_GTM_TIM *tim, IfxGtm_Tim_Ch channel, IfxGtm_Tim_InputSourceSelect inputSource)"
        ],
        "IfxGtm_Tim_Ch_setNotification": [
            "IFX_INLINE void IfxGtm_Tim_Ch_setNotification(Ifx_GTM_TIM_CH *channel, IfxGtm_Tim_IrqType irqType)"
        ],
        "IfxGtm_Tim_Ch_setRisingEdgeFilterTime": [
            "IFX_INLINE void IfxGtm_Tim_Ch_setRisingEdgeFilterTime(Ifx_GTM_TIM_CH *channel, uint32 filterTime)"
        ],
        "IfxGtm_Tim_Ch_setShadowCounter": [
            "IFX_INLINE void IfxGtm_Tim_Ch_setShadowCounter(Ifx_GTM_TIM_CH *channel, uint32 shadowCounter)"
        ],
        "IfxGtm_Tim_getChannel": [
            "IFX_INLINE Ifx_GTM_TIM_CH *IfxGtm_Tim_getChannel(Ifx_GTM_TIM *tim, IfxGtm_Tim_Ch channel)"
        ],
        "IfxGtm_Tim_Ch_resetChannel": [
            "IFX_INLINE void IfxGtm_Tim_Ch_resetChannel(Ifx_GTM_TIM *tim, IfxGtm_Tim_Ch channel)"
        ],
        "IfxGtm_Tim_Ch_setTimTin": [
            "IFX_INLINE void IfxGtm_Tim_Ch_setTimTin(IfxGtm_Tim timIndex, IfxGtm_Tim_Ch channelIndex, uint32 tinSel)"
        ]
    },
    "IfxGtm_Tom.h": {
        "IfxGtm_Tom_Ch_getChannelPointer": [
            "IFX_INLINE Ifx_GTM_TOM_CH *IfxGtm_Tom_Ch_getChannelPointer(Ifx_GTM_TOM *tom, IfxGtm_Tom_Ch channel)"
        ],
        "IfxGtm_Tom_Tgc_writeGlobalControl": [
            "IFX_INLINE void IfxGtm_Tom_Tgc_writeGlobalControl(Ifx_GTM_TOM_TGC *tgc, uint32 control)"
        ],
        "IfxGtm_Tom_setTout": [
            "IFX_INLINE void IfxGtm_Tom_setTout(uint32 toutNum, uint32 toutSel)"
        ]
    },
    "IfxGtm_Tim_In.h": {
        "IfxGtm_Tim_In_clearNewData": [
            "IFX_INLINE void IfxGtm_Tim_In_clearNewData(IfxGtm_Tim_In *driver)"
        ],
        "IfxGtm_Tim_In_getDutyPercent": [
            "IFX_INLINE float32 IfxGtm_Tim_In_getDutyPercent(IfxGtm_Tim_In *driver, boolean *dataCoherent)"
        ],
        "IfxGtm_Tim_In_getPeriodSecond": [
            "IFX_INLINE float32 IfxGtm_Tim_In_getPeriodSecond(IfxGtm_Tim_In *driver)"
        ],
        "IfxGtm_Tim_In_getPeriodTicks": [
            "IFX_INLINE sint32 IfxGtm_Tim_In_getPeriodTicks(IfxGtm_Tim_In *driver)"
        ],
        "IfxGtm_Tim_In_getPulseLengthTick": [
            "IFX_INLINE sint32 IfxGtm_Tim_In_getPulseLengthTick(IfxGtm_Tim_In *driver)"
        ],
        "IfxGtm_Tim_In_isDataLost": [
            "IFX_INLINE boolean IfxGtm_Tim_In_isDataLost(IfxGtm_Tim_In *driver)"
        ],
        "IfxGtm_Tim_In_isNewData": [
            "IFX_INLINE boolean IfxGtm_Tim_In_isNewData(IfxGtm_Tim_In *driver)"
        ]
    },
    "IfxGtm_Tim_Timer.h": {},
    "IfxGtm_Tom_Pwm.h": {},
    "IfxGtm_Tom_PwmHl.h": {},
    "IfxGtm_Tom_Timer.h": {},
    "IfxGtm_Trig.h": {},
    "IfxHssl_Hssl.h": {
        "IfxHssl_Hssl_getReadData": [
            "IFX_INLINE uint32 IfxHssl_Hssl_getReadData(IfxHssl_Hssl_Channel *channel)"
        ]
    },
    "IfxHssl.h": {
        "IfxHssl_clearHsctInterruptFlag": [
            "IFX_INLINE void IfxHssl_clearHsctInterruptFlag(Ifx_HSCT *hsct, IfxHssl_Hsct_InterruptSource source)"
        ],
        "IfxHssl_clearHsslChannelErrorInterruptFlag": [
            "IFX_INLINE void IfxHssl_clearHsslChannelErrorInterruptFlag(Ifx_HSSL *hssl, IfxHssl_Hssl_ERRInterruptSource source, IfxHssl_ChannelId channelId)"
        ],
        "IfxHssl_clearHsslGlobalErrorInterruptFlag": [
            "IFX_INLINE void IfxHssl_clearHsslGlobalErrorInterruptFlag(Ifx_HSSL *hssl, IfxHssl_Hssl_EXIInterruptSource source)"
        ],
        "IfxHssl_clearInitialiseModeFlag": [
            "IFX_INLINE void IfxHssl_clearInitialiseModeFlag(Ifx_HSSL *hssl)"
        ],
        "IfxHssl_disableHsctInterruptFlag": [
            "IFX_INLINE void IfxHssl_disableHsctInterruptFlag(Ifx_HSCT *hsct, IfxHssl_Hsct_InterruptSource source)"
        ],
        "IfxHssl_disableHsslChannelErrorInterruptFlag": [
            "IFX_INLINE void IfxHssl_disableHsslChannelErrorInterruptFlag(Ifx_HSSL *hssl, IfxHssl_Hssl_ERRInterruptSource source, IfxHssl_ChannelId channelId)"
        ],
        "IfxHssl_disableHsslGlobalErrorInterruptFlag": [
            "IFX_INLINE void IfxHssl_disableHsslGlobalErrorInterruptFlag(Ifx_HSSL *hssl, IfxHssl_Hssl_EXIInterruptSource source)"
        ],
        "IfxHssl_enableAllErrorFlags": [
            "IFX_INLINE void IfxHssl_enableAllErrorFlags(Ifx_HSSL *hssl)"
        ],
        "IfxHssl_enableHsctInterrupt": [
            "IFX_INLINE void IfxHssl_enableHsctInterrupt(Ifx_HSCT *hsct, IfxSrc_Tos typeOfService, uint16 priority)"
        ],
        "IfxHssl_enableHsctInterruptFlag": [
            "IFX_INLINE void IfxHssl_enableHsctInterruptFlag(Ifx_HSCT *hsct, IfxHssl_Hsct_InterruptSource source)"
        ],
        "IfxHssl_enableHsctLvdsLoopback": [
            "IFX_INLINE void IfxHssl_enableHsctLvdsLoopback(Ifx_HSCT *hsct)"
        ],
        "IfxHssl_enableHsslCOKInterrupt": [
            "IFX_INLINE void IfxHssl_enableHsslCOKInterrupt(Ifx_HSSL *hssl, IfxHssl_ChannelId channelId, IfxSrc_Tos typeOfService, uint16 priority)"
        ],
        "IfxHssl_enableHsslChannelErrorInterruptFlag": [
            "IFX_INLINE void IfxHssl_enableHsslChannelErrorInterruptFlag(Ifx_HSSL *hssl, IfxHssl_Hssl_ERRInterruptSource source, IfxHssl_ChannelId channelId)"
        ],
        "IfxHssl_enableHsslERRInterrupt": [
            "IFX_INLINE void IfxHssl_enableHsslERRInterrupt(Ifx_HSSL *hssl, IfxHssl_ChannelId channelId, IfxSrc_Tos typeOfService, uint16 priority)"
        ],
        "IfxHssl_enableHsslEXIInterrupt": [
            "IFX_INLINE void IfxHssl_enableHsslEXIInterrupt(Ifx_HSSL *hssl, IfxSrc_Tos typeOfService, uint16 priority)"
        ],
        "IfxHssl_enableHsslGlobalErrorInterruptFlag": [
            "IFX_INLINE void IfxHssl_enableHsslGlobalErrorInterruptFlag(Ifx_HSSL *hssl, IfxHssl_Hssl_EXIInterruptSource source)"
        ],
        "IfxHssl_enableHsslRDIInterrupt": [
            "IFX_INLINE void IfxHssl_enableHsslRDIInterrupt(Ifx_HSSL *hssl, IfxHssl_ChannelId channelId, IfxSrc_Tos typeOfService, uint16 priority)"
        ],
        "IfxHssl_enableHsslTRGInterrupt": [
            "IFX_INLINE void IfxHssl_enableHsslTRGInterrupt(Ifx_HSSL *hssl, IfxHssl_ChannelId channelId, IfxSrc_Tos typeOfService, uint16 priority)"
        ],
        "IfxHssl_getAllMflagsStatus": [
            "IFX_INLINE uint32 IfxHssl_getAllMflagsStatus(Ifx_HSSL *hssl)"
        ],
        "IfxHssl_getCurrentCount": [
            "IFX_INLINE uint16 IfxHssl_getCurrentCount(Ifx_HSSL *hssl)"
        ],
        "IfxHssl_getHsctInterruptFlagStatus": [
            "IFX_INLINE boolean IfxHssl_getHsctInterruptFlagStatus(Ifx_HSCT *hsct, IfxHssl_Hsct_InterruptSource source)"
        ],
        "IfxHssl_getHsslChannelErrorInterruptFlagStatus": [
            "IFX_INLINE boolean IfxHssl_getHsslChannelErrorInterruptFlagStatus(Ifx_HSSL *hssl, IfxHssl_Hssl_ERRInterruptSource source, IfxHssl_ChannelId channelId)"
        ],
        "IfxHssl_getHsslGloabalErrorInterruptFlagStatus": [
            "IFX_INLINE boolean IfxHssl_getHsslGloabalErrorInterruptFlagStatus(Ifx_HSSL *hssl, IfxHssl_Hssl_EXIInterruptSource source)"
        ],
        "IfxHssl_getInitialiseModeFlagStatus": [
            "IFX_INLINE boolean IfxHssl_getInitialiseModeFlagStatus(Ifx_HSSL *hssl)"
        ],
        "IfxHssl_getReloadCount": [
            "IFX_INLINE uint16 IfxHssl_getReloadCount(Ifx_HSSL *hssl)"
        ],
        "IfxHssl_isModuleSuspended": [
            "IFX_INLINE boolean IfxHssl_isModuleSuspended(Ifx_HSSL *hssl)"
        ],
        "IfxHssl_setHsctSleepMode": [
            "IFX_INLINE void IfxHssl_setHsctSleepMode(Ifx_HSCT *hsct, IfxHssl_Hsct_SleepMode mode)"
        ],
        "IfxHssl_setHsslSleepMode": [
            "IFX_INLINE void IfxHssl_setHsslSleepMode(Ifx_HSSL *hssl, IfxHssl_Hssl_SleepMode mode)"
        ],
        "IfxHssl_setInitialiseModeFlag": [
            "IFX_INLINE void IfxHssl_setInitialiseModeFlag(Ifx_HSSL *hssl)"
        ],
        "IfxHssl_setReloadCount": [
            "IFX_INLINE void IfxHssl_setReloadCount(Ifx_HSSL *hssl, uint16 reloadValue)"
        ],
        "IfxHssl_setSuspendMode": [
            "IFX_INLINE void IfxHssl_setSuspendMode(Ifx_HSSL *hssl, IfxHssl_SuspendMode mode)"
        ],
        "IfxHssl_setTimeoutReloadValue": [
            "IFX_INLINE void IfxHssl_setTimeoutReloadValue(Ifx_HSSL *hssl, IfxHssl_ChannelId channelId, uint8 timeoutValue)"
        ],
        "IfxHssl_getHsctUnsolicitedStatusMessage": [
            "IFX_INLINE uint32 IfxHssl_getHsctUnsolicitedStatusMessage(Ifx_HSCT *hsct)"
        ],
        "IfxHssl_sendHsctUnsolicitedStatusMessage": [
            "IFX_INLINE void IfxHssl_sendHsctUnsolicitedStatusMessage(Ifx_HSCT *hsct, uint32 message)"
        ],
        "IfxHssl_setHsctRxLinkSpeed": [
            "IFX_INLINE void IfxHssl_setHsctRxLinkSpeed(Ifx_HSCT *hsct, IfxHssl_MasterModeRxSpeed rxSpeed)"
        ],
        "IfxHssl_setHsctTxLinkSpeed": [
            "IFX_INLINE void IfxHssl_setHsctTxLinkSpeed(Ifx_HSCT *hsct, IfxHssl_MasterModeTxSpeed txSpeed)"
        ],
        "IfxHssl_enableHsctTransmitPath": [
            "IFX_INLINE void IfxHssl_enableHsctTransmitPath(Ifx_HSCT *hsct)"
        ],
        "IfxHssl_enableHsctReceivePath": [
            "IFX_INLINE void IfxHssl_enableHsctReceivePath(Ifx_HSCT *hsct)"
        ],
        "IfxHssl_disableHsctTransmitPath": [
            "IFX_INLINE void IfxHssl_disableHsctTransmitPath(Ifx_HSCT *hsct)"
        ],
        "IfxHssl_disableHsctReceivePath": [
            "IFX_INLINE void IfxHssl_disableHsctReceivePath(Ifx_HSCT *hsct)"
        ]
    },
    "IfxI2c_I2c.h": {},
    "IfxI2c.h": {
        "IfxI2c_busIsFree": [
            "IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)"
        ],
        "IfxI2c_clearAllDtrInterruptSources": [
            "IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)"
        ],
        "IfxI2c_clearAllErrorInterruptSources": [
            "IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)"
        ],
        "IfxI2c_clearAllProtocolInterruptSources": [
            "IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)"
        ],
        "IfxI2c_clearDtrInterruptSource": [
            "IFX_INLINE void IfxI2c_clearDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)"
        ],
        "IfxI2c_clearErrorInterruptSource": [
            "IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)"
        ],
        "IfxI2c_clearProtocolInterruptSource": [
            "IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)"
        ],
        "IfxI2c_clearRequestBuffer": [
            "IFX_INLINE void IfxI2c_clearRequestBuffer(Ifx_I2C *i2c)"
        ],
        "IfxI2c_disableDtrInterruptSource": [
            "IFX_INLINE void IfxI2c_disableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)"
        ],
        "IfxI2c_disableErrorInterruptFlag": [
            "IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)"
        ],
        "IfxI2c_disableErrorInterruptSource": [
            "IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)"
        ],
        "IfxI2c_disableProtocolInterruptFlag": [
            "IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)"
        ],
        "IfxI2c_disableProtocolInterruptSource": [
            "IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)"
        ],
        "IfxI2c_enableDtrInterruptSource": [
            "IFX_INLINE void IfxI2c_enableDtrInterruptSource(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)"
        ],
        "IfxI2c_enableErrorInterruptFlag": [
            "IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)"
        ],
        "IfxI2c_enableErrorInterruptSource": [
            "IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)"
        ],
        "IfxI2c_enableProtocolInterruptFlag": [
            "IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)"
        ],
        "IfxI2c_enableProtocolInterruptSource": [
            "IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)"
        ],
        "IfxI2c_getBusStatus": [
            "IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)"
        ],
        "IfxI2c_getDtrSrcPointer": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getDtrSrcPointer(Ifx_I2C *i2c)"
        ],
        "IfxI2c_getDtrinterruptSourceStatus": [
            "IFX_INLINE boolean IfxI2c_getDtrinterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_DtrInterruptSource source)"
        ],
        "IfxI2c_getErrorInterruptFlagStatus": [
            "IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)"
        ],
        "IfxI2c_getErrorInterruptSourceStatus": [
            "IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)"
        ],
        "IfxI2c_getErrorSrcPointer": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)"
        ],
        "IfxI2c_getProtocolInterruptFlagStatus": [
            "IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c)"
        ],
        "IfxI2c_getProtocolInterruptSourceStatus": [
            "IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)"
        ],
        "IfxI2c_getProtocolSrcPointer": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c)"
        ],
        "IfxI2c_isFifoRequest": [
            "IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c)"
        ],
        "IfxI2c_run": [
            "IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c)"
        ],
        "IfxI2c_setBitAddressMode": [
            "IFX_INLINE void IfxI2c_setBitAddressMode(Ifx_I2C *i2c, IfxI2c_AddressMode mode)"
        ],
        "IfxI2c_setPinSelection": [
            "IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel)"
        ],
        "IfxI2c_setReceivePacketSize": [
            "IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size)"
        ],
        "IfxI2c_setSlaveDeviceAddress": [
            "IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address)"
        ],
        "IfxI2c_setSleepMode": [
            "IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode)"
        ],
        "IfxI2c_setTransmitPacketSize": [
            "IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size)"
        ],
        "IfxI2c_stop": [
            "IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c)"
        ],
        "IfxI2c_waitBusFree": [
            "IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c)"
        ],
        "IfxI2c_writeFifo": [
            "IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet)"
        ]
    },
    "IfxLldVersion.h": {},
    "IfxIom_Driver.h": {},
    "IfxIom_Iom.h": {},
    "IfxIom.h": {
        "IfxIom_disableModule": [
            "IFX_INLINE void IfxIom_disableModule(Ifx_IOM *iom)"
        ],
        "IfxIom_enableModule": [
            "IFX_INLINE void IfxIom_enableModule(Ifx_IOM *iom, uint8 clockDivider)"
        ],
        "IfxIom_eventTriggerHistory": [
            "IFX_INLINE uint16 IfxIom_eventTriggerHistory(Ifx_IOM *iom)"
        ],
        "IfxIom_setSleepMode": [
            "IFX_INLINE void IfxIom_setSleepMode(Ifx_IOM *iom, IfxIom_SleepMode mode)"
        ],
        "IfxIom_setTimerValueOfFilterAndPrescalerCell": [
            "IFX_INLINE void IfxIom_setTimerValueOfFilterAndPrescalerCell(Ifx_IOM *iom, IfxIom_FpcChannelId channelId, uint16 value)"
        ]
    },
    "IfxMsc_Msc.h": {
        "IfxMsc_Msc_clearDataFrameInterrupt": [
            "IFX_INLINE void IfxMsc_Msc_clearDataFrameInterrupt(IfxMsc_Msc *msc)"
        ],
        "IfxMsc_Msc_getActiveDataFrameStatus": [
            "IFX_INLINE boolean IfxMsc_Msc_getActiveDataFrameStatus(IfxMsc_Msc *msc)"
        ],
        "IfxMsc_Msc_getDataFrameInterruptStatus": [
            "IFX_INLINE boolean IfxMsc_Msc_getDataFrameInterruptStatus(IfxMsc_Msc *msc)"
        ]
    },
    "IfxMsc.h": {
        "IfxMsc_clearAbraOverflowFlag": [
            "IFX_INLINE void IfxMsc_clearAbraOverflowFlag(Ifx_MSC *msc)"
        ],
        "IfxMsc_clearAbraUnderflowFlag": [
            "IFX_INLINE void IfxMsc_clearAbraUnderflowFlag(Ifx_MSC *msc)"
        ],
        "IfxMsc_clearRecieveDataInterruptFlag": [
            "IFX_INLINE void IfxMsc_clearRecieveDataInterruptFlag(Ifx_MSC *msc)"
        ],
        "IfxMsc_clearUpstreamTimeout": [
            "IFX_INLINE void IfxMsc_clearUpstreamTimeout(Ifx_MSC *msc)"
        ],
        "IfxMsc_clearUpstreamValidFlag": [
            "IFX_INLINE void IfxMsc_clearUpstreamValidFlag(Ifx_MSC *msc, uint8 upstreamIdx)"
        ],
        "IfxMsc_clearValidbit": [
            "IFX_INLINE void IfxMsc_clearValidbit(Ifx_MSC *msc, uint8 upstreamIdx)"
        ],
        "IfxMsc_disableUpstreamTimeoutInterrupt": [
            "IFX_INLINE void IfxMsc_disableUpstreamTimeoutInterrupt(Ifx_MSC *msc)"
        ],
        "IfxMsc_enableUpstreamTimeoutInterrupt": [
            "IFX_INLINE void IfxMsc_enableUpstreamTimeoutInterrupt(Ifx_MSC *msc)"
        ],
        "IfxMsc_getAsyncClockBypass": [
            "IFX_INLINE boolean IfxMsc_getAsyncClockBypass(Ifx_MSC *msc)"
        ],
        "IfxMsc_getData": [
            "IFX_INLINE uint16 IfxMsc_getData(Ifx_MSC *msc, uint8 upstreamIdx)"
        ],
        "IfxMsc_getDataHighTarget": [
            "IFX_INLINE IfxMsc_Target IfxMsc_getDataHighTarget(Ifx_MSC *msc)"
        ],
        "IfxMsc_getDataLowTarget": [
            "IFX_INLINE IfxMsc_Target IfxMsc_getDataLowTarget(Ifx_MSC *msc)"
        ],
        "IfxMsc_getDownStreamExtension": [
            "IFX_INLINE boolean IfxMsc_getDownStreamExtension(Ifx_MSC *msc)"
        ],
        "IfxMsc_getRecieveDataInterruptFlag": [
            "IFX_INLINE boolean IfxMsc_getRecieveDataInterruptFlag(Ifx_MSC *msc)"
        ],
        "IfxMsc_getSrcPointer": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxMsc_getSrcPointer(Ifx_MSC *msc, IfxMsc_InterruptServiceRequest intRequest)"
        ],
        "IfxMsc_getUpstreamData": [
            "IFX_INLINE uint32 IfxMsc_getUpstreamData(Ifx_MSC *msc, uint8 upstreamIdx)"
        ],
        "IfxMsc_getUpstreamParityErrorFlag": [
            "IFX_INLINE boolean IfxMsc_getUpstreamParityErrorFlag(Ifx_MSC *msc, uint8 upstreamIdx)"
        ],
        "IfxMsc_getUpstreamTimeoutFlag": [
            "IFX_INLINE boolean IfxMsc_getUpstreamTimeoutFlag(Ifx_MSC *msc)"
        ],
        "IfxMsc_getUpstreamValidFlag": [
            "IFX_INLINE boolean IfxMsc_getUpstreamValidFlag(Ifx_MSC *msc, uint8 upstreamIdx)"
        ],
        "IfxMsc_initEnPin": [
            "IFX_INLINE void IfxMsc_initEnPin(const IfxMsc_En_Out *en, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxMsc_initFclnPin": [
            "IFX_INLINE void IfxMsc_initFclnPin(const IfxMsc_Fcln_Out *fcln, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxMsc_initFclpPin": [
            "IFX_INLINE void IfxMsc_initFclpPin(const IfxMsc_Fclp_Out *fclp, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxMsc_initInjPin": [
            "IFX_INLINE void IfxMsc_initInjPin(const IfxMsc_Inj_In *inj, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxMsc_initSdiPin": [
            "IFX_INLINE void IfxMsc_initSdiPin(const IfxMsc_Sdi_In *sdi, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxMsc_initSonPin": [
            "IFX_INLINE void IfxMsc_initSonPin(const IfxMsc_Son_Out *son, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxMsc_initSopPin": [
            "IFX_INLINE void IfxMsc_initSopPin(const IfxMsc_Sop_Out *sop, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxMsc_isModuleSuspended": [
            "IFX_INLINE boolean IfxMsc_isModuleSuspended(Ifx_MSC *msc)"
        ],
        "IfxMsc_setAsyncClockBypass": [
            "IFX_INLINE void IfxMsc_setAsyncClockBypass(Ifx_MSC *msc, boolean value)"
        ],
        "IfxMsc_setCommandTarget": [
            "IFX_INLINE void IfxMsc_setCommandTarget(Ifx_MSC *msc, IfxMsc_Target enX)"
        ],
        "IfxMsc_setDataHighTarget": [
            "IFX_INLINE void IfxMsc_setDataHighTarget(Ifx_MSC *msc, IfxMsc_Target enX)"
        ],
        "IfxMsc_setDataLowTarget": [
            "IFX_INLINE void IfxMsc_setDataLowTarget(Ifx_MSC *msc, IfxMsc_Target enX)"
        ],
        "IfxMsc_setDownStreamData": [
            "IFX_INLINE void IfxMsc_setDownStreamData(Ifx_MSC *msc, uint32 data)"
        ],
        "IfxMsc_setDownStreamExtension": [
            "IFX_INLINE void IfxMsc_setDownStreamExtension(Ifx_MSC *msc, boolean value)"
        ],
        "IfxMsc_setDownStreamExtensionData": [
            "IFX_INLINE void IfxMsc_setDownStreamExtensionData(Ifx_MSC *msc, uint32 data)"
        ],
        "IfxMsc_setFastMode": [
            "IFX_INLINE void IfxMsc_setFastMode(Ifx_MSC *msc, boolean value)"
        ],
        "IfxMsc_setFractionalDividerStep": [
            "IFX_INLINE void IfxMsc_setFractionalDividerStep(Ifx_MSC *msc, uint16 value)"
        ],
        "IfxMsc_setNdividerDownstream": [
            "IFX_INLINE void IfxMsc_setNdividerDownstream(Ifx_MSC *msc, IfxMsc_NDividerDownstream divisionRatio)"
        ],
        "IfxMsc_setResetCommandExtensionMode": [
            "IFX_INLINE void IfxMsc_setResetCommandExtensionMode(Ifx_MSC *msc, boolean value)"
        ],
        "IfxMsc_setSerialDataInputSelect": [
            "IFX_INLINE void IfxMsc_setSerialDataInputSelect(Ifx_MSC *msc, IfxMsc_SerialDataInput select)"
        ],
        "IfxMsc_setSleepMode": [
            "IFX_INLINE void IfxMsc_setSleepMode(Ifx_MSC *msc, IfxMsc_SleepMode mode)"
        ],
        "IfxMsc_setSuspendMode": [
            "IFX_INLINE void IfxMsc_setSuspendMode(Ifx_MSC *msc, IfxMsc_SuspendMode mode)"
        ],
        "IfxMsc_setTransmissionMode": [
            "IFX_INLINE void IfxMsc_setTransmissionMode(Ifx_MSC *msc, IfxMsc_TransmissionMode mode)"
        ],
        "IfxMsc_setUpstreamChannelRecieveRate": [
            "IFX_INLINE void IfxMsc_setUpstreamChannelRecieveRate(Ifx_MSC *msc, IfxMsc_UpstreamChannelReceivingRate recieveRate)"
        ],
        "IfxMsc_setUpstreamTimeout": [
            "IFX_INLINE void IfxMsc_setUpstreamTimeout(Ifx_MSC *msc, IfxMsc_UpstreamTimeoutValue timeoutVal)"
        ],
        "IfxMsc_setUpstreamTimeoutPrescalar": [
            "IFX_INLINE void IfxMsc_setUpstreamTimeoutPrescalar(Ifx_MSC *msc, IfxMsc_UpstreamTimeoutPrescaler prescalar)"
        ],
        "IfxMsc_hasAbraOverflowErrorOccured": [
            "IFX_INLINE boolean IfxMsc_hasAbraOverflowErrorOccured(Ifx_MSC *msc)"
        ],
        "IfxMsc_hasAbraUnderflowErrorOccured": [
            "IFX_INLINE boolean IfxMsc_hasAbraUnderflowErrorOccured(Ifx_MSC *msc)"
        ],
        "IfxMsc_setAbraOverflowFlag": [
            "IFX_INLINE void IfxMsc_setAbraOverflowFlag(Ifx_MSC *msc)"
        ],
        "IfxMsc_setAbraUnderflowFlag": [
            "IFX_INLINE void IfxMsc_setAbraUnderflowFlag(Ifx_MSC *msc)"
        ]
    },
    "IfxMtu.h": {
        "IfxMtu_disableErrorReporting": [
            "IFX_INLINE void IfxMtu_disableErrorReporting(IfxMtu_MbistSel mbistSel)"
        ],
        "IfxMtu_disableMbistShell": [
            "IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel)"
        ],
        "IfxMtu_enableErrorReporting": [
            "IFX_INLINE void IfxMtu_enableErrorReporting(IfxMtu_MbistSel mbistSel)"
        ],
        "IfxMtu_enableMbistShell": [
            "IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel)"
        ],
        "IfxMtu_enableModule": [
            "IFX_INLINE void IfxMtu_enableModule(void)"
        ],
        "IfxMtu_getMemDoneRegisterIndex": [
            "IFX_INLINE uint32 IfxMtu_getMemDoneRegisterIndex(IfxMtu_MbistSel mbistSel)"
        ],
        "IfxMtu_isAutoInitRunning": [
            "IFX_INLINE boolean IfxMtu_isAutoInitRunning(IfxMtu_MbistSel mbistSel)"
        ],
        "IfxMtu_isErrorTrackingEnabled": [
            "IFX_INLINE boolean IfxMtu_isErrorTrackingEnabled(IfxMtu_MbistSel mbistSel)"
        ],
        "IfxMtu_isErrorTrackingOverflow": [
            "IFX_INLINE boolean IfxMtu_isErrorTrackingOverflow(IfxMtu_MbistSel mbistSel)"
        ],
        "IfxMtu_isMbistDone": [
            "IFX_INLINE boolean IfxMtu_isMbistDone(IfxMtu_MbistSel mbistSel)"
        ],
        "IfxMtu_isModuleEnabled": [
            "IFX_INLINE boolean IfxMtu_isModuleEnabled(void)"
        ],
        "IfxMtu_checkErrorFlags": [
            "IFX_INLINE boolean IfxMtu_checkErrorFlags(IfxMtu_MbistSel mbistSel)"
        ]
    },
    "IfxPmsEvr.h": {
        "IfxPmsEvr_areInitValuesRight": [
            "IFX_INLINE boolean IfxPmsEvr_areInitValuesRight(const IfxPmsEvr_checkRegConfig *const checkConfig)"
        ],
        "IfxPmsEvr_configureBlankingFilterDelay": [
            "IFX_INLINE void IfxPmsEvr_configureBlankingFilterDelay(Ifx_PMS *pms, uint8 delay)"
        ],
        "IfxPmsEvr_disableInterrupt": [
            "IFX_INLINE void IfxPmsEvr_disableInterrupt(Ifx_PMS *pms, IfxPmsEvr_EnableInterrupt interruptType)"
        ],
        "IfxPmsEvr_enableDcdcSynchronisation": [
            "IFX_INLINE void IfxPmsEvr_enableDcdcSynchronisation(Ifx_PMS *pms, boolean enabled)"
        ],
        "IfxPmsEvr_enableInterrupts": [
            "IFX_INLINE void IfxPmsEvr_enableInterrupts(Ifx_PMS *pms, IfxPmsEvr_EnableInterrupt interruptType)"
        ],
        "IfxPmsEvr_enableWakeupOnVextSupplyRampUp": [
            "IFX_INLINE void IfxPmsEvr_enableWakeupOnVextSupplyRampUp(Ifx_PMS *pms, boolean enabled)"
        ],
        "IfxPmsEvr_evr33ResetTriggerSignalConfig": [
            "IFX_INLINE void IfxPmsEvr_evr33ResetTriggerSignalConfig(Ifx_PMS *pms, boolean enableReset)"
        ],
        "IfxPmsEvr_evrcResetTriggerSignalConfig": [
            "IFX_INLINE void IfxPmsEvr_evrcResetTriggerSignalConfig(Ifx_PMS *pms, boolean enableReset)"
        ],
        "IfxPmsEvr_fineTrimEvrClock": [
            "IFX_INLINE void IfxPmsEvr_fineTrimEvrClock(Ifx_PMS *pms, uint8 trimValue)"
        ],
        "IfxPmsEvr_getAdcVddResult": [
            "IFX_INLINE float32 IfxPmsEvr_getAdcVddResult(float32 averageADCC)"
        ],
        "IfxPmsEvr_getAdcVddp3Result": [
            "IFX_INLINE float32 IfxPmsEvr_getAdcVddp3Result(float32 averageADC33V)"
        ],
        "IfxPmsEvr_getAdcVextResult": [
            "IFX_INLINE float32 IfxPmsEvr_getAdcVextResult(float32 averageADCSWDV)"
        ],
        "IfxPmsEvr_getEvrcMode": [
            "IFX_INLINE IfxPmsEvr_EvrcMode IfxPmsEvr_getEvrcMode(Ifx_PMS *pms)"
        ],
        "IfxPmsEvr_getEvrcVoltageRegulator": [
            "IFX_INLINE boolean IfxPmsEvr_getEvrcVoltageRegulator(Ifx_PMS *pms)"
        ],
        "IfxPmsEvr_getPrimaryAdcEvr33Result": [
            "IFX_INLINE uint8 IfxPmsEvr_getPrimaryAdcEvr33Result(Ifx_PMS *pms)"
        ],
        "IfxPmsEvr_getPrimaryAdcEvrcResult": [
            "IFX_INLINE uint8 IfxPmsEvr_getPrimaryAdcEvrcResult(Ifx_PMS *pms)"
        ],
        "IfxPmsEvr_getPrimaryAdcSwdResult": [
            "IFX_INLINE uint8 IfxPmsEvr_getPrimaryAdcSwdResult(Ifx_PMS *pms)"
        ],
        "IfxPmsEvr_runInitSequence": [
            "IFX_INLINE boolean IfxPmsEvr_runInitSequence(const IfxPmsEvr_initSequence *const sequence)"
        ],
        "IfxPmsEvr_setEvr33PrimaryAdcTrimValue": [
            "IFX_INLINE void IfxPmsEvr_setEvr33PrimaryAdcTrimValue(Ifx_PMS *pms, IfxPmsEvr_PrimaryAdcTrimValue trimValue)"
        ],
        "IfxPmsEvr_setEvr33VoltageOutputlevel": [
            "IFX_INLINE void IfxPmsEvr_setEvr33VoltageOutputlevel(Ifx_PMS *pms, uint8 outputLevel)"
        ],
        "IfxPmsEvr_setFrequencySpreadThreshold": [
            "IFX_INLINE void IfxPmsEvr_setFrequencySpreadThreshold(Ifx_PMS *pms, uint16 thresholdLevel)"
        ],
        "IfxPmsEvr_setNmosLevel": [
            "IFX_INLINE void IfxPmsEvr_setNmosLevel(Ifx_PMS *pms, boolean nmosLevel)"
        ],
        "IfxPmsEvr_setOverVoltageMonitoringMode": [
            "IFX_INLINE void IfxPmsEvr_setOverVoltageMonitoringMode(Ifx_PMS *pms, IfxPmsEvr_OverVoltageMonitoring mode, IfxPmsEvr_SupplyMode supply)"
        ],
        "IfxPmsEvr_setPmosLevel": [
            "IFX_INLINE void IfxPmsEvr_setPmosLevel(Ifx_PMS *pms, boolean pmosLevel)"
        ],
        "IfxPmsEvr_setRegulatorSwitchingFrequency": [
            "IFX_INLINE void IfxPmsEvr_setRegulatorSwitchingFrequency(Ifx_PMS *pms, uint16 samplingFactor)"
        ],
        "IfxPmsEvr_setResetTrimValueMv": [
            "IFX_INLINE void IfxPmsEvr_setResetTrimValueMv(Ifx_PMS *pms, float32 resetTrimValue, IfxPmsEvr_SupplyMode supply)"
        ],
        "IfxPmsEvr_setSdRegulatorOutputLevel": [
            "IFX_INLINE void IfxPmsEvr_setSdRegulatorOutputLevel(Ifx_PMS *pms, uint8 outputLevel)"
        ],
        "IfxPmsEvr_setSdRegulatorPrimaryAdcTrimValue": [
            "IFX_INLINE void IfxPmsEvr_setSdRegulatorPrimaryAdcTrimValue(Ifx_PMS *pms, IfxPmsEvr_PrimaryAdcTrimValue trimValue)"
        ],
        "IfxPmsEvr_setStandbyRamSupply": [
            "IFX_INLINE void IfxPmsEvr_setStandbyRamSupply(Ifx_PMS *pms, uint8 ramBlock)"
        ],
        "IfxPmsEvr_setSwitchingFreqDivFactorForExternalsync": [
            "IFX_INLINE void IfxPmsEvr_setSwitchingFreqDivFactorForExternalsync(Ifx_PMS *pms, IfxPmsEvr_ExtSyncSwitchingFreqDivFactor divider)"
        ],
        "IfxPmsEvr_setUnderVoltageMonitoringMode": [
            "IFX_INLINE void IfxPmsEvr_setUnderVoltageMonitoringMode(Ifx_PMS *pms, IfxPmsEvr_UnderVoltageMonitoring mode, IfxPmsEvr_SupplyMode supply)"
        ],
        "IfxPmsEvr_signedFineTrimEvrClock": [
            "IFX_INLINE void IfxPmsEvr_signedFineTrimEvrClock(Ifx_PMS *pms, sint8 trimValue)"
        ],
        "IfxPmsEvr_swdResetTriggerSignalConfig": [
            "IFX_INLINE void IfxPmsEvr_swdResetTriggerSignalConfig(Ifx_PMS *pms, boolean enableReset)"
        ],
        "IfxPmsEvr_wait": [
            "IFX_INLINE void IfxPmsEvr_wait(float32 waitInSec)"
        ]
    },
    "IfxPmsPm.h": {
        "IfxPmsPm_setSleepMode": [
            "IFX_INLINE void IfxPmsPm_setSleepMode(IfxPmsPm_RequestPowerMode powerMode)"
        ],
        "IfxPmsPm_setMasterCpu": [
            "IFX_INLINE void IfxPmsPm_setMasterCpu(IfxCpu_ResourceCpu cpuIndex)"
        ],
        "IfxPmsPm_getMasterCpu": [
            "IFX_INLINE IfxCpu_ResourceCpu IfxPmsPm_getMasterCpu(void)"
        ],
        "IfxPmsPm_enableLoadJumpTimer": [
            "IFX_INLINE void IfxPmsPm_enableLoadJumpTimer(void)"
        ],
        "IfxPmsPm_disableLoadJumpTimer": [
            "IFX_INLINE void IfxPmsPm_disableLoadJumpTimer(void)"
        ],
        "IfxPmsPm_enableLoadJumpTimerOverflowFlag": [
            "IFX_INLINE void IfxPmsPm_enableLoadJumpTimerOverflowFlag(void)"
        ],
        "IfxPmsPm_disableLoadJumpTimerOverflowFlag": [
            "IFX_INLINE void IfxPmsPm_disableLoadJumpTimerOverflowFlag(void)"
        ],
        "IfxPmsPm_enableLoadJumpTimerOverflowInterrupt": [
            "IFX_INLINE void IfxPmsPm_enableLoadJumpTimerOverflowInterrupt(void)"
        ],
        "IfxPmsPm_disableLoadJumpTimerOverflowInterrupt": [
            "IFX_INLINE void IfxPmsPm_disableLoadJumpTimerOverflowInterrupt(void)"
        ],
        "IfxPmsPm_startLoadJumpTimer": [
            "IFX_INLINE void IfxPmsPm_startLoadJumpTimer(void)"
        ],
        "IfxPmsPm_stopLoadJumpTimer": [
            "IFX_INLINE void IfxPmsPm_stopLoadJumpTimer(void)"
        ],
        "IfxPmsPm_clearLoadJumpTimer": [
            "IFX_INLINE void IfxPmsPm_clearLoadJumpTimer(void)"
        ],
        "IfxPmsPm_clearLoadJumpTimerOverflowFlag": [
            "IFX_INLINE void IfxPmsPm_clearLoadJumpTimerOverflowFlag(void)"
        ],
        "IfxPmsPm_hasLoadJumpTimerOverflowOccured": [
            "IFX_INLINE boolean IfxPmsPm_hasLoadJumpTimerOverflowOccured(void)"
        ],
        "IfxPmsPm_setLoadJumpTimerCompareValue": [
            "IFX_INLINE void IfxPmsPm_setLoadJumpTimerCompareValue(uint16 compareValue)"
        ],
        "IfxPmsPm_getLoadJumpTimerCompareValue": [
            "IFX_INLINE uint16 IfxPmsPm_getLoadJumpTimerCompareValue(void)"
        ],
        "IfxPmsPm_getLoadJumpTimerCountValue": [
            "IFX_INLINE uint16 IfxPmsPm_getLoadJumpTimerCountValue(void)"
        ],
        "IfxPmsPm_requestLoadJump": [
            "IFX_INLINE void IfxPmsPm_requestLoadJump(void)"
        ],
        "IfxPmsPm_getLoadJumpStatus": [
            "IFX_INLINE IfxPmsPm_LoadJumpStatus IfxPmsPm_getLoadJumpStatus(void)"
        ],
        "IfxPmsPm_enableVoltageDroopTimer": [
            "IFX_INLINE void IfxPmsPm_enableVoltageDroopTimer(void)"
        ],
        "IfxPmsPm_enableVoltageDroopTimerOverflowFlag": [
            "IFX_INLINE void IfxPmsPm_enableVoltageDroopTimerOverflowFlag(void)"
        ],
        "IfxPmsPm_enableVoltageDroopTimerOverflowInterrupt": [
            "IFX_INLINE void IfxPmsPm_enableVoltageDroopTimerOverflowInterrupt(void)"
        ],
        "IfxPmsPm_disableVoltageDroopTimer": [
            "IFX_INLINE void IfxPmsPm_disableVoltageDroopTimer(void)"
        ],
        "IfxPmsPm_disableVoltageDroopTimerOverflowFlag": [
            "IFX_INLINE void IfxPmsPm_disableVoltageDroopTimerOverflowFlag(void)"
        ],
        "IfxPmsPm_disableVoltageDroopTimerOverflowInterrupt": [
            "IFX_INLINE void IfxPmsPm_disableVoltageDroopTimerOverflowInterrupt(void)"
        ],
        "IfxPmsPm_startVoltageDroopTimer": [
            "IFX_INLINE void IfxPmsPm_startVoltageDroopTimer(void)"
        ],
        "IfxPmsPm_stopVoltageDroopTimer": [
            "IFX_INLINE void IfxPmsPm_stopVoltageDroopTimer(void)"
        ],
        "IfxPmsPm_clearVoltageDroopTimer": [
            "IFX_INLINE void IfxPmsPm_clearVoltageDroopTimer(void)"
        ],
        "IfxPmsPm_clearVoltageDroopTimerOverflowFlag": [
            "IFX_INLINE void IfxPmsPm_clearVoltageDroopTimerOverflowFlag(void)"
        ],
        "IfxPmsPm_hasVoltageDroopTimerOverflowOccured": [
            "IFX_INLINE boolean IfxPmsPm_hasVoltageDroopTimerOverflowOccured(void)"
        ],
        "IfxPmsPm_setVoltageDroopTimerCompareValue": [
            "IFX_INLINE void IfxPmsPm_setVoltageDroopTimerCompareValue(uint16 compareValue)"
        ],
        "IfxPmsPm_getVoltageDroopTimerCompareValue": [
            "IFX_INLINE uint16 IfxPmsPm_getVoltageDroopTimerCompareValue(void)"
        ],
        "IfxPmsPm_readVoltageDroopTimerCountValue": [
            "IFX_INLINE uint16 IfxPmsPm_readVoltageDroopTimerCountValue(void)"
        ],
        "IfxPmsPm_requestVoltageDroop": [
            "IFX_INLINE void IfxPmsPm_requestVoltageDroop(IfxPmsPm_VoltageDroopRequest droopRequest)"
        ],
        "IfxPmsPm_getVoltageDroopStatus": [
            "IFX_INLINE IfxPmsPm_VoltageDroopStatus IfxPmsPm_getVoltageDroopStatus(void)"
        ],
        "IfxPmsPm_setVoltageDroopStep": [
            "IFX_INLINE void IfxPmsPm_setVoltageDroopStep(IfxPmsPm_VoltageDroopStep droopStep)"
        ]
    },
    "IfxPort_Io.c": {
        "IfxPort_Io_initModule": [
            "void IfxPort_Io_initModule(const IfxPort_Io_Config *config)"
        ]
    },
    "IfxPort_Io.h": {},
    "IfxPort.c": {
        "IfxPort_disableEmergencyStop": [
            "boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)"
        ],
        "IfxPort_enableEmergencyStop": [
            "boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)"
        ],
        "IfxPort_getAddress": [
            "Ifx_P *IfxPort_getAddress(IfxPort_Index port)"
        ],
        "IfxPort_getIndex": [
            "IfxPort_Index IfxPort_getIndex(Ifx_P *port)"
        ],
        "IfxPort_resetESR": [
            "void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex)"
        ],
        "IfxPort_setESR": [
            "void IfxPort_setESR(Ifx_P *port, uint8 pinIndex)"
        ],
        "IfxPort_setGroupModeInput": [
            "void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode)"
        ],
        "IfxPort_setGroupModeOutput": [
            "void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index)"
        ],
        "IfxPort_setGroupPadDriver": [
            "void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver)"
        ],
        "IfxPort_setPinMode": [
            "void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)"
        ],
        "IfxPort_setPinModeLVDS": [
            "void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds)"
        ],
        "IfxPort_setPinPadDriver": [
            "void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)"
        ],
        "IfxPort_setPinControllerSelection": [
            "void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex)"
        ],
        "IfxPort_resetPinControllerSelection": [
            "void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex)"
        ],
        "IfxPort_modifyPinControllerSelection": [
            "void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode)"
        ]
    },
    "IfxPort.h": {
        "IfxPort_getGroupState": [
            "IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)"
        ],
        "IfxPort_getPinState": [
            "IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)"
        ],
        "IfxPort_setGroupState": [
            "IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)"
        ],
        "IfxPort_setPinFunctionMode": [
            "IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)"
        ],
        "IfxPort_setPinHigh": [
            "IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)"
        ],
        "IfxPort_setPinLow": [
            "IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)"
        ],
        "IfxPort_setPinModeInput": [
            "IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)"
        ],
        "IfxPort_setPinModeOutput": [
            "IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)"
        ],
        "IfxPort_setPinState": [
            "IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)"
        ],
        "IfxPort_togglePin": [
            "IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex)"
        ]
    },
    "IfxPsi5_Psi5.h": {
        "IfxPsi5_Psi5_startupChannel": [
            "IFX_INLINE boolean IfxPsi5_Psi5_startupChannel(IfxPsi5_Psi5_Channel *channel, IfxPsi5_Psi5_StartupOptions *options)"
        ]
    },
    "IfxPsi5.h": {
        "IfxPsi5_getStatusCrci": [
            "IFX_INLINE uint32 IfxPsi5_getStatusCrci(Ifx_PSI5 *psi5, IfxPsi5_ChannelId channel)"
        ],
        "IfxPsi5_getStatusMei": [
            "IFX_INLINE uint32 IfxPsi5_getStatusMei(Ifx_PSI5 *psi5, IfxPsi5_ChannelId channel)"
        ],
        "IfxPsi5_getStatusNbi": [
            "IFX_INLINE uint32 IfxPsi5_getStatusNbi(Ifx_PSI5 *psi5, IfxPsi5_ChannelId channel)"
        ],
        "IfxPsi5_getStatusNfi": [
            "IFX_INLINE uint32 IfxPsi5_getStatusNfi(Ifx_PSI5 *psi5, IfxPsi5_ChannelId channel)"
        ],
        "IfxPsi5_getStatusRdi": [
            "IFX_INLINE uint32 IfxPsi5_getStatusRdi(Ifx_PSI5 *psi5, IfxPsi5_ChannelId channel)"
        ],
        "IfxPsi5_getStatusRmi": [
            "IFX_INLINE uint32 IfxPsi5_getStatusRmi(Ifx_PSI5 *psi5, IfxPsi5_ChannelId channel)"
        ],
        "IfxPsi5_getStatusRsi": [
            "IFX_INLINE uint32 IfxPsi5_getStatusRsi(Ifx_PSI5 *psi5, IfxPsi5_ChannelId channel)"
        ],
        "IfxPsi5_getStatusTei": [
            "IFX_INLINE uint32 IfxPsi5_getStatusTei(Ifx_PSI5 *psi5, IfxPsi5_ChannelId channel)"
        ],
        "IfxPsi5_initRxPin": [
            "IFX_INLINE void IfxPsi5_initRxPin(const IfxPsi5_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxPsi5_initTxPin": [
            "IFX_INLINE void IfxPsi5_initTxPin(const IfxPsi5_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxPsi5_setInterruptNodePointer": [
            "IFX_INLINE void IfxPsi5_setInterruptNodePointer(Ifx_PSI5 *psi5, IfxPsi5_ChannelId channel, IfxPsi5_InterruptNodePointer nodePointer, IfxPsi5_TriggerOutput triggerOutputLine)"
        ],
        "IfxPsi5_setRxInput": [
            "IFX_INLINE void IfxPsi5_setRxInput(Ifx_PSI5_CH *psi5Ch, IfxPsi5_AlternateInput alternateInput)"
        ],
        "IfxPsi5_setSleepMode": [
            "IFX_INLINE void IfxPsi5_setSleepMode(Ifx_PSI5 *psi5, IfxPsi5_SleepMode mode)"
        ],
        "IfxPsi5_isModuleSuspended": [
            "IFX_INLINE boolean IfxPsi5_isModuleSuspended(Ifx_PSI5 *psi5)"
        ],
        "IfxPsi5_setSuspendMode": [
            "IFX_INLINE void IfxPsi5_setSuspendMode(Ifx_PSI5 *psi5, IfxPsi5_SuspendMode mode)"
        ],
        "IfxPsi5_getReceiveDataRegisterLow": [
            "IFX_INLINE uint32 IfxPsi5_getReceiveDataRegisterLow(Ifx_PSI5 *psi5, IfxPsi5_ChannelId channel)"
        ],
        "IfxPsi5_clearAllInterrupt": [
            "IFX_INLINE void IfxPsi5_clearAllInterrupt(Ifx_PSI5 *psi5, IfxPsi5_ChannelId channel, IfxPsi5_InterruptStatusRegister intStatusReg, uint32 value)"
        ],
        "IfxPsi5_getInterruptStatus": [
            "IFX_INLINE uint32 IfxPsi5_getInterruptStatus(Ifx_PSI5 *psi5, IfxPsi5_ChannelId channel, IfxPsi5_InterruptStatusRegister intStatusReg)"
        ],
        "IfxPsi5_readReceiveFifoData": [
            "IFX_INLINE uint32 IfxPsi5_readReceiveFifoData(Ifx_PSI5 *psi5, IfxPsi5_ChannelId channel)"
        ],
        "IfxPsi5_getWriteFifoPointer": [
            "IFX_INLINE uint16 IfxPsi5_getWriteFifoPointer(Ifx_PSI5 *psi5, IfxPsi5_ChannelId channel)"
        ],
        "IfxPsi5_getReadFifoPointer": [
            "IFX_INLINE uint16 IfxPsi5_getReadFifoPointer(Ifx_PSI5 *psi5, IfxPsi5_ChannelId channel)"
        ],
        "IfxPsi5_clearInterrupt": [
            "IFX_INLINE void IfxPsi5_clearInterrupt(Ifx_PSI5 *psi5, IfxPsi5_ChannelId channel, IfxPsi5_InterruptSource interruptSource)"
        ],
        "IfxPsi5_getSrcPointer": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxPsi5_getSrcPointer(Ifx_PSI5 *psi5, IfxPsi5_InterruptServiceRequest intRequest)"
        ],
        "IfxPsi5_enableAllChannels": [
            "IFX_INLINE void IfxPsi5_enableAllChannels(Ifx_PSI5 *psi5)"
        ],
        "IfxPsi5_setReceiveFifoWarningLevel": [
            "IFX_INLINE void IfxPsi5_setReceiveFifoWarningLevel(Ifx_PSI5 *psi5, IfxPsi5_ChannelId channel, uint32 value)"
        ],
        "IfxPsi5_setReceiverControl": [
            "IFX_INLINE void IfxPsi5_setReceiverControl(Ifx_PSI5 *psi5, IfxPsi5_ChannelId channel, IfxPsi5_ReceiverControlRegister rcr, uint32 value)"
        ],
        "IfxPsi5_setFractionalDivider": [
            "IFX_INLINE void IfxPsi5_setFractionalDivider(Ifx_PSI5 *psi5, IfxPsi5_FractionalDividerRegister fcd, uint32 value)"
        ]
    },
    "IfxPsi5s_Psi5s.h": {
        "IfxPsi5s_Psi5s_enableAscReceiver": [
            "IFX_INLINE void IfxPsi5s_Psi5s_enableAscReceiver(IfxPsi5s_Psi5s *psi5s)"
        ],
        "IfxPsi5s_Psi5s_enableDisableChannelTriggerCounters": [
            "IFX_INLINE void IfxPsi5s_Psi5s_enableDisableChannelTriggerCounters(IfxPsi5s_Psi5s *psi5s, uint32 channels, uint32 mask)"
        ],
        "IfxPsi5s_Psi5s_enableDisableChannels": [
            "IFX_INLINE void IfxPsi5s_Psi5s_enableDisableChannels(IfxPsi5s_Psi5s *psi5s, uint32 channels, uint32 mask)"
        ],
        "IfxPsi5s_Psi5s_startAscTransactions": [
            "IFX_INLINE void IfxPsi5s_Psi5s_startAscTransactions(IfxPsi5s_Psi5s *psi5s)"
        ],
        "IfxPsi5s_Psi5s_getReadFrameStatus": [
            "IFX_INLINE boolean IfxPsi5s_Psi5s_getReadFrameStatus(IfxPsi5s_Psi5s *psi5s, IfxPsi5s_ChannelId channelId)"
        ]
    },
    "IfxPsi5s.h": {
        "IfxPsi5s_clearTimeStampCounterA": [
            "IFX_INLINE void IfxPsi5s_clearTimeStampCounterA(Ifx_PSI5S *psi5s, boolean clearTimeStampCounter)"
        ],
        "IfxPsi5s_clearTimeStampCounterB": [
            "IFX_INLINE void IfxPsi5s_clearTimeStampCounterB(Ifx_PSI5S *psi5s, boolean clearTimeStampCounter)"
        ],
        "IfxPsi5s_enableGlobalInterrupt": [
            "IFX_INLINE void IfxPsi5s_enableGlobalInterrupt(Ifx_PSI5S *psi5s, IfxPsi5s_GlobalInterruptSource interruptSource, IfxPsi5s_InterruptRequest enabled)"
        ],
        "IfxPsi5s_enableInterrupt": [
            "IFX_INLINE void IfxPsi5s_enableInterrupt(Ifx_PSI5S *psi5s, IfxPsi5s_ChannelId channel, IfxPsi5s_InterruptSource interruptSource, IfxPsi5s_InterruptRequest enabled)"
        ],
        "IfxPsi5s_fillAscTransmitBuffer": [
            "IFX_INLINE void IfxPsi5s_fillAscTransmitBuffer(Ifx_PSI5S *psi5s, uint32 *data)"
        ],
        "IfxPsi5s_getReceiveBuffer": [
            "IFX_INLINE uint32 IfxPsi5s_getReceiveBuffer(Ifx_PSI5S *psi5s)"
        ],
        "IfxPsi5s_getReceiveInterruptStatus": [
            "IFX_INLINE boolean IfxPsi5s_getReceiveInterruptStatus(Ifx_PSI5S *psi5s)"
        ],
        "IfxPsi5s_getTransmitInterruptStatus": [
            "IFX_INLINE boolean IfxPsi5s_getTransmitInterruptStatus(Ifx_PSI5S *psi5s)"
        ],
        "IfxPsi5s_initClkPin": [
            "IFX_INLINE void IfxPsi5s_initClkPin(const IfxPsi5s_Clk_Out *clk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxPsi5s_initRxPin": [
            "IFX_INLINE void IfxPsi5s_initRxPin(const IfxPsi5s_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxPsi5s_initTxPin": [
            "IFX_INLINE void IfxPsi5s_initTxPin(const IfxPsi5s_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxPsi5s_isModuleSuspended": [
            "IFX_INLINE boolean IfxPsi5s_isModuleSuspended(Ifx_PSI5S *psi5s)"
        ],
        "IfxPsi5s_setGlobalInterruptNodePointer": [
            "IFX_INLINE void IfxPsi5s_setGlobalInterruptNodePointer(Ifx_PSI5S *psi5s, IfxPsi5s_GlobalInterruptSource nodePointer, IfxPsi5s_Trigger triggerOutputLine)"
        ],
        "IfxPsi5s_setInterruptNodePointer": [
            "IFX_INLINE void IfxPsi5s_setInterruptNodePointer(Ifx_PSI5S *psi5s, IfxPsi5s_ChannelId channel, IfxPsi5s_InterruptSource nodePointer, IfxPsi5s_Trigger triggerOutputLine)"
        ],
        "IfxPsi5s_setLoopBackMode": [
            "IFX_INLINE void IfxPsi5s_setLoopBackMode(Ifx_PSI5S *psi5s, IfxPsi5s_LoopBackMode enabled)"
        ],
        "IfxPsi5s_setRxInput": [
            "IFX_INLINE void IfxPsi5s_setRxInput(Ifx_PSI5S *psi5s, IfxPsi5s_AlternateInput alti)"
        ],
        "IfxPsi5s_setSleepMode": [
            "IFX_INLINE void IfxPsi5s_setSleepMode(Ifx_PSI5S *psi5s, IfxPsi5s_SleepMode mode)"
        ],
        "IfxPsi5s_setSuspendMode": [
            "IFX_INLINE void IfxPsi5s_setSuspendMode(Ifx_PSI5S *psi5s, IfxPsi5s_SuspendMode mode)"
        ],
        "IfxPsi5s_setTimeStampCounterA": [
            "IFX_INLINE void IfxPsi5s_setTimeStampCounterA(Ifx_PSI5S *psi5s, IfxPsi5s_TimeStampCount startTimeStamp)"
        ],
        "IfxPsi5s_setTimeStampCounterB": [
            "IFX_INLINE void IfxPsi5s_setTimeStampCounterB(Ifx_PSI5S *psi5s, IfxPsi5s_TimeStampCount startTimeStamp)"
        ],
        "IfxPsi5s_getInterruptStatus": [
            "IFX_INLINE boolean IfxPsi5s_getInterruptStatus(Ifx_PSI5S *psi5s, IfxPsi5s_ChannelId channel, IfxPsi5s_InterruptSource interruptSource)"
        ],
        "IfxPsi5s_clearInterruptStatus": [
            "IFX_INLINE void IfxPsi5s_clearInterruptStatus(Ifx_PSI5S *psi5s, IfxPsi5s_ChannelId channel, IfxPsi5s_InterruptSource interruptSource)"
        ],
        "IfxPsi5s_getGlobalInterruptStatus": [
            "IFX_INLINE boolean IfxPsi5s_getGlobalInterruptStatus(Ifx_PSI5S *psi5s, IfxPsi5s_GlobalInterruptSource interruptSource)"
        ],
        "IfxPsi5s_clearGlobalInterruptStatus": [
            "IFX_INLINE void IfxPsi5s_clearGlobalInterruptStatus(Ifx_PSI5S *psi5s, IfxPsi5s_GlobalInterruptSource interruptSource)"
        ]
    },
    "IfxQspi_SpiMaster.h": {
        "IfxQspi_SpiMaster_readReceiveFifo": [
            "IFX_INLINE uint32 IfxQspi_SpiMaster_readReceiveFifo(IfxQspi_SpiMaster *handle)"
        ],
        "IfxQspi_SpiMaster_writeBasicConfiguration": [
            "IFX_INLINE void IfxQspi_SpiMaster_writeBasicConfiguration(IfxQspi_SpiMaster *handle, uint32 baconVal)"
        ],
        "IfxQspi_SpiMaster_writeExtendedConfiguration": [
            "IFX_INLINE void IfxQspi_SpiMaster_writeExtendedConfiguration(IfxQspi_SpiMaster_Channel *chHandle, uint32 econVal)"
        ],
        "IfxQspi_SpiMaster_writeMixedDataConfiguration": [
            "IFX_INLINE void IfxQspi_SpiMaster_writeMixedDataConfiguration(IfxQspi_SpiMaster *handle, uint32 mixEntryVal)"
        ],
        "IfxQspi_SpiMaster_writeTransmitFifo": [
            "IFX_INLINE void IfxQspi_SpiMaster_writeTransmitFifo(IfxQspi_SpiMaster_Channel *chHandle, uint32 data)"
        ]
    },
    "IfxQspi_SpiSlave.h": {
        "IfxQspi_SpiSlave_readReceiveFifo": [
            "IFX_INLINE uint32 IfxQspi_SpiSlave_readReceiveFifo(IfxQspi_SpiSlave *handle)"
        ],
        "IfxQspi_SpiSlave_writeTransmitFifo": [
            "IFX_INLINE void IfxQspi_SpiSlave_writeTransmitFifo(IfxQspi_SpiSlave *handle, uint32 data)"
        ]
    },
    "IfxQspi.h": {
        "IfxQspi_clearAllEventFlags": [
            "IFX_INLINE void IfxQspi_clearAllEventFlags(Ifx_QSPI *qspi)"
        ],
        "IfxQspi_clearMoveCounterInterruptAfterLastFlag": [
            "IFX_INLINE void IfxQspi_clearMoveCounterInterruptAfterLastFlag(Ifx_QSPI *qspi, boolean clearInterrupt)"
        ],
        "IfxQspi_clearMoveCounterInterruptBeforeLastFlag": [
            "IFX_INLINE void IfxQspi_clearMoveCounterInterruptBeforeLastFlag(Ifx_QSPI *qspi, boolean clearInterrupt)"
        ],
        "IfxQspi_clearRxReq": [
            "IFX_INLINE void IfxQspi_clearRxReq(Ifx_QSPI *qspi)"
        ],
        "IfxQspi_clearTxReq": [
            "IFX_INLINE void IfxQspi_clearTxReq(Ifx_QSPI *qspi)"
        ],
        "IfxQspi_configPT1Event": [
            "IFX_INLINE void IfxQspi_configPT1Event(Ifx_QSPI *qspi, IfxQspi_PhaseTransitionEvent pt1Config)"
        ],
        "IfxQspi_configPT2Event": [
            "IFX_INLINE void IfxQspi_configPT2Event(Ifx_QSPI *qspi, IfxQspi_PhaseTransitionEvent pt2Config)"
        ],
        "IfxQspi_enableLoopbackMode": [
            "IFX_INLINE void IfxQspi_enableLoopbackMode(Ifx_QSPI *qspi, boolean enable)"
        ],
        "IfxQspi_enablePT1Event": [
            "IFX_INLINE void IfxQspi_enablePT1Event(Ifx_QSPI *qspi, boolean enable)"
        ],
        "IfxQspi_enablePT2Event": [
            "IFX_INLINE void IfxQspi_enablePT2Event(Ifx_QSPI *qspi, boolean enable)"
        ],
        "IfxQspi_enableUsrEvent": [
            "IFX_INLINE void IfxQspi_enableUsrEvent(Ifx_QSPI *qspi, boolean enable)"
        ],
        "IfxQspi_getErrorFlags": [
            "IFX_INLINE uint16 IfxQspi_getErrorFlags(Ifx_QSPI *qspi)"
        ],
        "IfxQspi_getErrorSrc": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxQspi_getErrorSrc(Ifx_QSPI *qspi)"
        ],
        "IfxQspi_getMode": [
            "IFX_INLINE IfxQspi_Mode IfxQspi_getMode(Ifx_QSPI *qspi)"
        ],
        "IfxQspi_getModuleFrequency": [
            "IFX_INLINE float IfxQspi_getModuleFrequency(Ifx_QSPI *qspi)"
        ],
        "IfxQspi_getPhase": [
            "IFX_INLINE IfxQspi_Phase IfxQspi_getPhase(Ifx_QSPI *qspi)"
        ],
        "IfxQspi_getReceiveFifoLevel": [
            "IFX_INLINE uint8 IfxQspi_getReceiveFifoLevel(Ifx_QSPI *qspi)"
        ],
        "IfxQspi_getReceiveSrc": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxQspi_getReceiveSrc(Ifx_QSPI *qspi)"
        ],
        "IfxQspi_getRxFifoMode": [
            "IFX_INLINE IfxQspi_FifoMode IfxQspi_getRxFifoMode(Ifx_QSPI *qspi)"
        ],
        "IfxQspi_getTimeQuantaFrequency": [
            "IFX_INLINE float IfxQspi_getTimeQuantaFrequency(Ifx_QSPI *qspi)"
        ],
        "IfxQspi_getTransmitFifoLevel": [
            "IFX_INLINE uint8 IfxQspi_getTransmitFifoLevel(Ifx_QSPI *qspi)"
        ],
        "IfxQspi_getTransmitSrc": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxQspi_getTransmitSrc(Ifx_QSPI *qspi)"
        ],
        "IfxQspi_getTxFifoMode": [
            "IFX_INLINE IfxQspi_FifoMode IfxQspi_getTxFifoMode(Ifx_QSPI *qspi)"
        ],
        "IfxQspi_initMrstInPin": [
            "IFX_INLINE void IfxQspi_initMrstInPin(const IfxQspi_Mrst_In *mrstIn, IfxPort_InputMode mrstInMode)"
        ],
        "IfxQspi_initMrstOutPin": [
            "IFX_INLINE void IfxQspi_initMrstOutPin(const IfxQspi_Mrst_Out *mrstOut, IfxPort_OutputMode mrstOutMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxQspi_initMtsrInPin": [
            "IFX_INLINE void IfxQspi_initMtsrInPin(const IfxQspi_Mtsr_In *mtsrIn, IfxPort_InputMode mtsrInMode)"
        ],
        "IfxQspi_initMtsrOutPin": [
            "IFX_INLINE void IfxQspi_initMtsrOutPin(const IfxQspi_Mtsr_Out *mtsrOut, IfxPort_OutputMode mtsrOutMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxQspi_initSclkInPin": [
            "IFX_INLINE void IfxQspi_initSclkInPin(const IfxQspi_Sclk_In *sclkIn, IfxPort_InputMode sclkInMode)"
        ],
        "IfxQspi_initSclkOutPin": [
            "IFX_INLINE void IfxQspi_initSclkOutPin(const IfxQspi_Sclk_Out *sclkOut, IfxPort_OutputMode sclkOutMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxQspi_initSlsi": [
            "IFX_INLINE void IfxQspi_initSlsi(const IfxQspi_Slsi_In *slsi, IfxPort_InputMode slsiMode)"
        ],
        "IfxQspi_initSlso": [
            "IFX_INLINE void IfxQspi_initSlso(const IfxQspi_Slso_Out *slso, IfxPort_OutputMode slsoMode, IfxPort_PadDriver padDriver, IfxPort_OutputIdx outIndex)"
        ],
        "IfxQspi_isModuleEnabled": [
            "IFX_INLINE boolean IfxQspi_isModuleEnabled(Ifx_QSPI *qspi)"
        ],
        "IfxQspi_pause": [
            "IFX_INLINE void IfxQspi_pause(Ifx_QSPI *qspi)"
        ],
        "IfxQspi_permutateBigEndian": [
            "IFX_INLINE void IfxQspi_permutateBigEndian(Ifx_QSPI *qspi, IfxQspi_ChannelId channelId, uint8 bigEndian)"
        ],
        "IfxQspi_readReceiveFifo": [
            "IFX_INLINE uint32 IfxQspi_readReceiveFifo(Ifx_QSPI *qspi)"
        ],
        "IfxQspi_requestReset": [
            "IFX_INLINE void IfxQspi_requestReset(Ifx_QSPI *qspi, IfxQspi_Reset reset)"
        ],
        "IfxQspi_run": [
            "IFX_INLINE void IfxQspi_run(Ifx_QSPI *qspi)"
        ],
        "IfxQspi_setBitsegment1": [
            "IFX_INLINE void IfxQspi_setBitsegment1(Ifx_QSPI *qspi, IfxQspi_ChannelId channelId, uint8 bitSegment1)"
        ],
        "IfxQspi_setBitsegment2": [
            "IFX_INLINE void IfxQspi_setBitsegment2(Ifx_QSPI *qspi, IfxQspi_ChannelId channelId, uint8 bitSegment2)"
        ],
        "IfxQspi_setBitsegment3": [
            "IFX_INLINE void IfxQspi_setBitsegment3(Ifx_QSPI *qspi, IfxQspi_ChannelId channelId, uint8 bitSegment3)"
        ],
        "IfxQspi_setDisableModuleRequest": [
            "IFX_INLINE void IfxQspi_setDisableModuleRequest(Ifx_QSPI *qspi)"
        ],
        "IfxQspi_setEnableModuleRequest": [
            "IFX_INLINE void IfxQspi_setEnableModuleRequest(Ifx_QSPI *qspi)"
        ],
        "IfxQspi_setMoveCounterInterruptAfterLastEnabled": [
            "IFX_INLINE void IfxQspi_setMoveCounterInterruptAfterLastEnabled(Ifx_QSPI *qspi, boolean interruptEnabled)"
        ],
        "IfxQspi_setMoveCounterInterruptAfterLastFlag": [
            "IFX_INLINE void IfxQspi_setMoveCounterInterruptAfterLastFlag(Ifx_QSPI *qspi, boolean setInterrupt)"
        ],
        "IfxQspi_setMoveCounterInterruptBeforeLastEnabled": [
            "IFX_INLINE void IfxQspi_setMoveCounterInterruptBeforeLastEnabled(Ifx_QSPI *qspi, boolean interruptEnabled)"
        ],
        "IfxQspi_setMoveCounterInterruptBeforeLastFlag": [
            "IFX_INLINE void IfxQspi_setMoveCounterInterruptBeforeLastFlag(Ifx_QSPI *qspi, boolean setInterrupt)"
        ],
        "IfxQspi_setMoveCounterPrescalerTrailingDelay": [
            "IFX_INLINE void IfxQspi_setMoveCounterPrescalerTrailingDelay(Ifx_QSPI *qspi, const float baudrate)"
        ],
        "IfxQspi_setReceiveFifoInterrruptThreshold": [
            "IFX_INLINE void IfxQspi_setReceiveFifoInterrruptThreshold(Ifx_QSPI *qspi, IfxQspi_RxFifoInt rxFifoInt)"
        ],
        "IfxQspi_setRxFifoMode": [
            "IFX_INLINE void IfxQspi_setRxFifoMode(Ifx_QSPI *qspi, IfxQspi_FifoMode mode)"
        ],
        "IfxQspi_setSleepMode": [
            "IFX_INLINE void IfxQspi_setSleepMode(Ifx_QSPI *qspi, IfxQspi_SleepMode mode)"
        ],
        "IfxQspi_setTimeQuantum": [
            "IFX_INLINE void IfxQspi_setTimeQuantum(Ifx_QSPI *qspi, IfxQspi_ChannelId channelId, uint32 timeQuantum)"
        ],
        "IfxQspi_setTransmitFifoInterrruptThreshold": [
            "IFX_INLINE void IfxQspi_setTransmitFifoInterrruptThreshold(Ifx_QSPI *qspi, IfxQspi_TxFifoInt txFifoInt)"
        ],
        "IfxQspi_setTxFifoMode": [
            "IFX_INLINE void IfxQspi_setTxFifoMode(Ifx_QSPI *qspi, IfxQspi_FifoMode mode)"
        ],
        "IfxQspi_trail2InjectionEnabled": [
            "IFX_INLINE void IfxQspi_trail2InjectionEnabled(Ifx_QSPI *qspi, boolean trail2Enabled)"
        ],
        "IfxQspi_writeBasicConfiguration": [
            "IFX_INLINE void IfxQspi_writeBasicConfiguration(Ifx_QSPI *qspi, uint32 baconVal)"
        ],
        "IfxQspi_writeBasicConfigurationBeginStream": [
            "IFX_INLINE void IfxQspi_writeBasicConfigurationBeginStream(Ifx_QSPI *qspi, uint32 baconVal)"
        ],
        "IfxQspi_writeBasicConfigurationEndStream": [
            "IFX_INLINE void IfxQspi_writeBasicConfigurationEndStream(Ifx_QSPI *qspi, uint32 baconVal)"
        ],
        "IfxQspi_writeExtendedConfiguration": [
            "IFX_INLINE void IfxQspi_writeExtendedConfiguration(Ifx_QSPI *qspi, IfxQspi_ChannelId channelId, uint32 econVal)"
        ],
        "IfxQspi_writeMixedDataTransmitFifo": [
            "IFX_INLINE void IfxQspi_writeMixedDataTransmitFifo(Ifx_QSPI *qspi, uint32 mixEntryVal)"
        ],
        "IfxQspi_writeTransmitFifo": [
            "IFX_INLINE void IfxQspi_writeTransmitFifo(Ifx_QSPI *qspi, uint32 data)"
        ],
        "IfxQspi_isModuleSuspended": [
            "IFX_INLINE boolean IfxQspi_isModuleSuspended(Ifx_QSPI *qspi)"
        ],
        "IfxQspi_setSuspendMode": [
            "IFX_INLINE void IfxQspi_setSuspendMode(Ifx_QSPI *qspi, IfxQspi_SuspendMode mode)"
        ],
        "IfxQspi_initMrstInPinWithPadLevel": [
            "IFX_INLINE void IfxQspi_initMrstInPinWithPadLevel(const IfxQspi_Mrst_In *mrstIn, IfxPort_InputMode mrstInMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxQspi_initMtsrInPinWithPadLevel": [
            "IFX_INLINE void IfxQspi_initMtsrInPinWithPadLevel(const IfxQspi_Mtsr_In *mtsrIn, IfxPort_InputMode mtsrInMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxQspi_initSclkInPinWithPadLevel": [
            "IFX_INLINE void IfxQspi_initSclkInPinWithPadLevel(const IfxQspi_Sclk_In *sclkIn, IfxPort_InputMode sclkInMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxQspi_initSlsiWithPadLevel": [
            "IFX_INLINE void IfxQspi_initSlsiWithPadLevel(const IfxQspi_Slsi_In *slsi, IfxPort_InputMode slsiMode, IfxPort_PadDriver padDriver)"
        ]
    },
    "IfxScuCcu.h": {
        "IfxScuCcu_clearTrapStatusFlag": [
            "IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request)"
        ],
        "IfxScuCcu_configureCcuInitialStep": [
            "IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg)"
        ],
        "IfxScuCcu_distributeClockInline": [
            "IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig)"
        ],
        "IfxScuCcu_getAdcFrequency": [
            "IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void)"
        ],
        "IfxScuCcu_getAsclinFFrequency": [
            "IFX_INLINE float32 IfxScuCcu_getAsclinFFrequency(void)"
        ],
        "IfxScuCcu_getEvrFrequency": [
            "IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void)"
        ],
        "IfxScuCcu_getGethFrequency": [
            "IFX_INLINE float32 IfxScuCcu_getGethFrequency(void)"
        ],
        "IfxScuCcu_getGtmFrequency": [
            "IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)"
        ],
        "IfxScuCcu_getI2cFrequency": [
            "IFX_INLINE float32 IfxScuCcu_getI2cFrequency(void)"
        ],
        "IfxScuCcu_getMcanhFrequency": [
            "IFX_INLINE float32 IfxScuCcu_getMcanhFrequency(void)"
        ],
        "IfxScuCcu_getOsc0Frequency": [
            "IFX_INLINE float32 IfxScuCcu_getOsc0Frequency(void)"
        ],
        "IfxScuCcu_getOscFrequency": [
            "IFX_INLINE float32 IfxScuCcu_getOscFrequency(void)"
        ],
        "IfxScuCcu_getSourceSelection": [
            "IFX_INLINE IfxScuCcu_PllInputClockSelection IfxScuCcu_getSourceSelection(void)"
        ],
        "IfxScuCcu_getStmFrequency": [
            "IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)"
        ],
        "IfxScuCcu_getTrapDisableFlag": [
            "IFX_INLINE boolean IfxScuCcu_getTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request)"
        ],
        "IfxScuCcu_getTrapStatusFlag": [
            "IFX_INLINE boolean IfxScuCcu_getTrapStatusFlag(IfxScuCcu_Traprequest request)"
        ],
        "IfxScuCcu_setTrapDisableFlag": [
            "IFX_INLINE void IfxScuCcu_setTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request)"
        ],
        "IfxScuCcu_setTrapStatusFlag": [
            "IFX_INLINE void IfxScuCcu_setTrapStatusFlag(IfxScuCcu_Traprequest request)"
        ],
        "IfxScuCcu_throttleSysPllClockInline": [
            "IFX_INLINE boolean IfxScuCcu_throttleSysPllClockInline(const IfxScuCcu_PllThrottleConfig *pllThrottleConfig)"
        ],
        "IfxScuCcu_wait": [
            "IFX_INLINE void IfxScuCcu_wait(float32 timeSec)"
        ],
        "IfxScuCcu_waitWithWdtService": [
            "IFX_INLINE void IfxScuCcu_waitWithWdtService(float32 timeSec)"
        ],
        "IfxScuCcu_switchToLowPowerMode": [
            "IFX_INLINE void IfxScuCcu_switchToLowPowerMode(IfxScuCcu_LowPowerDivRatio lpDiv)"
        ],
        "IfxScuCcu_switchToNormalMode": [
            "IFX_INLINE void IfxScuCcu_switchToNormalMode(const uint32 ccucon0)"
        ]
    },
    "IfxScuEru.h": {
        "IfxScuEru_disableInputFilter": [
            "IFX_INLINE void IfxScuEru_disableInputFilter(IfxScuEru_InputFilterRequestSelection requestSelection)"
        ],
        "IfxScuEru_enableInputFilter": [
            "IFX_INLINE void IfxScuEru_enableInputFilter(IfxScuEru_InputFilterRequestSelection requestSelection)"
        ],
        "IfxScuEru_initReqPin": [
            "IFX_INLINE void IfxScuEru_initReqPin(IfxScu_Req_In *req, IfxPort_InputMode inputMode)"
        ],
        "IfxScuEru_setInputFilterDepth": [
            "IFX_INLINE void IfxScuEru_setInputFilterDepth(IfxScuEru_InputFilterDepth depth)"
        ],
        "IfxScuEru_setInputFilterPredivider": [
            "IFX_INLINE void IfxScuEru_setInputFilterPredivider(IfxScuEru_InputFilterPredivider predivider)"
        ]
    },
    "IfxScuLbist.h": {
        "IfxScuLbist_evaluateResult": [
            "IFX_INLINE boolean IfxScuLbist_evaluateResult(const uint32 signature)"
        ],
        "IfxScuLbist_initParameterSetInline": [
            "IFX_INLINE void IfxScuLbist_initParameterSetInline(IfxScuLbist_ParameterSet *parameterSet)"
        ],
        "IfxScuLbist_isDone": [
            "IFX_INLINE boolean IfxScuLbist_isDone(void)"
        ],
        "IfxScuLbist_multiTriggersInline": [
            "IFX_INLINE boolean IfxScuLbist_multiTriggersInline(const IfxScuLbist_MultiTriggerConfig *multiTriggerConfig)"
        ],
        "IfxScuLbist_retriggerInline": [
            "IFX_INLINE void IfxScuLbist_retriggerInline(const IfxScuLbist_ParameterSet *parameterSet)"
        ],
        "IfxScuLbist_triggerInline": [
            "IFX_INLINE void IfxScuLbist_triggerInline(const IfxScuLbist_ParameterSet *parameterSet)"
        ]
    },
    "IfxScuRcu.h": {
        "IfxScuRcu_clearColdResetStatus": [
            "IFX_INLINE void IfxScuRcu_clearColdResetStatus(void)"
        ],
        "IfxScuRcu_configureResetRequestTrigger": [
            "IFX_INLINE void IfxScuRcu_configureResetRequestTrigger(IfxScuRcu_Trigger trigger, IfxScuRcu_ResetType resetType)"
        ],
        "IfxScuRcu_isApplicationReset": [
            "IFX_INLINE boolean IfxScuRcu_isApplicationReset(uint32 rawResetStatus)"
        ],
        "IfxScuRcu_readRawResetStatus": [
            "IFX_INLINE uint32 IfxScuRcu_readRawResetStatus(void)"
        ]
    },
    "IfxScuWdt.asm.h": {
        "IfxScuWdt_calculateLfsr": [
            "IFX_INLINE uint16 IfxScuWdt_calculateLfsr(uint16 pwd)",
            "IFX_INLINE uint16 IfxScuWdt_calculateLfsr(uint16 pwd)",
            "IFX_INLINE uint16 IfxScuWdt_calculateLfsr(uint16 pwd)",
            "IFX_INLINE uint16 IfxScuWdt_calculateLfsr(uint16 pwd)"
        ],
        "IfxScuWdt_calculateLfsr_asm": [
            "asm uint16 IfxScuWdt_calculateLfsr_asm(uint16 password)"
        ]
    },
    "IfxScuWdt.c": {
        "IfxScuWdt_changeCpuWatchdogPassword": [
            "void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword)"
        ],
        "IfxScuWdt_changeCpuWatchdogReload": [
            "void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload)"
        ],
        "IfxScuWdt_changeGlobalEndinitPassword": [
            "void IfxScuWdt_changeGlobalEndinitPassword(uint16 password, uint16 newPassword)"
        ],
        "IfxScuWdt_changeGlobalSafetyEndinitPassword": [
            "void IfxScuWdt_changeGlobalSafetyEndinitPassword(uint16 password, uint16 newPassword)"
        ],
        "IfxScuWdt_changeSafetyWatchdogPassword": [
            "void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword)"
        ],
        "IfxScuWdt_changeSafetyWatchdogReload": [
            "void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload)"
        ],
        "IfxScuWdt_clearCpuEndinit": [
            "void IfxScuWdt_clearCpuEndinit(uint16 password)"
        ],
        "IfxScuWdt_clearGlobalEndinit": [
            "void IfxScuWdt_clearGlobalEndinit(uint16 password)"
        ],
        "IfxScuWdt_clearGlobalSafetyEndinit": [
            "void IfxScuWdt_clearGlobalSafetyEndinit(uint16 password)"
        ],
        "IfxScuWdt_clearSafetyEndinit": [
            "void IfxScuWdt_clearSafetyEndinit(uint16 password)"
        ],
        "IfxScuWdt_disableCpuWatchdog": [
            "void IfxScuWdt_disableCpuWatchdog(uint16 password)"
        ],
        "IfxScuWdt_disableSafetyWatchdog": [
            "void IfxScuWdt_disableSafetyWatchdog(uint16 password)"
        ],
        "IfxScuWdt_enableCpuWatchdog": [
            "void IfxScuWdt_enableCpuWatchdog(uint16 password)"
        ],
        "IfxScuWdt_enableSafetyWatchdog": [
            "void IfxScuWdt_enableSafetyWatchdog(uint16 password)"
        ],
        "IfxScuWdt_getCpuWatchdogPassword": [
            "uint16 IfxScuWdt_getCpuWatchdogPassword(void)"
        ],
        "IfxScuWdt_getCpuWatchdogEndInit": [
            "boolean IfxScuWdt_getCpuWatchdogEndInit(void)"
        ],
        "IfxScuWdt_getGlobalEndinitPassword": [
            "uint16 IfxScuWdt_getGlobalEndinitPassword(void)"
        ],
        "IfxScuWdt_getGlobalSafetyEndinitPassword": [
            "uint16 IfxScuWdt_getGlobalSafetyEndinitPassword(void)"
        ],
        "IfxScuWdt_getSafetyWatchdogPassword": [
            "uint16 IfxScuWdt_getSafetyWatchdogPassword(void)"
        ],
        "IfxScuWdt_initConfig": [
            "void IfxScuWdt_initConfig(IfxScuWdt_Config *config)"
        ],
        "IfxScuWdt_initCpuWatchdog": [
            "void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config)"
        ],
        "IfxScuWdt_initSafetyWatchdog": [
            "void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config)"
        ],
        "IfxScuWdt_serviceCpuWatchdog": [
            "void IfxScuWdt_serviceCpuWatchdog(uint16 password)"
        ],
        "IfxScuWdt_serviceSafetyWatchdog": [
            "void IfxScuWdt_serviceSafetyWatchdog(uint16 password)"
        ],
        "IfxScuWdt_setCpuEndinit": [
            "void IfxScuWdt_setCpuEndinit(uint16 password)"
        ],
        "IfxScuWdt_setGlobalEndinit": [
            "void IfxScuWdt_setGlobalEndinit(uint16 password)"
        ],
        "IfxScuWdt_setGlobalSafetyEndinit": [
            "void IfxScuWdt_setGlobalSafetyEndinit(uint16 password)"
        ],
        "IfxScuWdt_setSafetyEndinit": [
            "void IfxScuWdt_setSafetyEndinit(uint16 password)"
        ],
        "IfxScuWdt_enableWatchdogWithDebugger": [
            "boolean IfxScuWdt_enableWatchdogWithDebugger(void)"
        ],
        "IfxScuWdt_getCpuWatchdogStatus": [
            "uint8 IfxScuWdt_getCpuWatchdogStatus(void)"
        ]
    },
    "IfxScuWdt.h": {
        "IfxScuWdt_clearCpuEndinitInline": [
            "IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)"
        ],
        "IfxScuWdt_clearGlobalSafetyEndinitInline": [
            "IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password)"
        ],
        "IfxScuWdt_clearSafetyEndinitInline": [
            "IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)"
        ],
        "IfxScuWdt_getCpuWatchdogPasswordInline": [
            "IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)"
        ],
        "IfxScuWdt_getCpuWatchdogEndInitInline": [
            "IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)"
        ],
        "IfxScuWdt_getGlobalSafetyEndinitPasswordInline": [
            "IFX_INLINE uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void)"
        ],
        "IfxScuWdt_getSafetyWatchdogEndInit": [
            "IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)"
        ],
        "IfxScuWdt_getSafetyWatchdogPasswordInline": [
            "IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)"
        ],
        "IfxScuWdt_setCpuEndinitInline": [
            "IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)"
        ],
        "IfxScuWdt_setGlobalSafetyEndinitInline": [
            "IFX_INLINE void IfxScuWdt_setGlobalSafetyEndinitInline(uint16 password)"
        ],
        "IfxScuWdt_setSafetyEndinitInline": [
            "IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)"
        ]
    },
    "IfxSent_Sent.h": {
        "IfxSent_Sent_getAndClearInterruptStatus": [
            "IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_Sent_getAndClearInterruptStatus(IfxSent_Sent_Channel *channel)"
        ]
    },
    "IfxSent.h": {
        "IfxSent_disableChannel": [
            "IFX_INLINE void IfxSent_disableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId)"
        ],
        "IfxSent_disableModule": [
            "IFX_INLINE void IfxSent_disableModule(Ifx_SENT *sent)"
        ],
        "IfxSent_enableChannel": [
            "IFX_INLINE void IfxSent_enableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId)"
        ],
        "IfxSent_enableModule": [
            "IFX_INLINE void IfxSent_enableModule(Ifx_SENT *sent)"
        ],
        "IfxSent_getAndClearInterruptStatus": [
            "IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getAndClearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId)"
        ],
        "IfxSent_getChannelInterruptStatus": [
            "IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getChannelInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId)"
        ],
        "IfxSent_getChannelSrc": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxSent_getChannelSrc(IfxSent_ChannelId channelId)"
        ],
        "IfxSent_getFrameLengthWithPausePulse": [
            "IFX_INLINE uint16 IfxSent_getFrameLengthWithPausePulse(Ifx_SENT *sent, IfxSent_ChannelId channelId)"
        ],
        "IfxSent_initSentPin": [
            "IFX_INLINE void IfxSent_initSentPin(const IfxSent_Sent_In *sentIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxSent_initSpcPin": [
            "IFX_INLINE void IfxSent_initSpcPin(const IfxSent_Spc_Out *spcOut, IfxPort_OutputMode spcOutMode, IfxPort_PadDriver padDriver)"
        ],
        "IfxSent_isModuleSuspended": [
            "IFX_INLINE boolean IfxSent_isModuleSuspended(Ifx_SENT *sent)"
        ],
        "IfxSent_setAltiInput": [
            "IFX_INLINE void IfxSent_setAltiInput(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_AlternateInput alternateInput)"
        ],
        "IfxSent_setChannelFractionalDivider": [
            "IFX_INLINE void IfxSent_setChannelFractionalDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 divider)"
        ],
        "IfxSent_setChannelPreDivider": [
            "IFX_INLINE void IfxSent_setChannelPreDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 preDivider)"
        ],
        "IfxSent_setSleepMode": [
            "IFX_INLINE void IfxSent_setSleepMode(Ifx_SENT *sent, IfxSent_SleepMode mode)"
        ],
        "IfxSent_setSuspendMode": [
            "IFX_INLINE void IfxSent_setSuspendMode(Ifx_SENT *sent, IfxSent_SuspendMode mode)"
        ],
        "IfxSent_setTimeStampPredivider": [
            "IFX_INLINE void IfxSent_setTimeStampPredivider(Ifx_SENT *sent, uint32 timeStampPreDivider)"
        ],
        "IfxSent_setWatchDogTimerLimit": [
            "IFX_INLINE void IfxSent_setWatchDogTimerLimit(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 watchDogTimerLimit)"
        ],
        "IfxSent_isModuleEnabled": [
            "IFX_INLINE boolean IfxSent_isModuleEnabled(Ifx_SENT *sent)"
        ],
        "IfxSent_getInterruptStatus": [
            "IFX_INLINE boolean IfxSent_getInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_InterruptSource source)"
        ],
        "IfxSent_clearInterruptStatus": [
            "IFX_INLINE void IfxSent_clearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_InterruptSource source)"
        ],
        "IfxSent_readReceivedData": [
            "IFX_INLINE uint32 IfxSent_readReceivedData(Ifx_SENT *sent, IfxSent_ChannelId channelId)"
        ],
        "IfxSent_readReceivedStatus": [
            "IFX_INLINE uint32 IfxSent_readReceivedStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId)"
        ],
        "IfxSent_readReceivedCrc": [
            "IFX_INLINE uint8 IfxSent_readReceivedCrc(Ifx_SENT *sent, IfxSent_ChannelId channelId)"
        ],
        "IfxSent_readReceivedChannelStatus": [
            "IFX_INLINE uint8 IfxSent_readReceivedChannelStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId)"
        ],
        "IfxSent_readReceivedStatusAndCommunicationNibble": [
            "IFX_INLINE uint8 IfxSent_readReceivedStatusAndCommunicationNibble(Ifx_SENT *sent, IfxSent_ChannelId channelId)"
        ],
        "IfxSent_readReceivedTimeStamp": [
            "IFX_INLINE uint32 IfxSent_readReceivedTimeStamp(Ifx_SENT *sent, IfxSent_ChannelId channelId)"
        ],
        "IfxSent_readSpcPulseLength": [
            "IFX_INLINE uint8 IfxSent_readSpcPulseLength(Ifx_SENT *sent, IfxSent_ChannelId channelId)"
        ],
        "IfxSent_readSpcDelayLength": [
            "IFX_INLINE uint8 IfxSent_readSpcDelayLength(Ifx_SENT *sent, IfxSent_ChannelId channelId)"
        ]
    },
    "IfxSmu_Smu.h": {},
    "IfxSmu.h": {
        "IfxSmu_clearAlarmExecutedStatus": [
            "IFX_INLINE void IfxSmu_clearAlarmExecutedStatus(IfxSmu_AlarmExecutionStatus alarmEx)"
        ],
        "IfxSmu_clearRegMonTestModeEnable": [
            "IFX_INLINE void IfxSmu_clearRegMonTestModeEnable(uint8 testModeEnable)"
        ],
        "IfxSmu_clearRegisterMonitorErrorFlag": [
            "IFX_INLINE void IfxSmu_clearRegisterMonitorErrorFlag(uint8 errorFlag)"
        ],
        "IfxSmu_clearRegisterMonitorStatus": [
            "IFX_INLINE void IfxSmu_clearRegisterMonitorStatus(uint8 statusFlag)"
        ],
        "IfxSmu_getAlarmExecutedStatus": [
            "IFX_INLINE boolean IfxSmu_getAlarmExecutedStatus(IfxSmu_AlarmExecutionStatus alarmEx)"
        ],
        "IfxSmu_getPortControlHwDir": [
            "IFX_INLINE IfxSmu_PortControlHwDir IfxSmu_getPortControlHwDir(void)"
        ],
        "IfxSmu_getPortControlHwEnable": [
            "IFX_INLINE IfxSmu_PortControlHwEnable IfxSmu_getPortControlHwEnable(void)"
        ],
        "IfxSmu_getRegisterMonitorErrorFlag": [
            "IFX_INLINE uint32 IfxSmu_getRegisterMonitorErrorFlag(void)"
        ],
        "IfxSmu_getRegisterMonitorStatus": [
            "IFX_INLINE uint32 IfxSmu_getRegisterMonitorStatus(void)"
        ],
        "IfxSmu_isModuleSuspended": [
            "IFX_INLINE boolean IfxSmu_isModuleSuspended(Ifx_SMU *smu)"
        ],
        "IfxSmu_setPortControlHwEnableAndDir": [
            "IFX_INLINE void IfxSmu_setPortControlHwEnableAndDir(IfxSmu_PortControlHwEnable portEnable, IfxSmu_PortControlHwDir hwDir)"
        ],
        "IfxSmu_setRegMonTestModeEnable": [
            "IFX_INLINE void IfxSmu_setRegMonTestModeEnable(uint8 testModeEnable)"
        ],
        "IfxSmu_setSuspendMode": [
            "IFX_INLINE void IfxSmu_setSuspendMode(Ifx_SMU *smu, IfxSmu_SuspendMode mode)"
        ],
        "IfxSmu_startAliveTest": [
            "IFX_INLINE void IfxSmu_startAliveTest(void)"
        ],
        "IfxSmu_stopAliveTest": [
            "IFX_INLINE void IfxSmu_stopAliveTest(void)"
        ],
        "IfxSmu_waitForAlarm": [
            "IFX_INLINE void IfxSmu_waitForAlarm(IfxSmu_Alarm alarm)"
        ],
        "IfxSmu_getSrcPointer": [
            "IFX_INLINE volatile Ifx_SRC_SRCR *IfxSmu_getSrcPointer(IfxSmu_InterruptRequest intRequest)"
        ]
    },
    "IfxSmuStdby.h": {
        "IfxSmuStdby_clearSmuStdbyMonBistFlags": [
            "IFX_INLINE void IfxSmuStdby_clearSmuStdbyMonBistFlags(void)"
        ],
        "IfxSmuStdby_enableAlarmStatusClear": [
            "IFX_INLINE void IfxSmuStdby_enableAlarmStatusClear(void)"
        ],
        "IfxSmuStdby_enableSmuStdby": [
            "IFX_INLINE void IfxSmuStdby_enableSmuStdby(IfxSmuStdby_SmuStdbyModuleState enable)"
        ],
        "IfxSmuStdby_enableSmuStdbyMonBist": [
            "IFX_INLINE void IfxSmuStdby_enableSmuStdbyMonBist(void)"
        ],
        "IfxSmuStdby_getSmuStdbyAlarmGroupStatus": [
            "IFX_INLINE uint32 IfxSmuStdby_getSmuStdbyAlarmGroupStatus(uint8 alarmGroup)"
        ],
        "IfxSmuStdby_getSmuStdbyAlarmStatus": [
            "IFX_INLINE uint32 IfxSmuStdby_getSmuStdbyAlarmStatus(uint8 alarmGroup, uint8 alarmNum)"
        ],
        "IfxSmuStdby_getSmuStdbyModuleStatus": [
            "IFX_INLINE IfxSmuStdby_SmuStdbyModuleState IfxSmuStdby_getSmuStdbyModuleStatus(void)"
        ],
        "IfxSmuStdby_getSmuStdbyMonBistPmsErrorFlag": [
            "IFX_INLINE boolean IfxSmuStdby_getSmuStdbyMonBistPmsErrorFlag(void)"
        ],
        "IfxSmuStdby_getSmuStdbyMonBistSmuErrorFlag": [
            "IFX_INLINE boolean IfxSmuStdby_getSmuStdbyMonBistSmuErrorFlag(void)"
        ],
        "IfxSmuStdby_getSmuStdbyMonBistTestDoneFlag": [
            "IFX_INLINE boolean IfxSmuStdby_getSmuStdbyMonBistTestDoneFlag(void)"
        ],
        "IfxSmuStdby_getSmuStdbyMonBistTestOkFlag": [
            "IFX_INLINE boolean IfxSmuStdby_getSmuStdbyMonBistTestOkFlag(void)"
        ],
        "IfxSmuStdby_getSmuStdbyMonBistTestRunFlag": [
            "IFX_INLINE boolean IfxSmuStdby_getSmuStdbyMonBistTestRunFlag(void)"
        ],
        "IfxSmuStdby_setFsp0ErrorPinActive": [
            "IFX_INLINE void IfxSmuStdby_setFsp0ErrorPinActive(IfxSmuStdby_FspErrorPinState active)"
        ],
        "IfxSmuStdby_setFsp1ErrorPinActive": [
            "IFX_INLINE void IfxSmuStdby_setFsp1ErrorPinActive(IfxSmuStdby_FspErrorPinState active)"
        ]
    },
    "IfxSrc.h": {
        "IfxSrc_clearOverrun": [
            "IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)"
        ],
        "IfxSrc_clearRequest": [
            "IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)"
        ],
        "IfxSrc_deinit": [
            "IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)"
        ],
        "IfxSrc_disable": [
            "IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)"
        ],
        "IfxSrc_enable": [
            "IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)"
        ],
        "IfxSrc_init": [
            "IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)"
        ],
        "IfxSrc_isOverrun": [
            "IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src)"
        ],
        "IfxSrc_isRequested": [
            "IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src)"
        ],
        "IfxSrc_setRequest": [
            "IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src)"
        ]
    },
    "IfxStm.h": {
        "IfxStm_get": [
            "IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)"
        ],
        "IfxStm_getCompare": [
            "IFX_INLINE uint32 IfxStm_getCompare(Ifx_STM *stm, IfxStm_Comparator comparator)"
        ],
        "IfxStm_getFrequency": [
            "IFX_INLINE float32 IfxStm_getFrequency(Ifx_STM *stm)"
        ],
        "IfxStm_getLower": [
            "IFX_INLINE uint32 IfxStm_getLower(Ifx_STM *stm)"
        ],
        "IfxStm_getOffset12Timer": [
            "IFX_INLINE uint32 IfxStm_getOffset12Timer(Ifx_STM *stm)"
        ],
        "IfxStm_getOffset16Timer": [
            "IFX_INLINE uint32 IfxStm_getOffset16Timer(Ifx_STM *stm)"
        ],
        "IfxStm_getOffset20Timer": [
            "IFX_INLINE uint32 IfxStm_getOffset20Timer(Ifx_STM *stm)"
        ],
        "IfxStm_getOffset32Timer": [
            "IFX_INLINE uint32 IfxStm_getOffset32Timer(Ifx_STM *stm)"
        ],
        "IfxStm_getOffset4Timer": [
            "IFX_INLINE uint32 IfxStm_getOffset4Timer(Ifx_STM *stm)"
        ],
        "IfxStm_getOffset8Timer": [
            "IFX_INLINE uint32 IfxStm_getOffset8Timer(Ifx_STM *stm)"
        ],
        "IfxStm_getOffsetTimer": [
            "IFX_INLINE uint32 IfxStm_getOffsetTimer(Ifx_STM *stm, uint8 offset)"
        ],
        "IfxStm_getTicksFromMicroseconds": [
            "IFX_INLINE sint32 IfxStm_getTicksFromMicroseconds(Ifx_STM *stm, uint32 microSeconds)"
        ],
        "IfxStm_getTicksFromMilliseconds": [
            "IFX_INLINE sint32 IfxStm_getTicksFromMilliseconds(Ifx_STM *stm, uint32 milliSeconds)"
        ],
        "IfxStm_increaseCompare": [
            "IFX_INLINE void IfxStm_increaseCompare(Ifx_STM *stm, IfxStm_Comparator comparator, uint32 ticks)"
        ],
        "IfxStm_isModuleSuspended": [
            "IFX_INLINE boolean IfxStm_isModuleSuspended(Ifx_STM *stm)"
        ],
        "IfxStm_setSleepMode": [
            "IFX_INLINE void IfxStm_setSleepMode(Ifx_STM *stm, IfxStm_SleepMode mode)"
        ],
        "IfxStm_setSuspendMode": [
            "IFX_INLINE void IfxStm_setSuspendMode(Ifx_STM *stm, IfxStm_SuspendMode mode)"
        ],
        "IfxStm_updateCompare": [
            "IFX_INLINE void IfxStm_updateCompare(Ifx_STM *stm, IfxStm_Comparator comparator, uint32 ticks)"
        ],
        "IfxStm_waitTicks": [
            "IFX_INLINE void IfxStm_waitTicks(Ifx_STM *stm, uint32 ticks)"
        ]
    },
    "IfxStm_Timer.h": {},
    "IfxAsclin_cfg.h": {},
    "IfxCan_cfg.h": {},
    "IfxCcu6_cfg.h": {},
    "IfxConvctrl_cfg.h": {},
    "IfxCpu_cfg.h": {},
    "IfxDma_cfg.h": {},
    "IfxDts_cfg.h": {},
    "IfxEdsadc_cfg.h": {},
    "IfxEray_cfg.h": {},
    "IfxEvadc_cfg.h": {},
    "IfxFce_cfg.h": {},
    "IfxFlash_cfg.h": {},
    "IfxGeth_cfg.h": {},
    "IfxGlobal_cfg.h": {},
    "IfxGpt12_cfg.h": {},
    "IfxGtm_cfg.h": {},
    "IfxHssl_cfg.h": {},
    "IfxI2c_cfg.h": {},
    "IfxIom_cfg.h": {},
    "IfxLmu_cfg.h": {},
    "IfxMsc_cfg.h": {},
    "IfxMtu_cfg.h": {},
    "IfxPms_cfg.h": {},
    "IfxPort_cfg.c": {},
    "IfxPort_cfg.h": {},
    "IfxPsi5s_cfg.h": {},
    "IfxPsi5_cfg.h": {},
    "IfxQspi_cfg.h": {},
    "IfxScu_cfg.h": {},
    "IfxSent_cfg.h": {},
    "IfxSmu_cfg.h": {},
    "IfxSrc_cfg.h": {},
    "IfxStm_cfg.h": {},
    "Ifx_CircularBuffer.h": {},
    "Ifx_Fifo.h": {
        "Ifx_Fifo_flush": [
            "IFX_INLINE boolean Ifx_Fifo_flush(Ifx_Fifo *fifo, Ifx_TickTime timeout)"
        ],
        "Ifx_Fifo_readCount": [
            "IFX_INLINE Ifx_SizeT Ifx_Fifo_readCount(Ifx_Fifo *fifo)"
        ],
        "Ifx_Fifo_writeCount": [
            "IFX_INLINE Ifx_SizeT Ifx_Fifo_writeCount(Ifx_Fifo *fifo)"
        ],
        "Ifx_Fifo_isEmpty": [
            "IFX_INLINE boolean Ifx_Fifo_isEmpty(Ifx_Fifo *fifo)"
        ]
    },
    "Ifx_InternalMux.h": {},
    "IfxAsclin_PinMap.h": {},
    "IfxCan_PinMap.h": {},
    "IfxCcu6_PinMap.h": {},
    "IfxDmu_PinMap.h": {},
    "IfxEdsadc_PinMap.h": {},
    "IfxEray_PinMap.h": {},
    "IfxEvadc_PinMap.h": {},
    "IfxGeth_PinMap.h": {},
    "IfxGpt12_PinMap.h": {},
    "IfxGtm_PinMap.h": {},
    "IfxI2c_PinMap.h": {},
    "IfxMsc_PinMap.h": {},
    "IfxPms_PinMap.h": {},
    "IfxPort_PinMap.h": {},
    "IfxPsi5s_PinMap.h": {},
    "IfxPsi5_PinMap.h": {},
    "IfxQspi_PinMap.h": {},
    "IfxScu_PinMap.h": {},
    "IfxSent_PinMap.h": {},
    "IfxSmu_PinMap.h": {},
    "CompilerDcc.h": {},
    "CompilerGhs.h": {},
    "CompilerGnuc.h": {},
    "Compilers.h": {},
    "CompilerTasking.h": {},
    "IfxAsclin_bf.h": {},
    "IfxAsclin_reg.h": {},
    "IfxAsclin_regdef.h": {},
    "IfxCan_bf.h": {},
    "IfxCan_reg.h": {},
    "IfxCan_regdef.h": {},
    "IfxCbs_bf.h": {},
    "IfxCbs_reg.h": {},
    "IfxCbs_regdef.h": {},
    "IfxCcu6_bf.h": {},
    "IfxCcu6_reg.h": {},
    "IfxCcu6_regdef.h": {},
    "IfxConverter_bf.h": {},
    "IfxConverter_reg.h": {},
    "IfxConverter_regdef.h": {},
    "IfxCpu_bf.h": {},
    "IfxCpu_reg.h": {},
    "IfxCpu_regdef.h": {},
    "IfxDam_bf.h": {},
    "IfxDam_reg.h": {},
    "IfxDam_regdef.h": {},
    "IfxDma_bf.h": {},
    "IfxDma_reg.h": {},
    "IfxDma_regdef.h": {},
    "IfxDmu_bf.h": {},
    "IfxDmu_reg.h": {},
    "IfxDmu_regdef.h": {},
    "IfxDom_bf.h": {},
    "IfxDom_reg.h": {},
    "IfxDom_regdef.h": {},
    "IfxEdsadc_bf.h": {},
    "IfxEdsadc_reg.h": {},
    "IfxEdsadc_regdef.h": {},
    "IfxEray_bf.h": {},
    "IfxEray_reg.h": {},
    "IfxEray_regdef.h": {},
    "IfxEvadc_bf.h": {},
    "IfxEvadc_reg.h": {},
    "IfxEvadc_regdef.h": {},
    "IfxFce_bf.h": {},
    "IfxFce_reg.h": {},
    "IfxFce_regdef.h": {},
    "IfxFsi_bf.h": {},
    "IfxFsi_reg.h": {},
    "IfxFsi_regdef.h": {},
    "IfxGeth_bf.h": {},
    "IfxGeth_reg.h": {},
    "IfxGeth_regdef.h": {},
    "IfxGpt12_bf.h": {},
    "IfxGpt12_reg.h": {},
    "IfxGpt12_regdef.h": {},
    "IfxGtm_bf.h": {},
    "IfxGtm_reg.h": {},
    "IfxGtm_regdef.h": {},
    "IfxHsct_bf.h": {},
    "IfxHsct_reg.h": {},
    "IfxHsct_regdef.h": {},
    "IfxHssl_bf.h": {},
    "IfxHssl_reg.h": {},
    "IfxHssl_regdef.h": {},
    "IfxI2c_bf.h": {},
    "IfxI2c_reg.h": {},
    "IfxI2c_regdef.h": {},
    "IfxInt_bf.h": {},
    "IfxInt_reg.h": {},
    "IfxInt_regdef.h": {},
    "IfxIom_bf.h": {},
    "IfxIom_reg.h": {},
    "IfxIom_regdef.h": {},
    "IfxMinimcds_bf.h": {},
    "IfxMinimcds_reg.h": {},
    "IfxMinimcds_regdef.h": {},
    "IfxMsc_bf.h": {},
    "IfxMsc_reg.h": {},
    "IfxMsc_regdef.h": {},
    "IfxMtu_bf.h": {},
    "IfxMtu_reg.h": {},
    "IfxMtu_regdef.h": {},
    "IfxPfi_bf.h": {},
    "IfxPfi_reg.h": {},
    "IfxPfi_regdef.h": {},
    "IfxPms_bf.h": {},
    "IfxPms_reg.h": {},
    "IfxPms_regdef.h": {},
    "IfxPmu_bf.h": {},
    "IfxPmu_reg.h": {},
    "IfxPmu_regdef.h": {},
    "IfxPort_bf.h": {},
    "IfxPort_reg.h": {},
    "IfxPort_regdef.h": {},
    "IfxPsi5s_bf.h": {},
    "IfxPsi5s_reg.h": {},
    "IfxPsi5s_regdef.h": {},
    "IfxPsi5_bf.h": {},
    "IfxPsi5_reg.h": {},
    "IfxPsi5_regdef.h": {},
    "IfxQspi_bf.h": {},
    "IfxQspi_reg.h": {},
    "IfxQspi_regdef.h": {},
    "IfxSbcu_bf.h": {},
    "IfxSbcu_reg.h": {},
    "IfxSbcu_regdef.h": {},
    "IfxScu_bf.h": {},
    "IfxScu_reg.h": {},
    "IfxScu_regdef.h": {},
    "IfxSent_bf.h": {},
    "IfxSent_reg.h": {},
    "IfxSent_regdef.h": {},
    "IfxSmu_bf.h": {},
    "IfxSmu_reg.h": {},
    "IfxSmu_regdef.h": {},
    "IfxSrc_bf.h": {},
    "IfxSrc_reg.h": {},
    "IfxSrc_regdef.h": {},
    "IfxStm_bf.h": {},
    "IfxStm_reg.h": {},
    "IfxStm_regdef.h": {},
    "Ifx_reg.h": {},
    "Ifx_TypesReg.h": {},
    "Ifx_Ssw.h": {},
    "Ifx_Ssw_Compilers.h": {},
    "Ifx_Ssw_CompilersDcc.h": {
        "Ifx_Ssw_moveToDataParam0": [
            "asm volatile void Ifx_Ssw_moveToDataParam0(unsigned int var)"
        ],
        "Ifx_Ssw_getDataParam0": [
            "asm volatile unsigned int Ifx_Ssw_getDataParam0(void)"
        ],
        "Ifx_Ssw_jumpToFunction": [
            "asm volatile void Ifx_Ssw_jumpToFunction(void *fun)"
        ],
        "Ifx_Ssw_jumpToFunctionWithLink": [
            "asm volatile void Ifx_Ssw_jumpToFunctionWithLink(void *fun)"
        ],
        "Ifx_Ssw_jumpBackToLink": [
            "asm void Ifx_Ssw_jumpBackToLink(void)"
        ],
        "Ifx_Ssw_C_InitInline": [
            "IFX_SSW_INLINE void Ifx_Ssw_C_InitInline(void)"
        ]
    },
    "Ifx_Ssw_CompilersGhs.h": {
        "Ifx_Ssw_NOP": [
            "IFX_SSW_INLINE void Ifx_Ssw_NOP(void)"
        ],
        "Ifx_Ssw_DSYNC": [
            "IFX_SSW_INLINE void Ifx_Ssw_DSYNC(void)"
        ],
        "Ifx_Ssw_ISYNC": [
            "IFX_SSW_INLINE void Ifx_Ssw_ISYNC(void)"
        ],
        "Ifx_Ssw_MINU": [
            "IFX_SSW_INLINE unsigned int Ifx_Ssw_MINU(unsigned int a, unsigned int b)"
        ],
        "Ifx_Ssw_moveToDataParam0": [
            "IFX_SSW_INLINE void Ifx_Ssw_moveToDataParam0(unsigned int var)"
        ],
        "Ifx_Ssw_getDataParam0": [
            "IFX_SSW_INLINE unsigned int Ifx_Ssw_getDataParam0(void)"
        ],
        "Ifx_Ssw_jumpToFunction": [
            "IFX_SSW_INLINE void Ifx_Ssw_jumpToFunction(void (*fun)(void))"
        ],
        "Ifx_Ssw_jumpToFunctionWithLink": [
            "IFX_SSW_INLINE void Ifx_Ssw_jumpToFunctionWithLink(void *fun)"
        ],
        "Ifx_Ssw_jumpBackToLink": [
            "IFX_SSW_INLINE void Ifx_Ssw_jumpBackToLink(void)"
        ],
        "Ifx_Ssw_C_InitInline": [
            "IFX_SSW_INLINE void Ifx_Ssw_C_InitInline(void)"
        ]
    },
    "Ifx_Ssw_CompilersGnuc.h": {
        "Ifx_Ssw_NOP": [
            "IFX_SSW_INLINE void Ifx_Ssw_NOP(void)"
        ],
        "Ifx_Ssw_DSYNC": [
            "IFX_SSW_INLINE void Ifx_Ssw_DSYNC(void)"
        ],
        "Ifx_Ssw_ISYNC": [
            "IFX_SSW_INLINE void Ifx_Ssw_ISYNC(void)"
        ],
        "Ifx_Ssw_MINU": [
            "IFX_SSW_INLINE unsigned int Ifx_Ssw_MINU(unsigned int a, unsigned int b)"
        ],
        "Ifx_Ssw_moveToDataParam0": [
            "IFX_SSW_INLINE void Ifx_Ssw_moveToDataParam0(unsigned int var)"
        ],
        "Ifx_Ssw_getDataParam0": [
            "IFX_SSW_INLINE unsigned int Ifx_Ssw_getDataParam0(void)"
        ],
        "Ifx_Ssw_jumpToFunction": [
            "IFX_SSW_INLINE void Ifx_Ssw_jumpToFunction(void (*fun)(void))"
        ],
        "Ifx_Ssw_jumpToFunctionWithLink": [
            "IFX_SSW_INLINE void Ifx_Ssw_jumpToFunctionWithLink(void *fun)"
        ],
        "Ifx_Ssw_jumpBackToLink": [
            "IFX_SSW_INLINE void Ifx_Ssw_jumpBackToLink(void)"
        ],
        "Ifx_Ssw_C_InitInline": [
            "IFX_SSW_INLINE void Ifx_Ssw_C_InitInline(void)"
        ]
    },
    "Ifx_Ssw_CompilersTasking.h": {
        "Ifx_Ssw_NOP": [
            "IFX_SSW_INLINE void Ifx_Ssw_NOP(void)"
        ],
        "Ifx_Ssw_DSYNC": [
            "IFX_SSW_INLINE void Ifx_Ssw_DSYNC(void)"
        ],
        "Ifx_Ssw_ISYNC": [
            "IFX_SSW_INLINE void Ifx_Ssw_ISYNC(void)"
        ],
        "Ifx_Ssw_MINU": [
            "IFX_SSW_INLINE unsigned int Ifx_Ssw_MINU(unsigned int a, unsigned int b)"
        ],
        "Ifx_Ssw_moveToDataParam0": [
            "IFX_SSW_INLINE void Ifx_Ssw_moveToDataParam0(unsigned int var)"
        ],
        "Ifx_Ssw_getDataParam0": [
            "IFX_SSW_INLINE unsigned int Ifx_Ssw_getDataParam0(void)"
        ],
        "Ifx_Ssw_jumpToFunction": [
            "IFX_SSW_INLINE void Ifx_Ssw_jumpToFunction(void *fun)"
        ],
        "Ifx_Ssw_jumpToFunctionWithLink": [
            "IFX_SSW_INLINE void Ifx_Ssw_jumpToFunctionWithLink(void *fun)"
        ],
        "Ifx_Ssw_jumpBackToLink": [
            "IFX_SSW_INLINE void Ifx_Ssw_jumpBackToLink(void)"
        ],
        "Ifx_Ssw_C_InitInline": [
            "IFX_SSW_INLINE void Ifx_Ssw_C_InitInline(void)"
        ]
    },
    "Ifx_Ssw_Infra.h": {
        "Ifx_Ssw_getGlobalSafetyEndinitPasswordInline": [
            "IFX_SSW_INLINE unsigned short Ifx_Ssw_getGlobalSafetyEndinitPasswordInline(void)"
        ],
        "Ifx_Ssw_clearGlobalSafetyEndinitInline": [
            "IFX_SSW_INLINE void Ifx_Ssw_clearGlobalSafetyEndinitInline(unsigned short password)"
        ],
        "Ifx_Ssw_setGlobalSafetyEndinitInline": [
            "IFX_SSW_INLINE void Ifx_Ssw_setGlobalSafetyEndinitInline(unsigned short password)"
        ],
        "Ifx_Ssw_getCpuWatchdogPasswordInline": [
            "IFX_SSW_INLINE unsigned short Ifx_Ssw_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)"
        ],
        "Ifx_Ssw_getSafetyWatchdogPasswordInline": [
            "IFX_SSW_INLINE unsigned short Ifx_Ssw_getSafetyWatchdogPasswordInline(void)"
        ],
        "Ifx_Ssw_clearCpuEndinitInline": [
            "IFX_SSW_INLINE void Ifx_Ssw_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, unsigned short password)"
        ],
        "Ifx_Ssw_clearSafetyEndinitInline": [
            "IFX_SSW_INLINE void Ifx_Ssw_clearSafetyEndinitInline(unsigned short password)"
        ],
        "Ifx_Ssw_setCpuEndinitInline": [
            "IFX_SSW_INLINE void Ifx_Ssw_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, unsigned short password)"
        ],
        "Ifx_Ssw_setSafetyEndinitInline": [
            "IFX_SSW_INLINE void Ifx_Ssw_setSafetyEndinitInline(unsigned short password)"
        ],
        "Ifx_Ssw_isColdPoweronReset": [
            "IFX_SSW_INLINE char Ifx_Ssw_isColdPoweronReset(void)"
        ],
        "Ifx_Ssw_isApplicationReset": [
            "IFX_SSW_INLINE unsigned char Ifx_Ssw_isApplicationReset(void)"
        ],
        "Ifx_Ssw_initCSA": [
            "IFX_SSW_INLINE void Ifx_Ssw_initCSA(unsigned int *csaBegin, unsigned int *csaEnd)"
        ]
    },
    "Ifx_Ssw_LegacySwCfg.h": {},
    "Icu.h": {
        "Icu_startCapture": [
            "IFX_INLINE void Icu_startCapture(Icu *handle)"
        ],
        "Icu_stopCapture": [
            "IFX_INLINE void Icu_stopCapture(Icu *handle)"
        ],
        "Icu_getTimeStamp": [
            "IFX_INLINE void Icu_getTimeStamp(Icu *handle)"
        ]
    },
    "PwmHl.h": {
        "PwmHl_start": [
            "IFX_INLINE void PwmHl_start(PwmHl *handle)"
        ],
        "PwmHl_stop": [
            "IFX_INLINE void PwmHl_stop(PwmHl *handle)"
        ]
    },
    "Timer.h": {
        "Timer_start": [
            "IFX_INLINE void Timer_start(Timer *handle)"
        ],
        "Timer_stop": [
            "IFX_INLINE void Timer_stop(Timer *handle)"
        ],
        "Timer_synchronousStart": [
            "IFX_INLINE void Timer_synchronousStart(Timer *handle)"
        ],
        "Timer_synchronousStop": [
            "IFX_INLINE void Timer_synchronousStop(Timer *handle)"
        ],
        "Timer_countOneStep": [
            "IFX_INLINE void Timer_countOneStep(Timer *handle)"
        ],
        "Timer_startSingleShotMode": [
            "IFX_INLINE void Timer_startSingleShotMode(Timer *handle)"
        ]
    },
    "TPwm.h": {
        "TPwm_start": [
            "IFX_INLINE void TPwm_start(TPwm *handle)"
        ],
        "TPwm_pause": [
            "IFX_INLINE void TPwm_pause(TPwm *handle)"
        ],
        "TPwm_resume": [
            "IFX_INLINE void TPwm_resume(TPwm *handle)"
        ],
        "TPwm_stop": [
            "IFX_INLINE void TPwm_stop(TPwm *handle)"
        ]
    },
    "SpiIf.h": {
        "SpiIf_wait": [
            "IFX_INLINE void SpiIf_wait(SpiIf_Ch *handle)"
        ],
        "SpiIf_exchange": [
            "IFX_INLINE SpiIf_Status SpiIf_exchange(SpiIf_Ch *handle, const void *src, void *dest, Ifx_SizeT numOfData)"
        ],
        "SpiIf_getStatus": [
            "IFX_INLINE SpiIf_Status SpiIf_getStatus(SpiIf_Ch *handle)"
        ]
    },
    "IfxStdIf.h": {},
    "IfxStdIf_DPipe.h": {
        "IfxStdIf_DPipe_write": [
            "IFX_INLINE boolean IfxStdIf_DPipe_write(IfxStdIf_DPipe *stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)"
        ],
        "IfxStdIf_DPipe_read": [
            "IFX_INLINE boolean IfxStdIf_DPipe_read(IfxStdIf_DPipe *stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)"
        ],
        "IfxStdIf_DPipe_getReadCount": [
            "IFX_INLINE sint32 IfxStdIf_DPipe_getReadCount(IfxStdIf_DPipe *stdIf)"
        ],
        "IfxStdIf_DPipe_getWriteCount": [
            "IFX_INLINE sint32 IfxStdIf_DPipe_getWriteCount(IfxStdIf_DPipe *stdIf)"
        ],
        "IfxStdIf_DPipe_canReadCount": [
            "IFX_INLINE boolean IfxStdIf_DPipe_canReadCount(IfxStdIf_DPipe *stdIf, Ifx_SizeT count, Ifx_TickTime timeout)"
        ],
        "IfxStdIf_DPipe_canWriteCount": [
            "IFX_INLINE boolean IfxStdIf_DPipe_canWriteCount(IfxStdIf_DPipe *stdIf, Ifx_SizeT count, Ifx_TickTime timeout)"
        ],
        "IfxStdIf_DPipe_getReadEvent": [
            "IFX_INLINE IfxStdIf_DPipe_ReadEvent IfxStdIf_DPipe_getReadEvent(IfxStdIf_DPipe *stdIf)"
        ],
        "IfxStdIf_DPipe_getWriteEvent": [
            "IFX_INLINE IfxStdIf_DPipe_WriteEvent IfxStdIf_DPipe_getWriteEvent(IfxStdIf_DPipe *stdIf)"
        ],
        "IfxStdIf_DPipe_flushTx": [
            "IFX_INLINE boolean IfxStdIf_DPipe_flushTx(IfxStdIf_DPipe *stdIf, Ifx_TickTime timeout)"
        ],
        "IfxStdIf_DPipe_clearTx": [
            "IFX_INLINE void IfxStdIf_DPipe_clearTx(IfxStdIf_DPipe *stdIf)"
        ],
        "IfxStdIf_DPipe_clearRx": [
            "IFX_INLINE void IfxStdIf_DPipe_clearRx(IfxStdIf_DPipe *stdIf)"
        ],
        "IfxStdIf_DPipe_onReceive": [
            "IFX_INLINE void IfxStdIf_DPipe_onReceive(IfxStdIf_DPipe *stdIf)"
        ],
        "IfxStdIf_DPipe_onTransmit": [
            "IFX_INLINE void IfxStdIf_DPipe_onTransmit(IfxStdIf_DPipe *stdIf)"
        ],
        "IfxStdIf_DPipe_onError": [
            "IFX_INLINE void IfxStdIf_DPipe_onError(IfxStdIf_DPipe *stdIf)"
        ],
        "IfxStdIf_DPipe_getSendCount": [
            "IFX_INLINE uint32 IfxStdIf_DPipe_getSendCount(IfxStdIf_DPipe *stdIf)"
        ],
        "IfxStdIf_DPipe_getTxTimeStamp": [
            "IFX_INLINE Ifx_TickTime IfxStdIf_DPipe_getTxTimeStamp(IfxStdIf_DPipe *stdIf)"
        ],
        "IfxStdIf_DPipe_resetSendCount": [
            "IFX_INLINE void IfxStdIf_DPipe_resetSendCount(IfxStdIf_DPipe *stdIf)"
        ]
    },
    "IfxStdIf_Pos.h": {
        "IfxStdIf_Pos_onZeroIrq": [
            "IFX_INLINE void IfxStdIf_Pos_onZeroIrq(IfxStdIf_Pos *stdIf)"
        ],
        "IfxStdIf_Pos_getAbsolutePosition": [
            "IFX_INLINE float32 IfxStdIf_Pos_getAbsolutePosition(IfxStdIf_Pos *stdIf)"
        ],
        "IfxStdIf_Pos_getFault": [
            "IFX_INLINE IfxStdIf_Pos_Status IfxStdIf_Pos_getFault(IfxStdIf_Pos *stdIf)"
        ],
        "IfxStdIf_Pos_getOffset": [
            "IFX_INLINE sint32 IfxStdIf_Pos_getOffset(IfxStdIf_Pos *stdIf)"
        ],
        "IfxStdIf_Pos_getPosition": [
            "IFX_INLINE float32 IfxStdIf_Pos_getPosition(IfxStdIf_Pos *stdIf)"
        ],
        "IfxStdIf_Pos_getDirection": [
            "IFX_INLINE IfxStdIf_Pos_Dir IfxStdIf_Pos_getDirection(IfxStdIf_Pos *stdIf)"
        ],
        "IfxStdIf_Pos_getPeriodPerRotation": [
            "IFX_INLINE uint16 IfxStdIf_Pos_getPeriodPerRotation(IfxStdIf_Pos *stdIf)"
        ],
        "IfxStdIf_Pos_getRawPosition": [
            "IFX_INLINE sint32 IfxStdIf_Pos_getRawPosition(IfxStdIf_Pos *stdIf)"
        ],
        "IfxStdIf_Pos_getRefreshPeriod": [
            "IFX_INLINE float32 IfxStdIf_Pos_getRefreshPeriod(IfxStdIf_Pos *stdIf)"
        ],
        "IfxStdIf_Pos_getResolution": [
            "IFX_INLINE sint32 IfxStdIf_Pos_getResolution(IfxStdIf_Pos *stdIf)"
        ],
        "IfxStdIf_Pos_getTurn": [
            "IFX_INLINE sint32 IfxStdIf_Pos_getTurn(IfxStdIf_Pos *stdIf)"
        ],
        "IfxStdIf_Pos_getSensorType": [
            "IFX_INLINE IfxStdIf_Pos_SensorType IfxStdIf_Pos_getSensorType(IfxStdIf_Pos *stdIf)"
        ],
        "IfxStdIf_Pos_getSpeed": [
            "IFX_INLINE float32 IfxStdIf_Pos_getSpeed(IfxStdIf_Pos *stdIf)"
        ],
        "IfxStdIf_Pos_isFault": [
            "IFX_INLINE boolean IfxStdIf_Pos_isFault(IfxStdIf_Pos *stdIf)"
        ],
        "IfxStdIf_Pos_onEventA": [
            "IFX_INLINE void IfxStdIf_Pos_onEventA(IfxStdIf_Pos *stdIf)"
        ],
        "IfxStdIf_Pos_update": [
            "IFX_INLINE void IfxStdIf_Pos_update(IfxStdIf_Pos *stdIf)"
        ],
        "IfxStdIf_Pos_reset": [
            "IFX_INLINE void IfxStdIf_Pos_reset(IfxStdIf_Pos *stdIf)"
        ],
        "IfxStdIf_Pos_resetFaults": [
            "IFX_INLINE void IfxStdIf_Pos_resetFaults(IfxStdIf_Pos *stdIf)"
        ],
        "IfxStdIf_Pos_setOffset": [
            "IFX_INLINE void IfxStdIf_Pos_setOffset(IfxStdIf_Pos *stdIf, sint32 offset)"
        ],
        "IfxStdIf_Pos_setPosition": [
            "IFX_INLINE void IfxStdIf_Pos_setPosition(IfxStdIf_Pos *stdIf, float32 position)"
        ],
        "IfxStdIf_Pos_setRawPosition": [
            "IFX_INLINE void IfxStdIf_Pos_setRawPosition(IfxStdIf_Pos *stdIf, sint32 position)"
        ],
        "IfxStdIf_Pos_setSpeed": [
            "IFX_INLINE void IfxStdIf_Pos_setSpeed(IfxStdIf_Pos *stdIf, float32 speed)"
        ],
        "IfxStdIf_Pos_setRefreshPeriod": [
            "IFX_INLINE void IfxStdIf_Pos_setRefreshPeriod(IfxStdIf_Pos *stdIf, float32 updatePeriod)"
        ],
        "IfxStdIf_Pos_radsToRpm": [
            "IFX_INLINE float32 IfxStdIf_Pos_radsToRpm(float32 speed)"
        ],
        "IfxStdIf_Pos_rpmToRads": [
            "IFX_INLINE float32 IfxStdIf_Pos_rpmToRads(float32 speed)"
        ]
    },
    "IfxStdIf_PwmHl.h": {
        "IfxStdIf_PwmHl_setDeadtime": [
            "IFX_INLINE boolean IfxStdIf_PwmHl_setDeadtime(IfxStdIf_PwmHl *stdIf, float32 deadtime)"
        ],
        "IfxStdIf_PwmHl_getDeadtime": [
            "IFX_INLINE float32 IfxStdIf_PwmHl_getDeadtime(IfxStdIf_PwmHl *stdIf)"
        ],
        "IfxStdIf_PwmHl_setMinPulse": [
            "IFX_INLINE boolean IfxStdIf_PwmHl_setMinPulse(IfxStdIf_PwmHl *stdIf, float32 minPulse)"
        ],
        "IfxStdIf_PwmHl_getMinPulse": [
            "IFX_INLINE float32 IfxStdIf_PwmHl_getMinPulse(IfxStdIf_PwmHl *stdIf)"
        ],
        "IfxStdIf_PwmHl_getMode": [
            "IFX_INLINE Ifx_Pwm_Mode IfxStdIf_PwmHl_getMode(IfxStdIf_PwmHl *stdIf)"
        ],
        "IfxStdIf_PwmHl_setMode": [
            "IFX_INLINE boolean IfxStdIf_PwmHl_setMode(IfxStdIf_PwmHl *stdIf, Ifx_Pwm_Mode mode)"
        ],
        "IfxStdIf_PwmHl_setOnTime": [
            "IFX_INLINE void IfxStdIf_PwmHl_setOnTime(IfxStdIf_PwmHl *stdIf, Ifx_TimerValue *tOn)"
        ],
        "IfxStdIf_PwmHl_setOnTimeAndShift": [
            "IFX_INLINE void IfxStdIf_PwmHl_setOnTimeAndShift(IfxStdIf_PwmHl *stdIf, Ifx_TimerValue *tOn, Ifx_TimerValue *shift)"
        ],
        "IfxStdIf_PwmHl_setPulse": [
            "IFX_INLINE void IfxStdIf_PwmHl_setPulse(IfxStdIf_PwmHl *stdIf, float32 *tOn, float32 *offset)"
        ],
        "IfxStdIf_PwmHl_setupChannels": [
            "IFX_INLINE void IfxStdIf_PwmHl_setupChannels(IfxStdIf_PwmHl *stdIf, boolean *activeCh, boolean *stuckSt)"
        ],
        "IfxStdIf_PwmHl_getTimer": [
            "IFX_INLINE IfxStdIf_Timer *IfxStdIf_PwmHl_getTimer(IfxStdIf_PwmHl *stdIf)"
        ]
    },
    "IfxStdIf_Timer.h": {
        "IfxStdIf_Timer_getFrequency": [
            "IFX_INLINE float32 IfxStdIf_Timer_getFrequency(IfxStdIf_Timer *stdIf)"
        ],
        "IfxStdIf_Timer_getPeriod": [
            "IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_getPeriod(IfxStdIf_Timer *stdIf)"
        ],
        "IfxStdIf_Timer_getTrigger": [
            "IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_getTrigger(IfxStdIf_Timer *stdIf)"
        ],
        "IfxStdIf_Timer_getResolution": [
            "IFX_INLINE float32 IfxStdIf_Timer_getResolution(IfxStdIf_Timer *stdIf)"
        ],
        "IfxStdIf_Timer_setFrequency": [
            "IFX_INLINE boolean IfxStdIf_Timer_setFrequency(IfxStdIf_Timer *stdIf, float32 frequency)"
        ],
        "IfxStdIf_Timer_updateInputFrequency": [
            "IFX_INLINE void IfxStdIf_Timer_updateInputFrequency(IfxStdIf_Timer *stdIf)"
        ],
        "IfxStdIf_Timer_applyUpdate": [
            "IFX_INLINE void IfxStdIf_Timer_applyUpdate(IfxStdIf_Timer *stdIf)"
        ],
        "IfxStdIf_Timer_disableUpdate": [
            "IFX_INLINE void IfxStdIf_Timer_disableUpdate(IfxStdIf_Timer *stdIf)"
        ],
        "IfxStdIf_Timer_getInputFrequency": [
            "IFX_INLINE float32 IfxStdIf_Timer_getInputFrequency(IfxStdIf_Timer *stdIf)"
        ],
        "IfxStdIf_Timer_run": [
            "IFX_INLINE void IfxStdIf_Timer_run(IfxStdIf_Timer *stdIf)"
        ],
        "IfxStdIf_Timer_setPeriod": [
            "IFX_INLINE boolean IfxStdIf_Timer_setPeriod(IfxStdIf_Timer *stdIf, Ifx_TimerValue period)"
        ],
        "IfxStdIf_Timer_setSingleMode": [
            "IFX_INLINE void IfxStdIf_Timer_setSingleMode(IfxStdIf_Timer *stdIf, boolean enabled)"
        ],
        "IfxStdIf_Timer_setTrigger": [
            "IFX_INLINE void IfxStdIf_Timer_setTrigger(IfxStdIf_Timer *stdIf, Ifx_TimerValue triggerPoint)"
        ],
        "IfxStdIf_Timer_stop": [
            "IFX_INLINE void IfxStdIf_Timer_stop(IfxStdIf_Timer *stdIf)"
        ],
        "IfxStdIf_Timer_ackTimerIrq": [
            "IFX_INLINE boolean IfxStdIf_Timer_ackTimerIrq(IfxStdIf_Timer *stdIf)"
        ],
        "IfxStdIf_Timer_ackTriggerIrq": [
            "IFX_INLINE boolean IfxStdIf_Timer_ackTriggerIrq(IfxStdIf_Timer *stdIf)"
        ],
        "IfxStdIf_Timer_tickToS": [
            "IFX_INLINE float32 IfxStdIf_Timer_tickToS(float32 clockFreq, Ifx_TimerValue ticks)"
        ],
        "IfxStdIf_Timer_sToTick": [
            "IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_sToTick(float32 clockFreq, float32 seconds)"
        ],
        "IfxStdIf_Timer_getPeriodSecond": [
            "IFX_INLINE float32 IfxStdIf_Timer_getPeriodSecond(IfxStdIf_Timer *stdIf)"
        ]
    },
    "Assert.h": {},
    "Bsp.h": {
        "areInterruptsEnabled": [
            "IFX_INLINE boolean areInterruptsEnabled(void)"
        ],
        "disableInterrupts": [
            "IFX_INLINE boolean disableInterrupts(void)"
        ],
        "forceDisableInterrupts": [
            "IFX_INLINE void forceDisableInterrupts(void)"
        ],
        "enableInterrupts": [
            "IFX_INLINE void enableInterrupts(void)"
        ],
        "restoreInterrupts": [
            "IFX_INLINE void restoreInterrupts(boolean enabled)"
        ],
        "now": [
            "IFX_INLINE Ifx_TickTime now(void)"
        ],
        "nowWithoutCriticalSection": [
            "IFX_INLINE Ifx_TickTime nowWithoutCriticalSection(void)"
        ],
        "addTTime": [
            "IFX_INLINE Ifx_TickTime addTTime(Ifx_TickTime a, Ifx_TickTime b)"
        ],
        "elapsed": [
            "IFX_INLINE Ifx_TickTime elapsed(Ifx_TickTime since)"
        ],
        "getDeadLine": [
            "IFX_INLINE Ifx_TickTime getDeadLine(Ifx_TickTime timeout)"
        ],
        "getTimeout": [
            "IFX_INLINE Ifx_TickTime getTimeout(Ifx_TickTime deadline)"
        ],
        "isDeadLine": [
            "IFX_INLINE boolean isDeadLine(Ifx_TickTime deadLine)"
        ],
        "poll": [
            "IFX_INLINE boolean poll(volatile boolean *test, Ifx_TickTime timeout)"
        ],
        "timingNoInterruptEnd": [
            "IFX_INLINE Ifx_TickTime timingNoInterruptEnd(Ifx_TickTime since, boolean interruptEnabled)"
        ],
        "timingNoInterruptStart": [
            "IFX_INLINE Ifx_TickTime timingNoInterruptStart(boolean *interruptEnabled)"
        ],
        "wait": [
            "IFX_INLINE void wait(Ifx_TickTime timeout)"
        ]
    },
    "Ifx_Console.h": {
        "Ifx_Console_getIo": [
            "IFX_INLINE IfxStdIf_DPipe *Ifx_Console_getIo(void)"
        ],
        "Ifx_Console_decrAlign": [
            "IFX_INLINE void Ifx_Console_decrAlign(sint16 value)"
        ],
        "Ifx_Console_incrAlign": [
            "IFX_INLINE void Ifx_Console_incrAlign(sint16 value)"
        ]
    },
    "Ifx_Shell.h": {},
    "Ifx_GlobalResources.h": {},
    "Ifx_AngleTrkF32.h": {
        "Ifx_AngleTrkF32_getLoopSpeed": [
            "IFX_INLINE float32 Ifx_AngleTrkF32_getLoopSpeed(Ifx_AngleTrkF32 *aObsv)"
        ]
    },
    "Ifx_Cf32.h": {
        "IFX_Cf32_exp": [
            "IFX_INLINE cfloat32 IFX_Cf32_exp(const cfloat32 *c)"
        ],
        "IFX_Cf32_mul": [
            "IFX_INLINE cfloat32 IFX_Cf32_mul(const cfloat32 *a, const cfloat32 *b)"
        ],
        "IFX_Cf32_amp": [
            "IFX_INLINE cfloat32 IFX_Cf32_amp(const cfloat32 *a, float32 gain)"
        ],
        "IFX_Cf32_dot": [
            "IFX_INLINE float32 IFX_Cf32_dot(const cfloat32 *b)"
        ],
        "IFX_Cf32_mag": [
            "IFX_INLINE float32 IFX_Cf32_mag(const cfloat32 *c)"
        ],
        "IFX_Cf32_div": [
            "IFX_INLINE cfloat32 IFX_Cf32_div(const cfloat32 *a, const cfloat32 *b)"
        ],
        "IFX_Cf32_add": [
            "IFX_INLINE cfloat32 IFX_Cf32_add(const cfloat32 *a, const cfloat32 *b)"
        ],
        "IFX_Cf32_sub": [
            "IFX_INLINE cfloat32 IFX_Cf32_sub(const cfloat32 *a, const cfloat32 *b)"
        ],
        "IFX_Cf32_set": [
            "IFX_INLINE void IFX_Cf32_set(cfloat32 *a, float32 re, float32 im)"
        ],
        "IFX_Cf32_reset": [
            "IFX_INLINE void IFX_Cf32_reset(cfloat32 *a)"
        ],
        "IFX_Cf32_saturate": [
            "IFX_INLINE cfloat32 IFX_Cf32_saturate(cfloat32 *a, float32 *ampl, float32 limit)"
        ]
    },
    "Ifx_Crc.h": {},
    "Ifx_FftF32.h": {
        "Ifx_FftF32_lookUpReversedBits": [
            "IFX_INLINE uint16 Ifx_FftF32_lookUpReversedBits(uint16 n, unsigned bits)"
        ],
        "Ifx_FftF32_lookUpTwiddleFactor": [
            "IFX_INLINE cfloat32 Ifx_FftF32_lookUpTwiddleFactor(sint32 N, sint32 k)"
        ]
    },
    "Ifx_IntegralF32.h": {},
    "Ifx_LowPassPt1F32.h": {
        "Ifx_LowPassPt1F32_reset": [
            "IFX_INLINE void Ifx_LowPassPt1F32_reset(Ifx_LowPassPt1F32 *filter)"
        ]
    },
    "Ifx_Lut.h": {},
    "Ifx_LutAtan2F32.h": {},
    "Ifx_LutIndexedLinearF32.h": {
        "Ifx_LutIndexedLinearF32_search": [
            "IFX_INLINE float32 Ifx_LutIndexedLinearF32_search(const Ifx_LutIndexedLinearF32 *ml, uint32 index)"
        ]
    },
    "Ifx_LutLinearF32.h": {
        "Ifx_LutLinearF32_searchPosSeq": [
            "IFX_INLINE float32 Ifx_LutLinearF32_searchPosSeq(const Ifx_LutLinearF32 *ml, float32 index)"
        ],
        "Ifx_LutLinearF32_searchNegSeq": [
            "IFX_INLINE float32 Ifx_LutLinearF32_searchNegSeq(const Ifx_LutLinearF32 *ml, float32 index)"
        ]
    },
    "Ifx_LutLSincosF32.h": {
        "Ifx_LutLSincosF32_sin": [
            "IFX_INLINE float32 Ifx_LutLSincosF32_sin(Ifx_Lut_FxpAngle fxpAngle)"
        ],
        "Ifx_LutLSincosF32_cos": [
            "IFX_INLINE float32 Ifx_LutLSincosF32_cos(Ifx_Lut_FxpAngle fxpAngle)"
        ],
        "Ifx_LutLSincosF32_cossin": [
            "IFX_INLINE cfloat32 Ifx_LutLSincosF32_cossin(Ifx_Lut_FxpAngle fxpAngle)"
        ]
    },
    "Ifx_LutSincosF32.h": {
        "Ifx_LutSincosF32_cos": [
            "IFX_INLINE float32 Ifx_LutSincosF32_cos(Ifx_Lut_FxpAngle fxpAngle)"
        ],
        "Ifx_LutSincosF32_cossin": [
            "IFX_INLINE cfloat32 Ifx_LutSincosF32_cossin(Ifx_Lut_FxpAngle fxpAngle)"
        ]
    },
    "Ifx_RampF32.h": {
        "Ifx_RampF32_reset": [
            "IFX_INLINE void Ifx_RampF32_reset(Ifx_RampF32 *ramp)"
        ],
        "Ifx_RampF32_getRef": [
            "IFX_INLINE float32 Ifx_RampF32_getRef(Ifx_RampF32 *ramp)"
        ],
        "Ifx_RampF32_setSlewRate": [
            "IFX_INLINE void Ifx_RampF32_setSlewRate(Ifx_RampF32 *ramp, float32 slewRate, float32 period)"
        ],
        "Ifx_RampF32_init": [
            "IFX_INLINE void Ifx_RampF32_init(Ifx_RampF32 *ramp, float32 slewRate, float32 period)"
        ],
        "Ifx_RampF32_setRef": [
            "IFX_INLINE void Ifx_RampF32_setRef(Ifx_RampF32 *ramp, float32 ref)"
        ],
        "Ifx_RampF32_getValue": [
            "IFX_INLINE float32 Ifx_RampF32_getValue(Ifx_RampF32 *ramp)"
        ]
    },
    "Ifx_WndF32.h": {
        "Ifx_WndF32_apply": [
            "IFX_INLINE void Ifx_WndF32_apply(cfloat32 *x, CONST_CFG float32 *window, short nX)"
        ]
    },
    "Ifx_DateTime.h": {},
    "Ifx_Assert.h": {},
    "common.h": {},
    "Compiler.h": {},
    "Compiler_Cfg.h": {},
    "define.h": {},
    "if_cfc.c": {
        "IfCfc_Memcpy": [
            "VOID\tIfCfc_Memcpy( VOID* const dst, const VOID* const src, SIZE_T n )"
        ],
        "IfCfc_Memcpy2": [
            "VOID\tIfCfc_Memcpy2( VOID* const dst, const VOID* const src, SIZE_T n )"
        ],
        "IfCfc_Memcpy4": [
            "VOID\tIfCfc_Memcpy4( VOID* const dst, const VOID* const src, SIZE_T n )"
        ],
        "IfCfc_Memset": [
            "VOID\tIfCfc_Memset( VOID* const dst, const UCHAR dat, SIZE_T n )"
        ],
        "IfCfc_Memset4": [
            "VOID\tIfCfc_Memset4( VOID* const dst, const UCHAR dat, SIZE_T n )"
        ],
        "IfCfc_Memcmp": [
            "LONG\tIfCfc_Memcmp( const VOID* const mem1, const VOID* const mem2, SIZE_T n )"
        ],
        "IfCfc_Memcmp2": [
            "LONG\tIfCfc_Memcmp2( const VOID* const mem1, const VOID* const mem2, SIZE_T n )"
        ],
        "IfCfc_Memcmp4": [
            "LONG\tIfCfc_Memcmp4( const VOID* const mem1, const VOID* const mem2, SIZE_T n )"
        ],
        "IfCfc_Calc_Sum": [
            "UCHAR\tIfCfc_Calc_Sum( const VOID* const src, SIZE_T n )"
        ],
        "IfCfc_Calc_Sum16": [
            "USHORT\tIfCfc_Calc_Sum16( const USHORT* const src, SIZE_T n )"
        ],
        "IfCfc_Wait_SoftNmsec": [
            "VOID\tIfCfc_Wait_SoftNmsec( const ULONG wait_tim )"
        ],
        "IfCfc_Wait_Nmsec": [
            "VOID\tIfCfc_Wait_Nmsec( const ULONG wait_tim )"
        ],
        "IfCfc_Renewal_05msCnt": [
            "VOID\tIfCfc_Renewal_05msCnt( VOID )"
        ],
        "IfCfc_SetErr_AllInt": [
            "VOID\tIfCfc_SetErr_AllInt( VOID )"
        ],
        "IfCfc_Search_2D_Map": [
            "USHORT\tIfCfc_Search_2D_Map( const TAG_MAP_2D* map, const USHORT xdata )"
        ],
        "IfCfc_Search_3D_Map": [
            "USHORT\tIfCfc_Search_3D_Map( const TAG_MAP_3D* map, const USHORT ydata, const USHORT xdata )"
        ],
        "IfCfc_Init_LookupTable_UC": [
            "VOID\tIfCfc_Init_LookupTable_UC( TAG_LOOKUPTABLE_UC* const table, const UCHAR* const data, const USHORT size, const UCHAR xshift, const UCHAR yshift )"
        ],
        "IfCfc_Init_LookupTable_US": [
            "VOID\tIfCfc_Init_LookupTable_US( TAG_LOOKUPTABLE_US* const table, const USHORT* const data, const USHORT size, const UCHAR xshift )"
        ],
        "IfCfc_Init_LookupTable_SS": [
            "VOID\tIfCfc_Init_LookupTable_SS( TAG_LOOKUPTABLE_SS* const table, const SHORT* const data, const USHORT size, const UCHAR xshift )"
        ],
        "IfCfc_Proc_LookupTable_UC": [
            "USHORT\tIfCfc_Proc_LookupTable_UC( const TAG_LOOKUPTABLE_UC* const table, const USHORT x_value )"
        ],
        "IfCfc_Proc_LookupTable_US": [
            "USHORT\tIfCfc_Proc_LookupTable_US( const TAG_LOOKUPTABLE_US* const table, const USHORT x_value )"
        ],
        "IfCfc_Proc_LookupTable_SS": [
            "SHORT\tIfCfc_Proc_LookupTable_SS( const TAG_LOOKUPTABLE_SS* const table, const USHORT x_value )"
        ],
        "IfCfc_Init_PreLookUpTable": [
            "LONG\tIfCfc_Init_PreLookUpTable( TAG_PRELOOKUPTABLE* const table )"
        ],
        "IfCfc_Proc_PreLookUpTable": [
            "USHORT\tIfCfc_Proc_PreLookUpTable( USHORT *f, const TAG_PRELOOKUPTABLE *table, const USHORT value )"
        ],
        "IfCfc_Calc_Hypot_SS": [
            "USHORT IfCfc_Calc_Hypot_SS( const SHORT x, const SHORT y )"
        ],
        "IfCfc_Calc_Angle": [
            "USHORT\tIfCfc_Calc_Angle( const SHORT sssin, const SHORT sscos )"
        ],
        "IfCfc_InterpolateUS": [
            "ULONG\tIfCfc_InterpolateUS( const USHORT pos_x1, const USHORT pos_y1, const USHORT pos_x2, const USHORT pos_y2, const USHORT pos_x )"
        ],
        "IfCfc_InterpolateSS": [
            "LONG\tIfCfc_InterpolateSS( const SHORT pos_x1, const SHORT pos_y1, const SHORT pos_x2, const SHORT pos_y2, const SHORT pos_x )"
        ],
        "IfCfc_Proc_BinarySearch_UC": [
            "UCHAR\tIfCfc_Proc_BinarySearch_UC( const USHORT uskey, const USHORT ustbl[], const UCHAR uctblnum )"
        ],
        "IfCfc_Init_PreLookUpTable_FL": [
            "VOID\tIfCfc_Init_PreLookUpTable_FL( TAG_PRELOOKUPTABLE_FL* const table )"
        ],
        "IfCfc_Proc_PreLookUpTable_FL": [
            "USHORT\tIfCfc_Proc_PreLookUpTable_FL( FLOAT *f, const TAG_PRELOOKUPTABLE_FL *table, const FLOAT value )"
        ],
        "IfCfc_SinF": [
            "FLOAT\tIfCfc_SinF( const FLOAT angle_rad )"
        ],
        "IfCfc_CosF": [
            "FLOAT\tIfCfc_CosF( const FLOAT angle_rad )"
        ],
        "IfCfc_Min_Select_input2": [
            "CHAR IfCfc_Min_Select_input2( const CHAR qf_1, const CHAR qf_2 )"
        ],
        "IfCfc_Min_Select_input3": [
            "CHAR IfCfc_Min_Select_input3( const CHAR qf_1, const CHAR qf_2, const CHAR qf_3 )"
        ]
    },
    "if_cfc.h": {
        "IfCfc_Shift_AR": [
            "static\tLONG\tIfCfc_Shift_AR( const LONG indat, const ULONG shift_size )"
        ],
        "IfCfc_Shift_AL": [
            "static\tLONG\tIfCfc_Shift_AL( const LONG indat, const ULONG shift_size )"
        ],
        "IfCfc_Shift_LR": [
            "static\tULONG\tIfCfc_Shift_LR( const ULONG indat, const ULONG shift_size )"
        ],
        "IfCfc_Shift_LL": [
            "static\tULONG\tIfCfc_Shift_LL( const ULONG indat, const ULONG shift_size )"
        ],
        "IfCfc_RndShift_AR": [
            "static\tLONG\tIfCfc_RndShift_AR( const LONG indat, const ULONG shift_size )"
        ],
        "IfCfc_RndShift_LR": [
            "static\tULONG\tIfCfc_RndShift_LR( const ULONG indat, const ULONG shift_size )"
        ],
        "IfCfc_Limit_StoS": [
            "static\tLONG\tIfCfc_Limit_StoS( const LONG indat, const LONG maxdat, const LONG mindat )"
        ],
        "IfCfc_Limit_UtoU": [
            "static\tULONG\tIfCfc_Limit_UtoU( const ULONG indat, const ULONG maxdat, const ULONG mindat )"
        ],
        "IfCfc_Limit_StoU": [
            "static\tULONG\tIfCfc_Limit_StoU( const LONG indat, const ULONG maxdat, const ULONG mindat )"
        ],
        "IfCfc_Limit_UtoS": [
            "static\tLONG\tIfCfc_Limit_UtoS( const ULONG indat, const LONG maxdat, const LONG mindat )"
        ],
        "IfCfc_Limit_FtoF": [
            "static\tFLOAT\tIfCfc_Limit_FtoF( const FLOAT indat, const FLOAT maxdat, const FLOAT mindat )\t\t\t\t\t/* (exception) QAC Msg(4:3480) MISRA-C:2004 Rule 8.5 */"
        ],
        "IfCfc_Abs_SC": [
            "static\tUCHAR\tIfCfc_Abs_SC( const CHAR indat )"
        ],
        "IfCfc_Abs_SS": [
            "static\tUSHORT\tIfCfc_Abs_SS( const SHORT indat )"
        ],
        "IfCfc_Abs_SL": [
            "static\tULONG\tIfCfc_Abs_SL( const LONG indat )"
        ],
        "IfCfc_Disable_AllInt": [
            "static\tVOID\tIfCfc_Disable_AllInt( VOID )"
        ],
        "IfCfc_Enable_AllInt": [
            "static\tVOID\tIfCfc_Enable_AllInt( VOID )"
        ],
        "IfCfc_SetFlg_Alw_AllInt": [
            "static\tVOID\tIfCfc_SetFlg_Alw_AllInt( const FLAG dat )"
        ],
        "IfCfc_Compute_LPF_SS": [
            "static\tSHORT\tIfCfc_Compute_LPF_SS( TAG_LPF_SS *lpf, const SHORT indat )"
        ],
        "IfCfc_Compute_LPF_US": [
            "static\tUSHORT\tIfCfc_Compute_LPF_US( TAG_LPF_US *lpf, const USHORT indat )"
        ],
        "IfCfc_Compute_LPF_US_2": [
            "static\tUSHORT\tIfCfc_Compute_LPF_US_2( TAG_LPF_US_2* const lpf, const USHORT indat )"
        ],
        "IfCfc_Compute_Filt1st_FL": [
            "static\tFLOAT\tIfCfc_Compute_Filt1st_FL( TAG_Filt1st_FL *filt, const FLOAT indat )"
        ],
        "IfCfc_Compute_Filt2nd_FL": [
            "static\tFLOAT\tIfCfc_Compute_Filt2nd_FL( TAG_Filt2nd_FL *filt, const FLOAT indat )"
        ],
        "IfCfc_Compute_LPF_FL": [
            "static\tFLOAT\tIfCfc_Compute_LPF_FL( const FLOAT in, const FLOAT out_n1, const FLOAT wc_lpf, const FLOAT period )"
        ],
        "IfCfc_SearchTbl_UC": [
            "static\tUSHORT\tIfCfc_SearchTbl_UC( const UCHAR* tbladr, USHORT ofs )"
        ],
        "IfCfc_SearchTbl_US": [
            "static\tUSHORT\tIfCfc_SearchTbl_US( const USHORT* tbladr, USHORT ofs )"
        ],
        "IfCfc_SearchTbl_US32": [
            "static\tUSHORT\tIfCfc_SearchTbl_US32( const USHORT* tbladr, USHORT ofs )"
        ],
        "IfCfc_SearchTbl_US64": [
            "static\tUSHORT\tIfCfc_SearchTbl_US64( const USHORT* tbladr, USHORT ofs )"
        ],
        "IfCfc_SearchTbl_UC128": [
            "static\tUCHAR\tIfCfc_SearchTbl_UC128( const UCHAR* tbladr, USHORT ofs )"
        ],
        "IfCfc_SearchTbl_UC192": [
            "static\tUCHAR\tIfCfc_SearchTbl_UC192( const UCHAR* tbladr, USHORT ofs )"
        ],
        "IfCfc_SearchTbl_UC256": [
            "static\tUSHORT\tIfCfc_SearchTbl_UC256( const UCHAR* tbladr, USHORT ofs )"
        ],
        "IfCfc_SearchTbl_US128": [
            "static\tUSHORT\tIfCfc_SearchTbl_US128( const USHORT* tbladr, USHORT ofs )"
        ],
        "IfCfc_SearchTbl_US256": [
            "static\tUSHORT\tIfCfc_SearchTbl_US256( const USHORT* tbladr, USHORT ofs )"
        ],
        "IfCfc_SearchTbl_US512": [
            "static\tUSHORT\tIfCfc_SearchTbl_US512( const USHORT* tbladr, USHORT ofs )"
        ],
        "IfCfc_SearchTbl_US1024": [
            "static\tUSHORT\tIfCfc_SearchTbl_US1024( const USHORT* tbladr, USHORT ofs )"
        ],
        "IfCfc_Sin": [
            "static\tSHORT\tIfCfc_Sin( USHORT angle )"
        ],
        "IfCfc_Calc_Atan": [
            "static\tUSHORT\tIfCfc_Calc_Atan( const USHORT tan_abs )"
        ],
        "IfCfc_Add_Sign": [
            "static\tLONG\tIfCfc_Add_Sign( const ULONG indat, const LONG signdat )"
        ],
        "IfCfc_SearchTblIp_UC": [
            "static\tUSHORT\tIfCfc_SearchTblIp_UC( const UCHAR* tbladr, const USHORT pos_x, const USHORT z_shift )"
        ],
        "IfCfc_SearchTblIp_UC64": [
            "static\tUSHORT\tIfCfc_SearchTblIp_UC64( const UCHAR* tbladr, const USHORT pos_x, const USHORT z_shift )"
        ],
        "IfCfc_SearchTblIp_US": [
            "static\tUSHORT\tIfCfc_SearchTblIp_US( const USHORT* tbladr, const USHORT pos_x, const USHORT z_shift )"
        ],
        "IfCfc_SearchTblIp_US32": [
            "static\tUSHORT\tIfCfc_SearchTblIp_US32( const USHORT* tbladr, const USHORT pos_x, const USHORT z_shift )"
        ],
        "IfCfc_SearchTblIp_US64": [
            "static\tUSHORT\tIfCfc_SearchTblIp_US64( const USHORT* tbladr, const USHORT pos_x, const USHORT z_shift )"
        ],
        "IfCfc_SearchTblIp_US128": [
            "static\tUSHORT\tIfCfc_SearchTblIp_US128( const USHORT* tbladr, const USHORT pos_x, const USHORT z_shift )"
        ],
        "IfCfc_SearchTblIp_US256": [
            "static\tUSHORT\tIfCfc_SearchTblIp_US256( const USHORT* tbladr, const USHORT pos_x, const USHORT z_shift )"
        ],
        "IfCfc_Calc_FadeValue": [
            "static\tLONG\tIfCfc_Calc_FadeValue( const LONG now_value, const LONG tgt_value, const LONG dlt_value )"
        ],
        "IfCfc_Abs_SF": [
            "static\tFLOAT\tIfCfc_Abs_SF( FLOAT indat )"
        ],
        "IfCfc_RateLimit": [
            "static\tFLOAT\tIfCfc_RateLimit( const FLOAT target, const FLOAT data,const FLOAT up_rate, const FLOAT down_rate )"
        ],
        "IfCfc_SelectMax_FL": [
            "static\tFLOAT\tIfCfc_SelectMax_FL( const FLOAT data1, const FLOAT data2 )"
        ],
        "IfCfc_SelectMin_FL": [
            "static\tFLOAT\tIfCfc_SelectMin_FL( const FLOAT data1, const FLOAT data2 )"
        ],
        "IfCfc_Compute_NotchFilter": [
            "static\tFLOAT\tIfCfc_Compute_NotchFilter( TAG_NF_STAT *nf, const TAG_NF_PARAMS *nfp, const FLOAT v )"
        ],
        "IfCfc_Max_StoS": [
            "inline static\tLONG\tIfCfc_Max_StoS( const LONG indat, const LONG maxdat )"
        ],
        "IfCfc_Min_StoS": [
            "inline static\tLONG\tIfCfc_Min_StoS( const LONG indat, const LONG mindat )"
        ],
        "IfCfc_Max_UtoU": [
            "inline static\tULONG\tIfCfc_Max_UtoU( const ULONG indat, const ULONG maxdat )"
        ],
        "IfCfc_Min_UtoU": [
            "inline static\tULONG\tIfCfc_Min_UtoU( const ULONG indat, const ULONG mindat )"
        ],
        "IfCfc_Min_FtoF": [
            "inline static\tFLOAT\tIfCfc_Min_FtoF( const FLOAT indat, const FLOAT mindat )"
        ],
        "IfCfc_Calc_Sqrt_FtoL": [
            "inline\tstatic\tLONG\tIfCfc_Calc_Sqrt_FtoL( const FLOAT x )"
        ]
    },
    "if_rtedef.h": {},
    "if_rte_ctrl_sg.c": {
        "IfRteCtrl_Set_NDCPeThermMdlTemp_FilmCapTemperatureVal": [
            "VOID\tIfRteCtrl_Set_NDCPeThermMdlTemp_FilmCapTemperatureVal( FLOAT data )"
        ],
        "IfRteCtrl_Get_NDCPeThermMdlTemp_FilmCapTemperatureVal": [
            "FLOAT\tIfRteCtrl_Get_NDCPeThermMdlTemp_FilmCapTemperatureVal( VOID )"
        ],
        "IfRteCtrl_Set_NDCPeThermMdlTemp_FilmCapTemperatureValQf": [
            "VOID\tIfRteCtrl_Set_NDCPeThermMdlTemp_FilmCapTemperatureValQf( UCHAR data )"
        ],
        "IfRteCtrl_Get_NDCPeThermMdlTemp_FilmCapTemperatureValQf": [
            "UCHAR\tIfRteCtrl_Get_NDCPeThermMdlTemp_FilmCapTemperatureValQf( VOID )"
        ],
        "IfRteCtrl_Set_NDCPeThermMdlTemp_DCDCReacTemperatureVal": [
            "VOID\tIfRteCtrl_Set_NDCPeThermMdlTemp_DCDCReacTemperatureVal( FLOAT data )"
        ],
        "IfRteCtrl_Get_NDCPeThermMdlTemp_DCDCReacTemperatureVal": [
            "FLOAT\tIfRteCtrl_Get_NDCPeThermMdlTemp_DCDCReacTemperatureVal( VOID )"
        ],
        "IfRteCtrl_Set_NDCPeThermMdlTemp_Pe1outletTemperatureVal": [
            "VOID\tIfRteCtrl_Set_NDCPeThermMdlTemp_Pe1outletTemperatureVal( FLOAT data )"
        ],
        "IfRteCtrl_Get_NDCPeThermMdlTemp_Pe1outletTemperatureVal": [
            "FLOAT\tIfRteCtrl_Get_NDCPeThermMdlTemp_Pe1outletTemperatureVal( VOID )"
        ],
        "IfRteCtrl_Set_NDCPeThermMdlTemp_Pe1outletTemperatureValQf": [
            "VOID\tIfRteCtrl_Set_NDCPeThermMdlTemp_Pe1outletTemperatureValQf( UCHAR data )"
        ],
        "IfRteCtrl_Get_NDCPeThermMdlTemp_Pe1outletTemperatureValQf": [
            "UCHAR\tIfRteCtrl_Get_NDCPeThermMdlTemp_Pe1outletTemperatureValQf( VOID )"
        ],
        "IfRteCtrl_Set_NDCPeThermMdlTemp_Pe2outletTemperatureVal": [
            "VOID\tIfRteCtrl_Set_NDCPeThermMdlTemp_Pe2outletTemperatureVal( FLOAT data )"
        ],
        "IfRteCtrl_Get_NDCPeThermMdlTemp_Pe2outletTemperatureVal": [
            "FLOAT\tIfRteCtrl_Get_NDCPeThermMdlTemp_Pe2outletTemperatureVal( VOID )"
        ],
        "IfRteCtrl_Set_NDCPeThermMdlTemp_Pe2outletTemperatureValQf": [
            "VOID\tIfRteCtrl_Set_NDCPeThermMdlTemp_Pe2outletTemperatureValQf( UCHAR data )"
        ],
        "IfRteCtrl_Get_NDCPeThermMdlTemp_Pe2outletTemperatureValQf": [
            "UCHAR\tIfRteCtrl_Get_NDCPeThermMdlTemp_Pe2outletTemperatureValQf( VOID )"
        ],
        "IfRteCtrl_Set_NDCPeThermMdlTemp_Pe1IGBTTemperatureVal": [
            "VOID\tIfRteCtrl_Set_NDCPeThermMdlTemp_Pe1IGBTTemperatureVal( FLOAT data )"
        ],
        "IfRteCtrl_Get_NDCPeThermMdlTemp_Pe1IGBTTemperatureVal": [
            "FLOAT\tIfRteCtrl_Get_NDCPeThermMdlTemp_Pe1IGBTTemperatureVal( VOID )"
        ],
        "IfRteCtrl_Set_NDCPeThermMdlTemp_Pe1IGBTTemperatureValQf": [
            "VOID\tIfRteCtrl_Set_NDCPeThermMdlTemp_Pe1IGBTTemperatureValQf( UCHAR data )"
        ],
        "IfRteCtrl_Get_NDCPeThermMdlTemp_Pe1IGBTTemperatureValQf": [
            "UCHAR\tIfRteCtrl_Get_NDCPeThermMdlTemp_Pe1IGBTTemperatureValQf( VOID )"
        ],
        "IfRteCtrl_Set_NDCPeThermMdlTemp_Pe2IGBTTemperatureVal": [
            "VOID\tIfRteCtrl_Set_NDCPeThermMdlTemp_Pe2IGBTTemperatureVal( FLOAT data )"
        ],
        "IfRteCtrl_Get_NDCPeThermMdlTemp_Pe2IGBTTemperatureVal": [
            "FLOAT\tIfRteCtrl_Get_NDCPeThermMdlTemp_Pe2IGBTTemperatureVal( VOID )"
        ],
        "IfRteCtrl_Set_NDCPeThermMdlTemp_Pe2IGBTTemperatureValQf": [
            "VOID\tIfRteCtrl_Set_NDCPeThermMdlTemp_Pe2IGBTTemperatureValQf( UCHAR data )"
        ],
        "IfRteCtrl_Get_NDCPeThermMdlTemp_Pe2IGBTTemperatureValQf": [
            "UCHAR\tIfRteCtrl_Get_NDCPeThermMdlTemp_Pe2IGBTTemperatureValQf( VOID )"
        ],
        "IfRteCtrl_Set_NDCPeThermMdlTemp_TDCDCInitValQf": [
            "VOID\tIfRteCtrl_Set_NDCPeThermMdlTemp_TDCDCInitValQf( UCHAR data )"
        ],
        "IfRteCtrl_Get_NDCPeThermMdlTemp_TDCDCInitValQf": [
            "UCHAR\tIfRteCtrl_Get_NDCPeThermMdlTemp_TDCDCInitValQf( VOID )"
        ],
        "IfRteCtrl_Set_NDCPeThermMdlTemp_TPe1InitValQf": [
            "VOID\tIfRteCtrl_Set_NDCPeThermMdlTemp_TPe1InitValQf( UCHAR data )"
        ],
        "IfRteCtrl_Get_NDCPeThermMdlTemp_TPe1InitValQf": [
            "UCHAR\tIfRteCtrl_Get_NDCPeThermMdlTemp_TPe1InitValQf( VOID )"
        ],
        "IfRteCtrl_Set_NDCPeThermMdlTemp_TPe2InitValQf": [
            "VOID\tIfRteCtrl_Set_NDCPeThermMdlTemp_TPe2InitValQf( UCHAR data )"
        ],
        "IfRteCtrl_Get_NDCPeThermMdlTemp_TPe2InitValQf": [
            "UCHAR\tIfRteCtrl_Get_NDCPeThermMdlTemp_TPe2InitValQf( VOID )"
        ],
        "IfRteCtrl_Set_NDCPeThermMdlTemp_TFilmCapInitValQf": [
            "VOID\tIfRteCtrl_Set_NDCPeThermMdlTemp_TFilmCapInitValQf( UCHAR data )"
        ],
        "IfRteCtrl_Get_NDCPeThermMdlTemp_TFilmCapInitValQf": [
            "UCHAR\tIfRteCtrl_Get_NDCPeThermMdlTemp_TFilmCapInitValQf( VOID )"
        ],
        "IfRteCtrl_Set_PeWtrCooltOutlTEstimd_TValQf": [
            "VOID\tIfRteCtrl_Set_PeWtrCooltOutlTEstimd_TValQf( UCHAR data )"
        ],
        "IfRteCtrl_Get_PeWtrCooltOutlTEstimd_TValQf": [
            "UCHAR\tIfRteCtrl_Get_PeWtrCooltOutlTEstimd_TValQf( VOID )"
        ],
        "IfRteCtrl_Set_Pe1PwrLossEstimd_PwrValQf": [
            "VOID\tIfRteCtrl_Set_Pe1PwrLossEstimd_PwrValQf( UCHAR data )"
        ],
        "IfRteCtrl_Get_Pe1PwrLossEstimd_PwrValQf": [
            "UCHAR\tIfRteCtrl_Get_Pe1PwrLossEstimd_PwrValQf( VOID )"
        ],
        "IfRteCtrl_Set_Pe2PwrLossEstimd_PwrValQf": [
            "VOID\tIfRteCtrl_Set_Pe2PwrLossEstimd_PwrValQf( UCHAR data )"
        ],
        "IfRteCtrl_Get_Pe2PwrLossEstimd_PwrValQf": [
            "UCHAR\tIfRteCtrl_Get_Pe2PwrLossEstimd_PwrValQf( VOID )"
        ],
        "IfRteCtrl_Set_Em2StatorAcBusbarHeatFlowPhaU_HeatFlowPhaUValQf": [
            "VOID\tIfRteCtrl_Set_Em2StatorAcBusbarHeatFlowPhaU_HeatFlowPhaUValQf( UCHAR data )"
        ],
        "IfRteCtrl_Get_Em2StatorAcBusbarHeatFlowPhaU_HeatFlowPhaUValQf": [
            "UCHAR\tIfRteCtrl_Get_Em2StatorAcBusbarHeatFlowPhaU_HeatFlowPhaUValQf( VOID )"
        ],
        "IfRteCtrl_Set_Em2StatorAcBusbarHeatFlowPhaV_HeatFlowPhaVValQf": [
            "VOID\tIfRteCtrl_Set_Em2StatorAcBusbarHeatFlowPhaV_HeatFlowPhaVValQf( UCHAR data )"
        ],
        "IfRteCtrl_Get_Em2StatorAcBusbarHeatFlowPhaV_HeatFlowPhaVValQf": [
            "UCHAR\tIfRteCtrl_Get_Em2StatorAcBusbarHeatFlowPhaV_HeatFlowPhaVValQf( VOID )"
        ],
        "IfRteCtrl_Set_Em2StatorAcBusbarHeatFlowPhaW_HeatFlowPhaWValQf": [
            "VOID\tIfRteCtrl_Set_Em2StatorAcBusbarHeatFlowPhaW_HeatFlowPhaWValQf( UCHAR data )"
        ],
        "IfRteCtrl_Get_Em2StatorAcBusbarHeatFlowPhaW_HeatFlowPhaWValQf": [
            "UCHAR\tIfRteCtrl_Get_Em2StatorAcBusbarHeatFlowPhaW_HeatFlowPhaWValQf( VOID )"
        ],
        "IfRteCtrl_Set_Em1StatorAcBusbarHeatFlowPhaU_HeatFlowPhaUValQf": [
            "VOID\tIfRteCtrl_Set_Em1StatorAcBusbarHeatFlowPhaU_HeatFlowPhaUValQf( UCHAR data )"
        ],
        "IfRteCtrl_Get_Em1StatorAcBusbarHeatFlowPhaU_HeatFlowPhaUValQf": [
            "UCHAR\tIfRteCtrl_Get_Em1StatorAcBusbarHeatFlowPhaU_HeatFlowPhaUValQf( VOID )"
        ],
        "IfRteCtrl_Set_Em1StatorAcBusbarHeatFlowPhaV_HeatFlowPhaVValQf": [
            "VOID\tIfRteCtrl_Set_Em1StatorAcBusbarHeatFlowPhaV_HeatFlowPhaVValQf( UCHAR data )"
        ],
        "IfRteCtrl_Get_Em1StatorAcBusbarHeatFlowPhaV_HeatFlowPhaVValQf": [
            "UCHAR\tIfRteCtrl_Get_Em1StatorAcBusbarHeatFlowPhaV_HeatFlowPhaVValQf( VOID )"
        ],
        "IfRteCtrl_Set_Em1StatorAcBusbarHeatFlowPhaW_HeatFlowPhaWValQf": [
            "VOID\tIfRteCtrl_Set_Em1StatorAcBusbarHeatFlowPhaW_HeatFlowPhaWValQf( UCHAR data )"
        ],
        "IfRteCtrl_Get_Em1StatorAcBusbarHeatFlowPhaW_HeatFlowPhaWValQf": [
            "UCHAR\tIfRteCtrl_Get_Em1StatorAcBusbarHeatFlowPhaW_HeatFlowPhaWValQf( VOID )"
        ],
        "IfRteCtrl_Set_DcLnk_PwrVal": [
            "VOID\tIfRteCtrl_Set_DcLnk_PwrVal( FLOAT data )"
        ],
        "IfRteCtrl_Get_DcLnk_PwrVal": [
            "FLOAT\tIfRteCtrl_Get_DcLnk_PwrVal( VOID )"
        ],
        "IfRteCtrl_Set_DcLnk_PwrValQf": [
            "VOID\tIfRteCtrl_Set_DcLnk_PwrValQf( UCHAR data )"
        ],
        "IfRteCtrl_Get_DcLnk_PwrValQf": [
            "UCHAR\tIfRteCtrl_Get_DcLnk_PwrValQf( VOID )"
        ],
        "IfRteCtrl_Set_NDCPeThermMdlTemp_DCDCFETTemperatureValQf": [
            "VOID\tIfRteCtrl_Set_NDCPeThermMdlTemp_DCDCFETTemperatureValQf( UCHAR data )"
        ],
        "IfRteCtrl_Get_NDCPeThermMdlTemp_DCDCFETTemperatureValQf": [
            "UCHAR\tIfRteCtrl_Get_NDCPeThermMdlTemp_DCDCFETTemperatureValQf( VOID )"
        ],
        "IfRteCtrl_Set_NDCPeThermMdlTemp_DCDCReacTemperatureValQf": [
            "VOID\tIfRteCtrl_Set_NDCPeThermMdlTemp_DCDCReacTemperatureValQf( UCHAR data )"
        ],
        "IfRteCtrl_Get_NDCPeThermMdlTemp_DCDCReacTemperatureValQf": [
            "UCHAR\tIfRteCtrl_Get_NDCPeThermMdlTemp_DCDCReacTemperatureValQf( VOID )"
        ],
        "IfRteCtrl_Set_Eds1_ActvDcha_RegiTemp": [
            "VOID\tIfRteCtrl_Set_Eds1_ActvDcha_RegiTemp( FLOAT data )"
        ],
        "IfRteCtrl_Get_Eds1_ActvDcha_RegiTemp": [
            "FLOAT\tIfRteCtrl_Get_Eds1_ActvDcha_RegiTemp( VOID )"
        ],
        "IfRteCtrl_Set_PE1JunctionTmp": [
            "VOID\tIfRteCtrl_Set_PE1JunctionTmp( FLOAT data )"
        ],
        "IfRteCtrl_Get_PE1JunctionTmp": [
            "FLOAT\tIfRteCtrl_Get_PE1JunctionTmp( VOID )"
        ],
        "IfRteCtrl_Set_PE2JunctionTmp": [
            "VOID\tIfRteCtrl_Set_PE2JunctionTmp( FLOAT data )"
        ],
        "IfRteCtrl_Get_PE2JunctionTmp": [
            "FLOAT\tIfRteCtrl_Get_PE2JunctionTmp( VOID )"
        ],
        "IfRteCtrl_Set_DcdcMosFetMdlTmp": [
            "VOID\tIfRteCtrl_Set_DcdcMosFetMdlTmp( FLOAT data )"
        ],
        "IfRteCtrl_Get_DcdcMosFetMdlTmp": [
            "FLOAT\tIfRteCtrl_Get_DcdcMosFetMdlTmp( VOID )"
        ]
    },
    "if_rte_pf_sg.c": {
        "IfRtePf_Get_NDCPe1IGBTTemp_TUVal": [
            "SHORT\tIfRtePf_Get_NDCPe1IGBTTemp_TUVal( VOID )"
        ],
        "IfRtePf_Get_NDCPe1IGBTTemp_TVVal": [
            "SHORT\tIfRtePf_Get_NDCPe1IGBTTemp_TVVal( VOID )"
        ],
        "IfRtePf_Get_NDCPe1IGBTTemp_TWVal": [
            "SHORT\tIfRtePf_Get_NDCPe1IGBTTemp_TWVal( VOID )"
        ],
        "IfRtePf_Get_NDCPe2IGBTTemp_TUVal": [
            "SHORT\tIfRtePf_Get_NDCPe2IGBTTemp_TUVal( VOID )"
        ],
        "IfRtePf_Get_NDCPe2IGBTTemp_TVVal": [
            "SHORT\tIfRtePf_Get_NDCPe2IGBTTemp_TVVal( VOID )"
        ],
        "IfRtePf_Get_NDCPe2IGBTTemp_TWVal": [
            "SHORT\tIfRtePf_Get_NDCPe2IGBTTemp_TWVal( VOID )"
        ],
        "IfRtePf_Get_NDCTempSens_TCapVal": [
            "SHORT\tIfRtePf_Get_NDCTempSens_TCapVal( VOID )"
        ],
        "IfRtePf_Get_NDCTempSens_TPCBVal": [
            "SHORT\tIfRtePf_Get_NDCTempSens_TPCBVal( VOID )"
        ],
        "IfRtePf_Get_NDCDCDCBswTemp_T1FETVal": [
            "SHORT\tIfRtePf_Get_NDCDCDCBswTemp_T1FETVal( VOID )"
        ],
        "IfRtePf_Get_NDCDCDCBswTemp_T2FETVal": [
            "SHORT\tIfRtePf_Get_NDCDCDCBswTemp_T2FETVal( VOID )"
        ],
        "IfRtePf_Get_NDCDCDCBswTemp_TDCDCReac1Val": [
            "SHORT\tIfRtePf_Get_NDCDCDCBswTemp_TDCDCReac1Val( VOID )"
        ],
        "IfRtePf_Get_NDCDCDCBswTemp_TDCDCReac2Val": [
            "SHORT\tIfRtePf_Get_NDCDCDCBswTemp_TDCDCReac2Val( VOID )"
        ],
        "IfRtePf_Get_NDCDCDCBswVolt_VDCDCHVVal": [
            "SHORT\tIfRtePf_Get_NDCDCDCBswVolt_VDCDCHVVal( VOID )"
        ],
        "IfRtePf_Get_NDCDCDCBswCurr_IDCDCHVVal": [
            "SHORT\tIfRtePf_Get_NDCDCDCBswCurr_IDCDCHVVal( VOID )"
        ],
        "IfRtePf_Get_NDCDCDCBswCurr_IDCDCinterleaveP1": [
            "SHORT\tIfRtePf_Get_NDCDCDCBswCurr_IDCDCinterleaveP1( VOID )"
        ],
        "IfRtePf_Get_NDCDCDCBswCurr_IDCDCinterleaveP2": [
            "SHORT\tIfRtePf_Get_NDCDCDCBswCurr_IDCDCinterleaveP2( VOID )"
        ],
        "IfRtePf_Get_NDCDCDCBswCurr_IDCDCinterleaveP3": [
            "SHORT\tIfRtePf_Get_NDCDCDCBswCurr_IDCDCinterleaveP3( VOID )"
        ],
        "IfRtePf_Get_NDCPe1CtrlCddDuty_ModlnFactorVal": [
            "FLOAT\tIfRtePf_Get_NDCPe1CtrlCddDuty_ModlnFactorVal( VOID )"
        ],
        "IfRtePf_Get_NDCPe2CtrlCddDuty_ModlnFactorVal": [
            "FLOAT\tIfRtePf_Get_NDCPe2CtrlCddDuty_ModlnFactorVal( VOID )"
        ],
        "IfRtePf_Get_NDCPe1CtrlCddCurr_IpeakVal": [
            "FLOAT\tIfRtePf_Get_NDCPe1CtrlCddCurr_IpeakVal( VOID )"
        ],
        "IfRtePf_Get_NDCPe2CtrlCddCurr_IpeakVal": [
            "FLOAT\tIfRtePf_Get_NDCPe2CtrlCddCurr_IpeakVal( VOID )"
        ],
        "IfRtePf_Get_NDCPe1CtrlCddFreq_PWMFreqActVal": [
            "FLOAT\tIfRtePf_Get_NDCPe1CtrlCddFreq_PWMFreqActVal( VOID )"
        ],
        "IfRtePf_Get_NDCPe2CtrlCddFreq_PWMFreqActVal": [
            "FLOAT\tIfRtePf_Get_NDCPe2CtrlCddFreq_PWMFreqActVal( VOID )"
        ],
        "IfRtePf_Get_NDCPe1CtrlCddDuty_DutyURefVal": [
            "FLOAT\tIfRtePf_Get_NDCPe1CtrlCddDuty_DutyURefVal( VOID )"
        ],
        "IfRtePf_Get_NDCPe1CtrlCddDuty_DutyVRefVal": [
            "FLOAT\tIfRtePf_Get_NDCPe1CtrlCddDuty_DutyVRefVal( VOID )"
        ],
        "IfRtePf_Get_NDCPe1CtrlCddDuty_DutyWRefVal": [
            "FLOAT\tIfRtePf_Get_NDCPe1CtrlCddDuty_DutyWRefVal( VOID )"
        ],
        "IfRtePf_Get_NDCPe2CtrlCddDuty_DutyURefVal": [
            "FLOAT\tIfRtePf_Get_NDCPe2CtrlCddDuty_DutyURefVal( VOID )"
        ],
        "IfRtePf_Get_NDCPe2CtrlCddDuty_DutyVRefVal": [
            "FLOAT\tIfRtePf_Get_NDCPe2CtrlCddDuty_DutyVRefVal( VOID )"
        ],
        "IfRtePf_Get_NDCPe2CtrlCddDuty_DutyWRefVal": [
            "FLOAT\tIfRtePf_Get_NDCPe2CtrlCddDuty_DutyWRefVal( VOID )"
        ],
        "IfRtePf_Get_NDCPe1CtrlCddVolt_DcLnkV": [
            "FLOAT\tIfRtePf_Get_NDCPe1CtrlCddVolt_DcLnkV( VOID )"
        ],
        "IfRtePf_Get_NDCPe2CtrlCddVolt_DcLnkV": [
            "FLOAT\tIfRtePf_Get_NDCPe2CtrlCddVolt_DcLnkV( VOID )"
        ],
        "IfRtePf_Get_NDCPe1CtrlCddVolt_DcLnkVQf": [
            "CHAR\tIfRtePf_Get_NDCPe1CtrlCddVolt_DcLnkVQf( VOID )"
        ],
        "IfRtePf_Get_NDCPe2CtrlCddVolt_DcLnkVQf": [
            "CHAR\tIfRtePf_Get_NDCPe2CtrlCddVolt_DcLnkVQf( VOID )"
        ],
        "IfRtePf_Get_NDCDCDCCtrlDuty_DutyDCDCVal": [
            "FLOAT\tIfRtePf_Get_NDCDCDCCtrlDuty_DutyDCDCVal( VOID )"
        ],
        "IfRtePf_Get_NDCDCDCCtrlFreq_PWMFreqActVal": [
            "FLOAT\tIfRtePf_Get_NDCDCDCCtrlFreq_PWMFreqActVal( VOID )"
        ],
        "IfRtePf_Get_GetFlg_Pe1OverVoltageSts": [
            "FLAG\tIfRtePf_Get_GetFlg_Pe1OverVoltageSts( VOID )"
        ],
        "IfRtePf_Get_GetFlg_Pe2OverVoltageSts": [
            "FLAG\tIfRtePf_Get_GetFlg_Pe2OverVoltageSts( VOID )"
        ],
        "IfRtePf_Get_GetFlg_Pe1OverCurrentSts": [
            "FLAG\tIfRtePf_Get_GetFlg_Pe1OverCurrentSts( VOID )"
        ],
        "IfRtePf_Get_GetFlg_Pe2OverCurrentSts": [
            "FLAG\tIfRtePf_Get_GetFlg_Pe2OverCurrentSts( VOID )"
        ],
        "IfRtePf_Get_DcdcOnTrigerPeriod1L": [
            "USHORT\tIfRtePf_Get_DcdcOnTrigerPeriod1L( VOID )"
        ],
        "IfRtePf_Get_DcdcOnTime1L": [
            "USHORT\tIfRtePf_Get_DcdcOnTime1L( VOID )"
        ],
        "IfRtePf_Get_DcdcOffTime1L": [
            "USHORT\tIfRtePf_Get_DcdcOffTime1L( VOID )"
        ],
        "IfRtePf_Get_DcdcRingingTime": [
            "USHORT\tIfRtePf_Get_DcdcRingingTime( VOID )"
        ],
        "IfRtePf_Get_DcdcStatus": [
            "UCHAR\tIfRtePf_Get_DcdcStatus( VOID )"
        ],
        "IfRtePf_Get_Em1SpdAct_SpdVal": [
            "FLOAT\tIfRtePf_Get_Em1SpdAct_SpdVal( VOID )"
        ],
        "IfRtePf_Get_Em2SpdAct_SpdVal": [
            "FLOAT\tIfRtePf_Get_Em2SpdAct_SpdVal( VOID )"
        ],
        "IfRtePf_Get_Em1IdqAct_IdVal": [
            "FLOAT\tIfRtePf_Get_Em1IdqAct_IdVal( VOID )"
        ],
        "IfRtePf_Get_Em1IdqAct_IqVal": [
            "FLOAT\tIfRtePf_Get_Em1IdqAct_IqVal( VOID )"
        ],
        "IfRtePf_Get_Em2IdqAct_IdVal": [
            "FLOAT\tIfRtePf_Get_Em2IdqAct_IdVal( VOID )"
        ],
        "IfRtePf_Get_Em2IdqAct_IqVal": [
            "FLOAT\tIfRtePf_Get_Em2IdqAct_IqVal( VOID )"
        ],
        "IfRtePf_Get_Pe1PhaISwPhaU_Pe1PhaISwPhaU": [
            "FLOAT\tIfRtePf_Get_Pe1PhaISwPhaU_Pe1PhaISwPhaU( VOID )"
        ],
        "IfRtePf_Get_Pe1PhaISwPhaV_Pe1PhaISwPhaV": [
            "FLOAT\tIfRtePf_Get_Pe1PhaISwPhaV_Pe1PhaISwPhaV( VOID )"
        ],
        "IfRtePf_Get_Pe1PhaISwPhaW_Pe1PhaISwPhaW": [
            "FLOAT\tIfRtePf_Get_Pe1PhaISwPhaW_Pe1PhaISwPhaW( VOID )"
        ],
        "IfRtePf_Get_Pe2PhaISwPhaU_Pe2PhaISwPhaU": [
            "FLOAT\tIfRtePf_Get_Pe2PhaISwPhaU_Pe2PhaISwPhaU( VOID )"
        ],
        "IfRtePf_Get_Pe2PhaISwPhaV_Pe2PhaISwPhaV": [
            "FLOAT\tIfRtePf_Get_Pe2PhaISwPhaV_Pe2PhaISwPhaV( VOID )"
        ],
        "IfRtePf_Get_Pe2PhaISwPhaW_Pe2PhaISwPhaW": [
            "FLOAT\tIfRtePf_Get_Pe2PhaISwPhaW_Pe2PhaISwPhaW( VOID )"
        ],
        "IfRtePf_Get_Eds1ActvDcha_StsVal": [
            "BOOL\tIfRtePf_Get_Eds1ActvDcha_StsVal( VOID )"
        ],
        "IfRtePf_Get_NDCDCCurrsensCurr_IVal": [
            "SHORT\tIfRtePf_Get_NDCDCCurrsensCurr_IVal( VOID )"
        ],
        "IfRtePf_Get_Pe2_Stalled_Flg": [
            "FLAG\tIfRtePf_Get_Pe2_Stalled_Flg( VOID )"
        ]
    },
    "Rte.h": {},
    "Rte_Main.h": {},
    "Rte_Type.h": {},
    "Std_Types.h": {},
    "derating.c": {
        "Derating_Set_Inidat": [
            "VOID\tDerating_Set_Inidat( VOID )"
        ],
        "Derating_Calc_LimitRate_1ms": [
            "VOID Derating_Calc_LimitRate_1ms( VOID )"
        ],
        "Derating_Calc_LimitRate_10ms": [
            "VOID Derating_Calc_LimitRate_10ms( VOID )"
        ],
        "Derating_Renewal_DeratingInput": [
            "static\tVOID\tDerating_Renewal_DeratingInput( const TAG_DRTG_DERATING_DTO hys_dto, const UCHAR task_run )"
        ],
        "Derating_Calc_LIMIT": [
            "static\tVOID\tDerating_Calc_LIMIT( const TAG_DRTG_DERATING_DTO dto, const UCHAR task_run )"
        ],
        "Derating_Calc_Derating_Factor2": [
            "static FLOAT Derating_Calc_Derating_Factor2( const FLOAT f4_in, const FLOAT f4_limit_start, const FLOAT f4_limit_fin, const FLOAT f4_derating_rate )"
        ],
        "Derating_Calc_FET_TEMP_EST": [
            "static FLOAT Derating_Calc_FET_TEMP_EST( VOID )"
        ],
        "Derating_Calc_BATT_PWR_LIMIT": [
            "static VOID Derating_Calc_BATT_PWR_LIMIT( VOID )"
        ],
        "Derating_Select_LimitRateMin_DCDC": [
            "static\tVOID Derating_Select_LimitRateMin_DCDC( VOID )"
        ],
        "Derating_Select_LimitRateMin_PE1": [
            "static\tVOID Derating_Select_LimitRateMin_PE1( VOID )"
        ],
        "Derating_Select_LimitRateMin_PE2": [
            "static\tVOID Derating_Select_LimitRateMin_PE2( VOID )"
        ],
        "Derating_Select_PE1_PhaseCurrentLimit": [
            "static\tVOID Derating_Select_PE1_PhaseCurrentLimit( VOID )"
        ],
        "Derating_Select_PE2_PhaseCurrentLimit": [
            "static\tVOID Derating_Select_PE2_PhaseCurrentLimit( VOID )"
        ],
        "LimitRate_LinearInterpolation": [
            "static\tFLOAT\tLimitRate_LinearInterpolation( const FLOAT xin, const FLOAT x0, const FLOAT x1, const FLOAT y0, const FLOAT y1 )"
        ],
        "LimitRate_Interpolation_1Dem": [
            "static\tFLOAT\tLimitRate_Interpolation_1Dem( const FLOAT xin, const USHORT size, const FLOAT* const x_tbl, const FLOAT* const y_tbl )"
        ],
        "Cfl_Interpolation_2Dem": [
            "static\tFLOAT\tCfl_Interpolation_2Dem( const FLOAT xin, const FLOAT yin, const TAG_ITPTBL_2DEM * const table )"
        ],
        "Derating_Calc_PE1_IGBT_TEMP_EST": [
            "static\tVOID\tDerating_Calc_PE1_IGBT_TEMP_EST( VOID )"
        ],
        "Derating_Calc_PE2_IGBT_TEMP_EST": [
            "static\tVOID\tDerating_Calc_PE2_IGBT_TEMP_EST( VOID )"
        ],
        "Calc_IGBT_SWITCHING": [
            "static\tUSHORT\tCalc_IGBT_SWITCHING( const UCHAR drv )"
        ],
        "Get_UVW_CURR_MAX": [
            "static\tFLOAT\tGet_UVW_CURR_MAX( const UCHAR drv )"
        ],
        "Get_PHASE_CURR": [
            "static\tFLOAT\tGet_PHASE_CURR( const UCHAR drv )"
        ],
        "Calc_IGBT_LOSS": [
            "static\tFLOAT\tCalc_IGBT_LOSS( const FLOAT vdc, const FLOAT curr, const USHORT fcpwm, const FLOAT dc_coeff_1, const FLOAT dc_coeff_2, const FLOAT sw_coeff, const FLOAT loss_margin, const UCHAR drv )"
        ],
        "Calc_DIODE_LOSS": [
            "static\tFLOAT\tCalc_DIODE_LOSS( const FLOAT vdc, const FLOAT curr, const USHORT fcpwm, const FLOAT dc_coeff_1, const FLOAT dc_coeff_2, const FLOAT sw_coeff, const FLOAT loss_margin, const UCHAR drv )"
        ],
        "Calc_THERMISTOR_TMP_DELTA": [
            "static\tFLOAT\tCalc_THERMISTOR_TMP_DELTA( const FLOAT igbt_loss, const FLOAT diode_loss, const FLAG f_mlock )"
        ],
        "Calc_JUNCTION_TMP_DELTA": [
            "static\tFLOAT\tCalc_JUNCTION_TMP_DELTA( const FLOAT igbt_loss, const FLOAT diode_loss, const FLAG f_mlock, const UCHAR drv )"
        ],
        "Calc_FLOW_GAIN": [
            "static\tFLOAT\tCalc_FLOW_GAIN( const FLOAT coeff_3, const FLOAT coeff_2, const FLOAT coeff_1, const FLOAT coeff_0 )"
        ],
        "Derating_Calc_Dcdc_Loss_MaxMin": [
            "static\tVOID\tDerating_Calc_Dcdc_Loss_MaxMin( VOID )"
        ],
        "Derating_Select_PwmLimit_PE2": [
            "static\tVOID\tDerating_Select_PwmLimit_PE2( VOID )"
        ]
    },
    "derating.h": {},
    "PeDerating.c": {
        "PeDerating_Init": [
            "void PeDerating_Init(void)"
        ],
        "PeDerating_Run1_Main": [
            "void PeDerating_Run1_Main(void)"
        ],
        "PeDerating_Run2_Main": [
            "void PeDerating_Run2_Main(void)"
        ]
    },
    "PeDerating.h": {},
    "PeDerating_MemMap.h": {},
    "Rte_PeDerating.h": {},
    "Rte_PeDerating_Type.h": {},
    "CommonParams.c": {
        "RESTART_STHMC04031": [
            "void RESTART_STHMC04031(void)"
        ],
        "STEP_STHMC04031": [
            "void STEP_STHMC04031(void)"
        ],
        "STHMC040326_Calc_ParamTemperature": [
            "static void STHMC040326_Calc_ParamTemperature(void)"
        ],
        "STHMC040327_Calc_duty": [
            "static void STHMC040327_Calc_duty(void)"
        ],
        "STHMC040328_Calc_pwmratio": [
            "static void STHMC040328_Calc_pwmratio(void)"
        ],
        "STHMC040329_Make_iuvw_ad": [
            "static void STHMC040329_Make_iuvw_ad(void)"
        ],
        "STHMC040330_Select_VflowWtrIn": [
            "static void STHMC040330_Select_VflowWtrIn(void)"
        ],
        "STHMC04033_Main_mode": [
            "static void STHMC04033_Main_mode(void)"
        ],
        "STHMC04034_Main_modmode": [
            "static void STHMC04034_Main_modmode(void)"
        ],
        "STHMC04035_Main_params": [
            "static void STHMC04035_Main_params(void)"
        ],
        "STHMC04036_Judge_Pe1_stall": [
            "static void STHMC04036_Judge_Pe1_stall(void)"
        ],
        "STHMC04037_Judge_Pe2_stall": [
            "static void STHMC04037_Judge_Pe2_stall(void)"
        ],
        "STHMC04038_Make_ctrlmodcalcd": [
            "static void STHMC04038_Make_ctrlmodcalcd(void)"
        ]
    },
    "CommonParams.h": {},
    "DataElement.h": {},
    "DcBusLoss.c": {},
    "DcBusLoss.h": {},
    "DcBusThermal.c": {},
    "DcBusThermal.h": {},
    "DcdcLoss.c": {
        "RESTART_STHMC04081": [
            "void RESTART_STHMC04081(void)"
        ],
        "STEP_STHMC04081": [
            "void STEP_STHMC04081(void)"
        ],
        "STHMC040834_Calc_Bus_Loss": [
            "static void STHMC040834_Calc_Bus_Loss(void)"
        ],
        "STHMC040835_Calc_Current_Ave_to_Half": [
            "static void STHMC040835_Calc_Current_Ave_to_Half(void)"
        ],
        "STHMC040836_Calc_Gnd_Bus_Resistance_Energy_Loss": [
            "static void STHMC040836_Calc_Gnd_Bus_Resistance_Energy_Loss(void)"
        ],
        "STHMC040837_Calc_Idc_Vdrop_Ploss_Stall": [
            "static void STHMC040837_Calc_Idc_Vdrop_Ploss_Stall(void)"
        ],
        "STHMC040838_Calc_Input_Bus_Resistance_Energy_Loss": [
            "static void STHMC040838_Calc_Input_Bus_Resistance_Energy_Loss(void)"
        ],
        "STHMC040839_Calc_Input_Cap_Loss": [
            "static void STHMC040839_Calc_Input_Cap_Loss(void)"
        ],
        "STHMC04083_Main_DcdcLoss": [
            "static void STHMC04083_Main_DcdcLoss(void)"
        ],
        "STHMC040840_Calc_Iron_Loss": [
            "static void STHMC040840_Calc_Iron_Loss(void)"
        ],
        "STHMC040841_Calc_Output_Bus_Resistance_Energy_Loss": [
            "static void STHMC040841_Calc_Output_Bus_Resistance_Energy_Loss(void)"
        ],
        "STHMC040842_Calc_Output_Cap_Loss": [
            "static void STHMC040842_Calc_Output_Cap_Loss(void)"
        ],
        "STHMC040843_Calc_Reactor_Loss": [
            "static void STHMC040843_Calc_Reactor_Loss(void)"
        ],
        "STHMC040844_Proc_Duty": [
            "static void STHMC040844_Proc_Duty(void)"
        ],
        "STHMC040849_Calc_Igain_Vdrop_Ploss": [
            "static void STHMC040849_Calc_Igain_Vdrop_Ploss(void)"
        ],
        "STHMC04084_Calc_DcdcLoss_Ini": [
            "static void STHMC04084_Calc_DcdcLoss_Ini(void)"
        ],
        "STHMC040850_Calc_Vin": [
            "static void STHMC040850_Calc_Vin(void)"
        ],
        "STHMC040851_Make_PartsParam": [
            "static void STHMC040851_Make_PartsParam(void)"
        ],
        "STHMC040852_Calc_Idctmp_Vin": [
            "static void STHMC040852_Calc_Idctmp_Vin(void)"
        ],
        "STHMC040853_Calc_Igain_Vdrop_Ploss_IGBTandDiode": [
            "static void STHMC040853_Calc_Igain_Vdrop_Ploss_IGBTandDiode(void)"
        ],
        "STHMC040854_Calc_Vdrop_Ploss_DCpart": [
            "static void STHMC040854_Calc_Vdrop_Ploss_DCpart(void)"
        ],
        "STHMC040855_Calc_Iinc_Vdrop_Ploss_Switching": [
            "static void STHMC040855_Calc_Iinc_Vdrop_Ploss_Switching(void)"
        ],
        "STHMC040856_Calc_Vdrop_Ploss_Conduction": [
            "static void STHMC040856_Calc_Vdrop_Ploss_Conduction(void)"
        ],
        "STHMC040857_Calc_Vdrop_Ploss_Recovery": [
            "static void STHMC040857_Calc_Vdrop_Ploss_Recovery(void)"
        ],
        "STHMC040858_Correct_Igain_Vdrop_Ploss": [
            "static void STHMC040858_Correct_Igain_Vdrop_Ploss(void)"
        ],
        "STHMC040859_Make_SwitchingSignal": [
            "static void STHMC040859_Make_SwitchingSignal(void)"
        ],
        "STHMC04085_Calc_DcdcLoss_Ope": [
            "static void STHMC04085_Calc_DcdcLoss_Ope(void)"
        ],
        "STHMC040860_Calc_Iinc_Vdrop_Switching": [
            "static void STHMC040860_Calc_Iinc_Vdrop_Switching(void)"
        ],
        "STHMC040861_Calc_Vdrop_Ploss_Switching_ineg": [
            "static void STHMC040861_Calc_Vdrop_Ploss_Switching_ineg(void)"
        ],
        "STHMC040862_Calc_Vdrop_Ploss_Switching_ipos": [
            "static void STHMC040862_Calc_Vdrop_Ploss_Switching_ipos(void)"
        ],
        "STHMC04086_Calc_DcdcElec": [
            "static void STHMC04086_Calc_DcdcElec(void)"
        ],
        "STHMC040879_Calc_Iinc_Conduction": [
            "static void STHMC040879_Calc_Iinc_Conduction(void)"
        ],
        "STHMC04087_Calc_DcdcLoss": [
            "static void STHMC04087_Calc_DcdcLoss(void)"
        ],
        "STHMC040880_Calc_Ploss_Conduction": [
            "static void STHMC040880_Calc_Ploss_Conduction(void)"
        ],
        "STHMC040881_Calc_Vdrop_Conduction": [
            "static void STHMC040881_Calc_Vdrop_Conduction(void)"
        ],
        "STHMC040882_Calc_Vdrop_Ploss_Conduction_ineg": [
            "static void STHMC040882_Calc_Vdrop_Ploss_Conduction_ineg(void)"
        ],
        "STHMC040883_Calc_Vdrop_Ploss_Conduction_ipos": [
            "static void STHMC040883_Calc_Vdrop_Ploss_Conduction_ipos(void)"
        ],
        "STHMC040884_Calc_ratio_param": [
            "static void STHMC040884_Calc_ratio_param(void)"
        ],
        "STHMC04088_Correct_DcdcLoss": [
            "static void STHMC04088_Correct_DcdcLoss(void)"
        ],
        "STHMC04089_Judge_ActMode": [
            "static void STHMC04089_Judge_ActMode(void)"
        ]
    },
    "DcdcLoss.h": {},
    "DcdcLoss_lut.c": {
        "TabIdxS48T3150_THMC0408": [
            "void TabIdxS48T3150_THMC0408(const float32 * x_table, uint16 N, float32 x, uint16 * irx, float32 *fraction)"
        ]
    },
    "DcdcLoss_lut.h": {},
    "DcdcThermal.c": {
        "RESTART_STHMC04111": [
            "void RESTART_STHMC04111(void)"
        ],
        "STEP_STHMC04111": [
            "void STEP_STHMC04111(void)"
        ],
        "STHMC0411102_Proc_Thm_WtrIn_FB": [
            "static void STHMC0411102_Proc_Thm_WtrIn_FB(void)"
        ],
        "STHMC0411103_Proc_Thm_WtrOut_FB": [
            "static void STHMC0411103_Proc_Thm_WtrOut_FB(void)"
        ],
        "STHMC041111_Select_MaxTemp": [
            "static void STHMC041111_Select_MaxTemp(void)"
        ],
        "STHMC0411127_Correct_Q_FB": [
            "static void STHMC0411127_Correct_Q_FB(void)"
        ],
        "STHMC0411128_Proc_LPF": [
            "static void STHMC0411128_Proc_LPF(void)"
        ],
        "STHMC041112_Correct_Temp": [
            "static void STHMC041112_Correct_Temp(void)"
        ],
        "STHMC041113_Proc_Temp": [
            "static void STHMC041113_Proc_Temp(void)"
        ],
        "STHMC041114_Select_OutputTemp": [
            "static void STHMC041114_Select_OutputTemp(void)"
        ],
        "STHMC0411158_Correct_Q_FB": [
            "static void STHMC0411158_Correct_Q_FB(void)"
        ],
        "STHMC0411159_Proc_LPF": [
            "static void STHMC0411159_Proc_LPF(void)"
        ],
        "STHMC041117_Proc_Base_MOSFET": [
            "static void STHMC041117_Proc_Base_MOSFET(void)"
        ],
        "STHMC0411184_Proc_WaterFET1": [
            "static void STHMC0411184_Proc_WaterFET1(void)"
        ],
        "STHMC0411185_Proc_WaterFET2": [
            "static void STHMC0411185_Proc_WaterFET2(void)"
        ],
        "STHMC0411186_Proc_WaterFET3": [
            "static void STHMC0411186_Proc_WaterFET3(void)"
        ],
        "STHMC0411187_Proc_WaterFET4": [
            "static void STHMC0411187_Proc_WaterFET4(void)"
        ],
        "STHMC0411188_Proc_WaterFET5": [
            "static void STHMC0411188_Proc_WaterFET5(void)"
        ],
        "STHMC0411189_Proc_WaterFET6": [
            "static void STHMC0411189_Proc_WaterFET6(void)"
        ],
        "STHMC041118_Proc_Base_Reactor": [
            "static void STHMC041118_Proc_Base_Reactor(void)"
        ],
        "STHMC041119_Proc_DCBusN": [
            "static void STHMC041119_Proc_DCBusN(void)"
        ],
        "STHMC041120_Proc_FET": [
            "static void STHMC041120_Proc_FET(void)"
        ],
        "STHMC041121_Proc_HeatsinkFET": [
            "static void STHMC041121_Proc_HeatsinkFET(void)"
        ],
        "STHMC041122_Proc_HeatsinkReactor": [
            "static void STHMC041122_Proc_HeatsinkReactor(void)"
        ],
        "STHMC041123_Proc_InputBus": [
            "static void STHMC041123_Proc_InputBus(void)"
        ],
        "STHMC041124_Proc_OutputBus": [
            "static void STHMC041124_Proc_OutputBus(void)"
        ],
        "STHMC041125_Proc_REA_FET_BUS": [
            "static void STHMC041125_Proc_REA_FET_BUS(void)"
        ],
        "STHMC0411261_Calc_Temp_NoSdn": [
            "static void STHMC0411261_Calc_Temp_NoSdn(void)"
        ],
        "STHMC0411262_Calc_Temp_Sdn": [
            "static void STHMC0411262_Calc_Temp_Sdn(void)"
        ],
        "STHMC041126_Proc_ReactorCoil": [
            "static void STHMC041126_Proc_ReactorCoil(void)"
        ],
        "STHMC041127_Proc_T_wtrFB": [
            "static void STHMC041127_Proc_T_wtrFB(void)"
        ],
        "STHMC041128_Proc_ThmFET": [
            "static void STHMC041128_Proc_ThmFET(void)"
        ],
        "STHMC041129_Proc_ThmFET_TempFB": [
            "static void STHMC041129_Proc_ThmFET_TempFB(void)"
        ],
        "STHMC041130_Proc_ThmReactor": [
            "static void STHMC041130_Proc_ThmReactor(void)"
        ],
        "STHMC041131_Proc_ThmReactor_TempFB": [
            "static void STHMC041131_Proc_ThmReactor_TempFB(void)"
        ],
        "STHMC041132_Proc_Water_FET": [
            "static void STHMC041132_Proc_Water_FET(void)"
        ],
        "STHMC041134_Reset_TempIni": [
            "static void STHMC041134_Reset_TempIni(void)"
        ],
        "STHMC041135_Proc_Base_MOSFET": [
            "static void STHMC041135_Proc_Base_MOSFET(void)"
        ],
        "STHMC041136_Select_variable_G": [
            "static void STHMC041136_Select_variable_G(void)"
        ],
        "STHMC04113_Main_DcdcThermal": [
            "static void STHMC04113_Main_DcdcThermal(void)"
        ],
        "STHMC041149_Proc_Base_Reactor": [
            "static void STHMC041149_Proc_Base_Reactor(void)"
        ],
        "STHMC04114_Calc_Temp_Ini": [
            "static void STHMC04114_Calc_Temp_Ini(void)"
        ],
        "STHMC041150_Select_variable_G": [
            "static void STHMC041150_Select_variable_G(void)"
        ],
        "STHMC04115_Calc_Temp_Ope": [
            "static void STHMC04115_Calc_Temp_Ope(void)"
        ],
        "STHMC04116_Calc_Temp_OpeTmp": [
            "static void STHMC04116_Calc_Temp_OpeTmp(void)"
        ],
        "STHMC04117_Calc_Temp_Sdn": [
            "static void STHMC04117_Calc_Temp_Sdn(void)"
        ],
        "STHMC041198_Proc_Thm_TempFB": [
            "static void STHMC041198_Proc_Thm_TempFB(void)"
        ],
        "STHMC041199_Proc_Thm_Wtr": [
            "static void STHMC041199_Proc_Thm_Wtr(void)"
        ]
    },
    "DcdcThermal.h": {},
    "DcdcThermal_lut.c": {
        "TabIdxS48T3150_THMC0411": [
            "void TabIdxS48T3150_THMC0411(const float32 * x_table, uint16 N, float32 x, uint16 * irx, float32 *fraction)"
        ]
    },
    "DcdcThermal_lut.h": {},
    "FilmCapLoss.c": {
        "RESTART_STHMC04131": [
            "void RESTART_STHMC04131(void)"
        ],
        "STEP_STHMC04131": [
            "void STEP_STHMC04131(void)"
        ],
        "STHMC041314_Calc_PlossCap": [
            "static void STHMC041314_Calc_PlossCap(void)"
        ],
        "STHMC041315_Calc_PlossDcbus": [
            "static void STHMC041315_Calc_PlossDcbus(void)"
        ],
        "STHMC041316_Calc_PlossTotal": [
            "static void STHMC041316_Calc_PlossTotal(void)"
        ],
        "STHMC041317_Make_ResistanceValues": [
            "static void STHMC041317_Make_ResistanceValues(void)"
        ],
        "STHMC04133_Main_FilmCapLoss": [
            "static void STHMC04133_Main_FilmCapLoss(void)"
        ],
        "STHMC04134_Calc_Ploss": [
            "static void STHMC04134_Calc_Ploss(void)"
        ],
        "STHMC04135_Reset_Ploss": [
            "static void STHMC04135_Reset_Ploss(void)"
        ],
        "STHMC04136_Proc_ActiveDischarge_Ploss": [
            "static void STHMC04136_Proc_ActiveDischarge_Ploss(void)"
        ],
        "STHMC04137_Proc_Ploss": [
            "static void STHMC04137_Proc_Ploss(void)"
        ]
    },
    "FilmCapLoss.h": {},
    "FilmCapThermal.c": {
        "RESTART_STHMC04121": [
            "void RESTART_STHMC04121(void)"
        ],
        "STEP_STHMC04121": [
            "void STEP_STHMC04121(void)"
        ],
        "STHMC041211_Calc_BusLoss": [
            "static void STHMC041211_Calc_BusLoss(void)"
        ],
        "STHMC041212_Check_Qf": [
            "static void STHMC041212_Check_Qf(void)"
        ],
        "STHMC041213_Proc_MaxTemp": [
            "static void STHMC041213_Proc_MaxTemp(void)"
        ],
        "STHMC041214_Proc_Temp": [
            "static void STHMC041214_Proc_Temp(void)"
        ],
        "STHMC041217_Proc_ActiveDischargeResistor": [
            "static void STHMC041217_Proc_ActiveDischargeResistor(void)"
        ],
        "STHMC041218_Proc_ActiveDischargeResistorTerminal": [
            "static void STHMC041218_Proc_ActiveDischargeResistorTerminal(void)"
        ],
        "STHMC041219_Proc_CapBusN": [
            "static void STHMC041219_Proc_CapBusN(void)"
        ],
        "STHMC041220_Proc_CapBusP": [
            "static void STHMC041220_Proc_CapBusP(void)"
        ],
        "STHMC041221_Proc_CapCenter": [
            "static void STHMC041221_Proc_CapCenter(void)"
        ],
        "STHMC041222_Proc_CapCollar": [
            "static void STHMC041222_Proc_CapCollar(void)"
        ],
        "STHMC041223_Proc_CapDCBusN": [
            "static void STHMC041223_Proc_CapDCBusN(void)"
        ],
        "STHMC041224_Proc_CapDCBusP": [
            "static void STHMC041224_Proc_CapDCBusP(void)"
        ],
        "STHMC041225_Proc_Heatsheet": [
            "static void STHMC041225_Proc_Heatsheet(void)"
        ],
        "STHMC041226_Proc_ThmFcap_TempFB": [
            "static void STHMC041226_Proc_ThmFcap_TempFB(void)"
        ],
        "STHMC041227_Reset_TempIni": [
            "static void STHMC041227_Reset_TempIni(void)"
        ],
        "STHMC041237_Correct_Q_FB": [
            "static void STHMC041237_Correct_Q_FB(void)"
        ],
        "STHMC041238_Proc_LPF": [
            "static void STHMC041238_Proc_LPF(void)"
        ],
        "STHMC04123_Main_FilmCapThermal": [
            "static void STHMC04123_Main_FilmCapThermal(void)"
        ],
        "STHMC04126_Calc_Temp_Ini": [
            "static void STHMC04126_Calc_Temp_Ini(void)"
        ],
        "STHMC04127_Calc_Temp_Ope": [
            "static void STHMC04127_Calc_Temp_Ope(void)"
        ],
        "STHMC04128_Calc_Temp_OpeTmp": [
            "static void STHMC04128_Calc_Temp_OpeTmp(void)"
        ],
        "STHMC04129_Calc_Temp_Sdn": [
            "static void STHMC04129_Calc_Temp_Sdn(void)"
        ]
    },
    "FilmCapThermal.h": {},
    "if_THMC.c": {
        "API_Get_THMC_NDCPe1IGBTTemp_TUVal": [
            "float32 API_Get_THMC_NDCPe1IGBTTemp_TUVal( void )"
        ],
        "API_Get_THMC_NDCPe1IGBTTemp_TVVal": [
            "float32 API_Get_THMC_NDCPe1IGBTTemp_TVVal( void )"
        ],
        "API_Get_THMC_NDCPe1IGBTTemp_TWVal": [
            "float32 API_Get_THMC_NDCPe1IGBTTemp_TWVal( void )"
        ],
        "API_Get_THMC_NDCPe2IGBTTemp_TUVal": [
            "float32 API_Get_THMC_NDCPe2IGBTTemp_TUVal( void )"
        ],
        "API_Get_THMC_NDCPe2IGBTTemp_TVVal": [
            "float32 API_Get_THMC_NDCPe2IGBTTemp_TVVal( void )"
        ],
        "API_Get_THMC_NDCPe2IGBTTemp_TWVal": [
            "float32 API_Get_THMC_NDCPe2IGBTTemp_TWVal( void )"
        ],
        "API_Get_THMC_NDCPe1CtrlCddDuty_ModlnFactorVal": [
            "float32 API_Get_THMC_NDCPe1CtrlCddDuty_ModlnFactorVal( void )"
        ],
        "API_Get_THMC_NDCPe2CtrlCddDuty_ModlnFactorVal": [
            "float32 API_Get_THMC_NDCPe2CtrlCddDuty_ModlnFactorVal( void )"
        ],
        "API_Get_THMC_NDCTempSens_TCapVal": [
            "float32 API_Get_THMC_NDCTempSens_TCapVal( void )"
        ],
        "API_Get_THMC_NDCTempSens_TPCBVal": [
            "float32 API_Get_THMC_NDCTempSens_TPCBVal( void )"
        ],
        "API_Get_THMC_NDCDCDCCtrlDuty_DutyDCDCVal": [
            "float32 API_Get_THMC_NDCDCDCCtrlDuty_DutyDCDCVal( void )"
        ],
        "API_Get_THMC_NDCDCDCCtrlFreq_PWMFreqActVal": [
            "float32 API_Get_THMC_NDCDCDCCtrlFreq_PWMFreqActVal( void )"
        ],
        "API_Get_THMC_NDCDCDCBswTemp_T1FETVal": [
            "float32 API_Get_THMC_NDCDCDCBswTemp_T1FETVal( void )"
        ],
        "API_Get_THMC_NDCDCDCBswTemp_T2FETVal": [
            "float32 API_Get_THMC_NDCDCDCBswTemp_T2FETVal( void )"
        ],
        "API_Get_THMC_NDCDCDCBswTemp_TDCDCReac1Val": [
            "float32 API_Get_THMC_NDCDCDCBswTemp_TDCDCReac1Val( void )"
        ],
        "API_Get_THMC_NDCDCDCBswTemp_TDCDCReac2Val": [
            "float32 API_Get_THMC_NDCDCDCBswTemp_TDCDCReac2Val( void )"
        ],
        "API_Get_THMC_NDCDCDCBswVolt_VDCDCHVVal": [
            "float32 API_Get_THMC_NDCDCDCBswVolt_VDCDCHVVal( void )"
        ],
        "API_Get_THMC_NDCDCDCBswCurr_IDCDCHVVal": [
            "float32 API_Get_THMC_NDCDCDCBswCurr_IDCDCHVVal( void )"
        ],
        "API_Get_THMC_NDCDCDCBswCurr_IDCDCinterleaveP1": [
            "float32 API_Get_THMC_NDCDCDCBswCurr_IDCDCinterleaveP1( void )"
        ],
        "API_Get_THMC_NDCDCDCBswCurr_IDCDCinterleaveP2": [
            "float32 API_Get_THMC_NDCDCDCBswCurr_IDCDCinterleaveP2( void )"
        ],
        "API_Get_THMC_NDCDCDCBswCurr_IDCDCinterleaveP3": [
            "float32 API_Get_THMC_NDCDCDCBswCurr_IDCDCinterleaveP3( void )"
        ],
        "API_Get_THMC_NDCPe1CtrlCddFreq_PWMFreqActVal": [
            "float32 API_Get_THMC_NDCPe1CtrlCddFreq_PWMFreqActVal( void )"
        ],
        "API_Get_THMC_NDCPe2CtrlCddFreq_PWMFreqActVal": [
            "float32 API_Get_THMC_NDCPe2CtrlCddFreq_PWMFreqActVal( void )"
        ],
        "API_Get_THMC_NDCPe1CtrlCddDuty_DutyURefVal": [
            "float32 API_Get_THMC_NDCPe1CtrlCddDuty_DutyURefVal( void )"
        ],
        "API_Get_THMC_NDCPe1CtrlCddDuty_DutyVRefVal": [
            "float32 API_Get_THMC_NDCPe1CtrlCddDuty_DutyVRefVal( void )"
        ],
        "API_Get_THMC_NDCPe1CtrlCddDuty_DutyWRefVal": [
            "float32 API_Get_THMC_NDCPe1CtrlCddDuty_DutyWRefVal( void )"
        ],
        "API_Get_THMC_NDCPe2CtrlCddDuty_DutyURefVal": [
            "float32 API_Get_THMC_NDCPe2CtrlCddDuty_DutyURefVal( void )"
        ],
        "API_Get_THMC_NDCPe2CtrlCddDuty_DutyVRefVal": [
            "float32 API_Get_THMC_NDCPe2CtrlCddDuty_DutyVRefVal( void )"
        ],
        "API_Get_THMC_NDCPe2CtrlCddDuty_DutyWRefVal": [
            "float32 API_Get_THMC_NDCPe2CtrlCddDuty_DutyWRefVal( void )"
        ],
        "API_Set_THMC_NDCPeThermMdlTemp_Pe1IGBTTemperatureVal": [
            "void API_Set_THMC_NDCPeThermMdlTemp_Pe1IGBTTemperatureVal( float32 data )"
        ],
        "API_Set_THMC_NDCPeThermMdlTemp_Pe1IGBTTemperatureValQf": [
            "void API_Set_THMC_NDCPeThermMdlTemp_Pe1IGBTTemperatureValQf( sint8 data )"
        ],
        "API_Set_THMC_NDCPeThermMdlTemp_Pe2IGBTTemperatureVal": [
            "void API_Set_THMC_NDCPeThermMdlTemp_Pe2IGBTTemperatureVal( float32 data )"
        ],
        "API_Set_THMC_NDCPeThermMdlTemp_Pe2IGBTTemperatureValQf": [
            "void API_Set_THMC_NDCPeThermMdlTemp_Pe2IGBTTemperatureValQf( sint8 data )"
        ],
        "API_Set_THMC_NDCPeThermMdlTemp_DCDCReacTemperatureVal": [
            "void API_Set_THMC_NDCPeThermMdlTemp_DCDCReacTemperatureVal( float32 data )"
        ],
        "API_Set_THMC_NDCPeThermMdlTemp_DCDCReacTemperatureValQf": [
            "void API_Set_THMC_NDCPeThermMdlTemp_DCDCReacTemperatureValQf( sint8 data )"
        ],
        "API_Set_THMC_NDCPeThermMdlTemp_FilmCapTemperatureVal": [
            "void API_Set_THMC_NDCPeThermMdlTemp_FilmCapTemperatureVal( float32 data )"
        ],
        "API_Set_THMC_NDCPeThermMdlTemp_FilmCapTemperatureValQf": [
            "void API_Set_THMC_NDCPeThermMdlTemp_FilmCapTemperatureValQf( sint8 data )"
        ],
        "API_Set_THMC_NDCPeThermMdlTemp_DCDCFETTemperatureValQf": [
            "void API_Set_THMC_NDCPeThermMdlTemp_DCDCFETTemperatureValQf( sint8 data )"
        ],
        "API_Set_THMC_NDCPeThermMdlTemp_Pe1outletTemperatureVal": [
            "void API_Set_THMC_NDCPeThermMdlTemp_Pe1outletTemperatureVal( float32 data )"
        ],
        "API_Set_THMC_NDCPeThermMdlTemp_Pe1outletTemperatureValQf": [
            "void API_Set_THMC_NDCPeThermMdlTemp_Pe1outletTemperatureValQf( sint8 data )"
        ],
        "API_Set_THMC_NDCPeThermMdlTemp_Pe2outletTemperatureVal": [
            "void API_Set_THMC_NDCPeThermMdlTemp_Pe2outletTemperatureVal( float32 data )"
        ],
        "API_Set_THMC_DcLnk_PwrVal": [
            "void API_Set_THMC_DcLnk_PwrVal( float32 data )"
        ],
        "API_Set_THMC_DcLnk_PwrValQf": [
            "void API_Set_THMC_DcLnk_PwrValQf( sint8 data )"
        ],
        "API_Set_THMC_Eds1_ActvDcha_RegiTemp": [
            "void API_Set_THMC_Eds1_ActvDcha_RegiTemp( float32 data )"
        ],
        "API_Get_THMC_DCDC_ON_TIME_1L": [
            "float32 API_Get_THMC_DCDC_ON_TIME_1L( void )"
        ],
        "API_Get_THMC_DCDC_OFF_TIME_1L": [
            "float32 API_Get_THMC_DCDC_OFF_TIME_1L( void )"
        ],
        "API_Get_THMC_DCDC_RINGING_TIME": [
            "float32 API_Get_THMC_DCDC_RINGING_TIME( void )"
        ],
        "API_Get_THMC_Eds1ActvDcha_StsVal": [
            "uint8 API_Get_THMC_Eds1ActvDcha_StsVal( void )"
        ]
    },
    "if_THMC.h": {},
    "Pe1Loss.c": {
        "RESTART_STHMC04061": [
            "void RESTART_STHMC04061(void)"
        ],
        "STEP_STHMC04061": [
            "void STEP_STHMC04061(void)"
        ],
        "STHMC0406100_Calc_Iinc_Conduction": [
            "static void STHMC0406100_Calc_Iinc_Conduction(void)"
        ],
        "STHMC0406101_Calc_Ploss_Conduction": [
            "static void STHMC0406101_Calc_Ploss_Conduction(void)"
        ],
        "STHMC0406102_Calc_Vdrop_Conduction": [
            "static void STHMC0406102_Calc_Vdrop_Conduction(void)"
        ],
        "STHMC0406103_Calc_Vdrop_Ploss_Conduction_ineg": [
            "static void STHMC0406103_Calc_Vdrop_Ploss_Conduction_ineg(void)"
        ],
        "STHMC0406104_Calc_Vdrop_Ploss_Conduction_ipos": [
            "static void STHMC0406104_Calc_Vdrop_Ploss_Conduction_ipos(void)"
        ],
        "STHMC0406105_Calc_ratio_param": [
            "static void STHMC0406105_Calc_ratio_param(void)"
        ],
        "STHMC040613_Calc_Idc_Vdrop_Ploss_Nostall": [
            "static void STHMC040613_Calc_Idc_Vdrop_Ploss_Nostall(void)"
        ],
        "STHMC040614_Calc_Idc_Vdrop_Ploss_Stall": [
            "static void STHMC040614_Calc_Idc_Vdrop_Ploss_Stall(void)"
        ],
        "STHMC040615_Calc_Idc_Vdrop_Ploss": [
            "static void STHMC040615_Calc_Idc_Vdrop_Ploss(void)"
        ],
        "STHMC040616_Calc_Ploss_ACpart": [
            "static void STHMC040616_Calc_Ploss_ACpart(void)"
        ],
        "STHMC040617_Calc_Ploss_DCpart": [
            "static void STHMC040617_Calc_Ploss_DCpart(void)"
        ],
        "STHMC040618_Calc_Vdc": [
            "static void STHMC040618_Calc_Vdc(void)"
        ],
        "STHMC040619_Convert_DQordintoSCord": [
            "static void STHMC040619_Convert_DQordintoSCord(void)"
        ],
        "STHMC040620_Convert_VintoVpct": [
            "static void STHMC040620_Convert_VintoVpct(void)"
        ],
        "STHMC040621_Make_PartsParam": [
            "static void STHMC040621_Make_PartsParam(void)"
        ],
        "STHMC040622_Make_ResistanceValues": [
            "static void STHMC040622_Make_ResistanceValues(void)"
        ],
        "STHMC040623_Calc_CapacitorCurrent": [
            "static void STHMC040623_Calc_CapacitorCurrent(void)"
        ],
        "STHMC040624_Calc_Idctmp": [
            "static void STHMC040624_Calc_Idctmp(void)"
        ],
        "STHMC040625_Calc_Vdrop_Ploss_IGBTandDiode": [
            "static void STHMC040625_Calc_Vdrop_Ploss_IGBTandDiode(void)"
        ],
        "STHMC040626_Make_SwitchingLossCoff": [
            "static void STHMC040626_Make_SwitchingLossCoff(void)"
        ],
        "STHMC040627_Make_vpct_i": [
            "static void STHMC040627_Make_vpct_i(void)"
        ],
        "STHMC040634_Calc_Ploss_Conduction": [
            "static void STHMC040634_Calc_Ploss_Conduction(void)"
        ],
        "STHMC040635_Calc_Ploss_Recovery": [
            "static void STHMC040635_Calc_Ploss_Recovery(void)"
        ],
        "STHMC040636_Calc_Ploss_Switching": [
            "static void STHMC040636_Calc_Ploss_Switching(void)"
        ],
        "STHMC040637_Correct_Vdrop_Ploss_IGBTandDiode": [
            "static void STHMC040637_Correct_Vdrop_Ploss_IGBTandDiode(void)"
        ],
        "STHMC04063_Main_Idc_Vdrop_Ploss": [
            "static void STHMC04063_Main_Idc_Vdrop_Ploss(void)"
        ],
        "STHMC04064_Calc_Idc_Vdrop_Ploss": [
            "static void STHMC04064_Calc_Idc_Vdrop_Ploss(void)"
        ],
        "STHMC040654_Calc_CapacitorCurrent": [
            "static void STHMC040654_Calc_CapacitorCurrent(void)"
        ],
        "STHMC040655_Calc_Igain_Vdrop_Ploss": [
            "static void STHMC040655_Calc_Igain_Vdrop_Ploss(void)"
        ],
        "STHMC040656_Calc_Vin": [
            "static void STHMC040656_Calc_Vin(void)"
        ],
        "STHMC040657_Calc_dutyhat": [
            "static void STHMC040657_Calc_dutyhat(void)"
        ],
        "STHMC040658_Make_PartsParam": [
            "static void STHMC040658_Make_PartsParam(void)"
        ],
        "STHMC040659_Make_ResistanceValues": [
            "static void STHMC040659_Make_ResistanceValues(void)"
        ],
        "STHMC04065_Reset_Idc_Vdrop_Ploss": [
            "static void STHMC04065_Reset_Idc_Vdrop_Ploss(void)"
        ],
        "STHMC040664_Calc_Idctmp": [
            "static void STHMC040664_Calc_Idctmp(void)"
        ],
        "STHMC040665_Calc_Igain_Vdrop_Ploss_IGBTandDiode": [
            "static void STHMC040665_Calc_Igain_Vdrop_Ploss_IGBTandDiode(void)"
        ],
        "STHMC040666_Calc_Vdrop_Ploss_ACpart": [
            "static void STHMC040666_Calc_Vdrop_Ploss_ACpart(void)"
        ],
        "STHMC040667_Calc_Vdrop_Ploss_DCpart": [
            "static void STHMC040667_Calc_Vdrop_Ploss_DCpart(void)"
        ],
        "STHMC040668_Calc_Iinc_Vdrop_Ploss_Switching": [
            "static void STHMC040668_Calc_Iinc_Vdrop_Ploss_Switching(void)"
        ],
        "STHMC040669_Calc_Vdrop_Deadtime": [
            "static void STHMC040669_Calc_Vdrop_Deadtime(void)"
        ],
        "STHMC04066_Correct_Idc_Vdrop_Ploss": [
            "static void STHMC04066_Correct_Idc_Vdrop_Ploss(void)"
        ],
        "STHMC040670_Calc_Vdrop_Ploss_Conduction": [
            "static void STHMC040670_Calc_Vdrop_Ploss_Conduction(void)"
        ],
        "STHMC040671_Calc_Vdrop_Ploss_Recovery": [
            "static void STHMC040671_Calc_Vdrop_Ploss_Recovery(void)"
        ],
        "STHMC040672_Correct_Igain_Vdrop_Ploss": [
            "static void STHMC040672_Correct_Igain_Vdrop_Ploss(void)"
        ],
        "STHMC040673_Make_SwitchingSignal": [
            "static void STHMC040673_Make_SwitchingSignal(void)"
        ],
        "STHMC040674_Calc_Iinc_Vdrop_Switching": [
            "static void STHMC040674_Calc_Iinc_Vdrop_Switching(void)"
        ],
        "STHMC040675_Calc_Vdrop_Ploss_Switching_ineg": [
            "static void STHMC040675_Calc_Vdrop_Ploss_Switching_ineg(void)"
        ],
        "STHMC040676_Calc_Vdrop_Ploss_Switching_ipos": [
            "static void STHMC040676_Calc_Vdrop_Ploss_Switching_ipos(void)"
        ],
        "STHMC04067_Proc_Idc_Vdrop_Ploss": [
            "static void STHMC04067_Proc_Idc_Vdrop_Ploss(void)"
        ],
        "STHMC04068_Set_correctioncoefficient": [
            "static void STHMC04068_Set_correctioncoefficient(void)"
        ]
    },
    "Pe1Loss.h": {},
    "Pe1Loss_lut.c": {
        "TabIdxS48T3150_THMC0406": [
            "void TabIdxS48T3150_THMC0406(const float32 * x_table, uint16 N, float32 x, uint16 * irx, float32 *fraction)"
        ]
    },
    "Pe1Loss_lut.h": {},
    "Pe1Thermal.c": {
        "RESTART_STHMC04091": [
            "void RESTART_STHMC04091(void)"
        ],
        "STEP_STHMC04091": [
            "void STEP_STHMC04091(void)"
        ],
        "STHMC040910_Proc_Temp": [
            "static void STHMC040910_Proc_Temp(void)"
        ],
        "STHMC040911_Select_LossParams": [
            "static void STHMC040911_Select_LossParams(void)"
        ],
        "STHMC040912_Select_MaxTemp": [
            "static void STHMC040912_Select_MaxTemp(void)"
        ],
        "STHMC040913_Correct_Temp": [
            "static void STHMC040913_Correct_Temp(void)"
        ],
        "STHMC0409147_Correct_Q_FB": [
            "static void STHMC0409147_Correct_Q_FB(void)"
        ],
        "STHMC0409148_Correct_Q_IGBTandFWD_FB": [
            "static void STHMC0409148_Correct_Q_IGBTandFWD_FB(void)"
        ],
        "STHMC0409149_Proc_LPF": [
            "static void STHMC0409149_Proc_LPF(void)"
        ],
        "STHMC040914_Proc_Temp": [
            "static void STHMC040914_Proc_Temp(void)"
        ],
        "STHMC040915_Reset_Temp_Delay": [
            "static void STHMC040915_Reset_Temp_Delay(void)"
        ],
        "STHMC040916_Correct_TempMap": [
            "static void STHMC040916_Correct_TempMap(void)"
        ],
        "STHMC0409195_Proc_Water_WtrInEst": [
            "static void STHMC0409195_Proc_Water_WtrInEst(void)"
        ],
        "STHMC0409196_Proc_Water_WtrInInit": [
            "static void STHMC0409196_Proc_Water_WtrInInit(void)"
        ],
        "STHMC0409197_Proc_Water_WtrInSesor": [
            "static void STHMC0409197_Proc_Water_WtrInSesor(void)"
        ],
        "STHMC040920_Proc_Base": [
            "static void STHMC040920_Proc_Base(void)"
        ],
        "STHMC040921_Proc_Heatsink": [
            "static void STHMC040921_Proc_Heatsink(void)"
        ],
        "STHMC040922_Proc_IGBT_FWD_Thermistor": [
            "static void STHMC040922_Proc_IGBT_FWD_Thermistor(void)"
        ],
        "STHMC040923_Proc_MotorBus": [
            "static void STHMC040923_Proc_MotorBus(void)"
        ],
        "STHMC040924_Proc_Thm_TempFB": [
            "static void STHMC040924_Proc_Thm_TempFB(void)"
        ],
        "STHMC040925_Proc_Water": [
            "static void STHMC040925_Proc_Water(void)"
        ],
        "STHMC040926_Reset_TempIni": [
            "static void STHMC040926_Reset_TempIni(void)"
        ],
        "STHMC040927_Proc_Base": [
            "static void STHMC040927_Proc_Base(void)"
        ],
        "STHMC040928_Select_variable_G": [
            "static void STHMC040928_Select_variable_G(void)"
        ],
        "STHMC04093_Main_Pe1Thermal": [
            "static void STHMC04093_Main_Pe1Thermal(void)"
        ],
        "STHMC040944_Calc_Q_IGBTandFWD": [
            "static void STHMC040944_Calc_Q_IGBTandFWD(void)"
        ],
        "STHMC040945_IGBTandFWDandThm": [
            "static void STHMC040945_IGBTandFWDandThm(void)"
        ],
        "STHMC040946_Calc_CR_Node1": [
            "static void STHMC040946_Calc_CR_Node1(void)"
        ],
        "STHMC040947_Calc_CR_Node10": [
            "static void STHMC040947_Calc_CR_Node10(void)"
        ],
        "STHMC040948_Calc_CR_Node11": [
            "static void STHMC040948_Calc_CR_Node11(void)"
        ],
        "STHMC040949_Calc_CR_Node12": [
            "static void STHMC040949_Calc_CR_Node12(void)"
        ],
        "STHMC04094_Calc_Temp_Ini": [
            "static void STHMC04094_Calc_Temp_Ini(void)"
        ],
        "STHMC040950_Calc_CR_Node13": [
            "static void STHMC040950_Calc_CR_Node13(void)"
        ],
        "STHMC040951_Calc_CR_Node14": [
            "static void STHMC040951_Calc_CR_Node14(void)"
        ],
        "STHMC040952_Calc_CR_Node15": [
            "static void STHMC040952_Calc_CR_Node15(void)"
        ],
        "STHMC040953_Calc_CR_Node16": [
            "static void STHMC040953_Calc_CR_Node16(void)"
        ],
        "STHMC040954_Calc_CR_Node17": [
            "static void STHMC040954_Calc_CR_Node17(void)"
        ],
        "STHMC040955_Calc_CR_Node18": [
            "static void STHMC040955_Calc_CR_Node18(void)"
        ],
        "STHMC040956_Calc_CR_Node19": [
            "static void STHMC040956_Calc_CR_Node19(void)"
        ],
        "STHMC040957_Calc_CR_Node2": [
            "static void STHMC040957_Calc_CR_Node2(void)"
        ],
        "STHMC040958_Calc_CR_Node20": [
            "static void STHMC040958_Calc_CR_Node20(void)"
        ],
        "STHMC040959_Calc_CR_Node21": [
            "static void STHMC040959_Calc_CR_Node21(void)"
        ],
        "STHMC04095_Calc_Temp_Ope": [
            "static void STHMC04095_Calc_Temp_Ope(void)"
        ],
        "STHMC040960_Calc_CR_Node22": [
            "static void STHMC040960_Calc_CR_Node22(void)"
        ],
        "STHMC040961_Calc_CR_Node23": [
            "static void STHMC040961_Calc_CR_Node23(void)"
        ],
        "STHMC040962_Calc_CR_Node24": [
            "static void STHMC040962_Calc_CR_Node24(void)"
        ],
        "STHMC040963_Calc_CR_Node25": [
            "static void STHMC040963_Calc_CR_Node25(void)"
        ],
        "STHMC040964_Calc_CR_Node26": [
            "static void STHMC040964_Calc_CR_Node26(void)"
        ],
        "STHMC040965_Calc_CR_Node27": [
            "static void STHMC040965_Calc_CR_Node27(void)"
        ],
        "STHMC040966_Calc_CR_Node28": [
            "static void STHMC040966_Calc_CR_Node28(void)"
        ],
        "STHMC040967_Calc_CR_Node29": [
            "static void STHMC040967_Calc_CR_Node29(void)"
        ],
        "STHMC040968_Calc_CR_Node3": [
            "static void STHMC040968_Calc_CR_Node3(void)"
        ],
        "STHMC040969_Calc_CR_Node30": [
            "static void STHMC040969_Calc_CR_Node30(void)"
        ],
        "STHMC04096_Calc_Temp_OpeTmp": [
            "static void STHMC04096_Calc_Temp_OpeTmp(void)"
        ],
        "STHMC040970_Calc_CR_Node31": [
            "static void STHMC040970_Calc_CR_Node31(void)"
        ],
        "STHMC040971_Calc_CR_Node32": [
            "static void STHMC040971_Calc_CR_Node32(void)"
        ],
        "STHMC040972_Calc_CR_Node33": [
            "static void STHMC040972_Calc_CR_Node33(void)"
        ],
        "STHMC040973_Calc_CR_Node34": [
            "static void STHMC040973_Calc_CR_Node34(void)"
        ],
        "STHMC040974_Calc_CR_Node35": [
            "static void STHMC040974_Calc_CR_Node35(void)"
        ],
        "STHMC040975_Calc_CR_Node36": [
            "static void STHMC040975_Calc_CR_Node36(void)"
        ],
        "STHMC040976_Calc_CR_Node37": [
            "static void STHMC040976_Calc_CR_Node37(void)"
        ],
        "STHMC040977_Calc_CR_Node38": [
            "static void STHMC040977_Calc_CR_Node38(void)"
        ],
        "STHMC040978_Calc_CR_Node39": [
            "static void STHMC040978_Calc_CR_Node39(void)"
        ],
        "STHMC040979_Calc_CR_Node4": [
            "static void STHMC040979_Calc_CR_Node4(void)"
        ],
        "STHMC04097_Calc_Temp_Sdn": [
            "static void STHMC04097_Calc_Temp_Sdn(void)"
        ],
        "STHMC040980_Calc_CR_Node40": [
            "static void STHMC040980_Calc_CR_Node40(void)"
        ],
        "STHMC040981_Calc_CR_Node41": [
            "static void STHMC040981_Calc_CR_Node41(void)"
        ],
        "STHMC040982_Calc_CR_Node5": [
            "static void STHMC040982_Calc_CR_Node5(void)"
        ],
        "STHMC040983_Calc_CR_Node6": [
            "static void STHMC040983_Calc_CR_Node6(void)"
        ],
        "STHMC040984_Calc_CR_Node7": [
            "static void STHMC040984_Calc_CR_Node7(void)"
        ],
        "STHMC040985_Calc_CR_Node8": [
            "static void STHMC040985_Calc_CR_Node8(void)"
        ],
        "STHMC040986_Calc_CR_Node9": [
            "static void STHMC040986_Calc_CR_Node9(void)"
        ],
        "STHMC04099_Check_Qf": [
            "static void STHMC04099_Check_Qf(void)"
        ]
    },
    "Pe1Thermal.h": {},
    "Pe1Thermal_lut.c": {
        "TabIdxS48T3150_THMC0409": [
            "void TabIdxS48T3150_THMC0409(const float32 * x_table, uint16 N, float32 x, uint16 * irx, float32 *fraction)"
        ]
    },
    "Pe1Thermal_lut.h": {},
    "Pe2Loss.c": {
        "RESTART_STHMC04071": [
            "void RESTART_STHMC04071(void)"
        ],
        "STEP_STHMC04071": [
            "void STEP_STHMC04071(void)"
        ],
        "STHMC0407100_Calc_Iinc_Conduction": [
            "static void STHMC0407100_Calc_Iinc_Conduction(void)"
        ],
        "STHMC0407101_Calc_Ploss_Conduction": [
            "static void STHMC0407101_Calc_Ploss_Conduction(void)"
        ],
        "STHMC0407102_Calc_Vdrop_Conduction": [
            "static void STHMC0407102_Calc_Vdrop_Conduction(void)"
        ],
        "STHMC0407103_Calc_Vdrop_Ploss_Conduction_ineg": [
            "static void STHMC0407103_Calc_Vdrop_Ploss_Conduction_ineg(void)"
        ],
        "STHMC0407104_Calc_Vdrop_Ploss_Conduction_ipos": [
            "static void STHMC0407104_Calc_Vdrop_Ploss_Conduction_ipos(void)"
        ],
        "STHMC0407105_Calc_ratio_param": [
            "static void STHMC0407105_Calc_ratio_param(void)"
        ],
        "STHMC040713_Calc_Idc_Vdrop_Ploss_Nostall": [
            "static void STHMC040713_Calc_Idc_Vdrop_Ploss_Nostall(void)"
        ],
        "STHMC040714_Calc_Idc_Vdrop_Ploss_Stall": [
            "static void STHMC040714_Calc_Idc_Vdrop_Ploss_Stall(void)"
        ],
        "STHMC040715_Calc_Idc_Vdrop_Ploss": [
            "static void STHMC040715_Calc_Idc_Vdrop_Ploss(void)"
        ],
        "STHMC040716_Calc_Ploss_ACpart": [
            "static void STHMC040716_Calc_Ploss_ACpart(void)"
        ],
        "STHMC040717_Calc_Ploss_DCpart": [
            "static void STHMC040717_Calc_Ploss_DCpart(void)"
        ],
        "STHMC040718_Calc_Vdc": [
            "static void STHMC040718_Calc_Vdc(void)"
        ],
        "STHMC040719_Convert_DQordintoSCord": [
            "static void STHMC040719_Convert_DQordintoSCord(void)"
        ],
        "STHMC040720_Convert_VintoVpct": [
            "static void STHMC040720_Convert_VintoVpct(void)"
        ],
        "STHMC040721_Make_PartsParam": [
            "static void STHMC040721_Make_PartsParam(void)"
        ],
        "STHMC040722_Make_ResistanceValues": [
            "static void STHMC040722_Make_ResistanceValues(void)"
        ],
        "STHMC040723_Calc_CapacitorCurrent": [
            "static void STHMC040723_Calc_CapacitorCurrent(void)"
        ],
        "STHMC040724_Calc_Idctmp": [
            "static void STHMC040724_Calc_Idctmp(void)"
        ],
        "STHMC040725_Calc_Vdrop_Ploss_IGBTandDiode": [
            "static void STHMC040725_Calc_Vdrop_Ploss_IGBTandDiode(void)"
        ],
        "STHMC040726_Make_SwitchingLossCoff": [
            "static void STHMC040726_Make_SwitchingLossCoff(void)"
        ],
        "STHMC040727_Make_vpct_i": [
            "static void STHMC040727_Make_vpct_i(void)"
        ],
        "STHMC040734_Calc_Ploss_Conduction": [
            "static void STHMC040734_Calc_Ploss_Conduction(void)"
        ],
        "STHMC040735_Calc_Ploss_Recovery": [
            "static void STHMC040735_Calc_Ploss_Recovery(void)"
        ],
        "STHMC040736_Calc_Ploss_Switching": [
            "static void STHMC040736_Calc_Ploss_Switching(void)"
        ],
        "STHMC040737_Correct_Vdrop_Ploss_IGBTandDiode": [
            "static void STHMC040737_Correct_Vdrop_Ploss_IGBTandDiode(void)"
        ],
        "STHMC04073_Main_Idc_Vdrop_Ploss": [
            "static void STHMC04073_Main_Idc_Vdrop_Ploss(void)"
        ],
        "STHMC04074_Calc_Idc_Vdrop_Ploss": [
            "static void STHMC04074_Calc_Idc_Vdrop_Ploss(void)"
        ],
        "STHMC040754_Calc_CapacitorCurrent": [
            "static void STHMC040754_Calc_CapacitorCurrent(void)"
        ],
        "STHMC040755_Calc_Igain_Vdrop_Ploss": [
            "static void STHMC040755_Calc_Igain_Vdrop_Ploss(void)"
        ],
        "STHMC040756_Calc_Vin": [
            "static void STHMC040756_Calc_Vin(void)"
        ],
        "STHMC040757_Calc_dutyhat": [
            "static void STHMC040757_Calc_dutyhat(void)"
        ],
        "STHMC040758_Make_PartsParam": [
            "static void STHMC040758_Make_PartsParam(void)"
        ],
        "STHMC040759_Make_ResistanceValues": [
            "static void STHMC040759_Make_ResistanceValues(void)"
        ],
        "STHMC04075_Reset_Idc_Vdrop_Ploss": [
            "static void STHMC04075_Reset_Idc_Vdrop_Ploss(void)"
        ],
        "STHMC040764_Calc_Idctmp": [
            "static void STHMC040764_Calc_Idctmp(void)"
        ],
        "STHMC040765_Calc_Igain_Vdrop_Ploss_IGBTandDiode": [
            "static void STHMC040765_Calc_Igain_Vdrop_Ploss_IGBTandDiode(void)"
        ],
        "STHMC040766_Calc_Vdrop_Ploss_ACpart": [
            "static void STHMC040766_Calc_Vdrop_Ploss_ACpart(void)"
        ],
        "STHMC040767_Calc_Vdrop_Ploss_DCpart": [
            "static void STHMC040767_Calc_Vdrop_Ploss_DCpart(void)"
        ],
        "STHMC040768_Calc_Iinc_Vdrop_Ploss_Switching": [
            "static void STHMC040768_Calc_Iinc_Vdrop_Ploss_Switching(void)"
        ],
        "STHMC040769_Calc_Vdrop_Deadtime": [
            "static void STHMC040769_Calc_Vdrop_Deadtime(void)"
        ],
        "STHMC04076_Correct_Idc_Vdrop_Ploss": [
            "static void STHMC04076_Correct_Idc_Vdrop_Ploss(void)"
        ],
        "STHMC040770_Calc_Vdrop_Ploss_Conduction": [
            "static void STHMC040770_Calc_Vdrop_Ploss_Conduction(void)"
        ],
        "STHMC040771_Calc_Vdrop_Ploss_Recovery": [
            "static void STHMC040771_Calc_Vdrop_Ploss_Recovery(void)"
        ],
        "STHMC040772_Correct_Igain_Vdrop_Ploss": [
            "static void STHMC040772_Correct_Igain_Vdrop_Ploss(void)"
        ],
        "STHMC040773_Make_SwitchingSignal": [
            "static void STHMC040773_Make_SwitchingSignal(void)"
        ],
        "STHMC040774_Calc_Iinc_Vdrop_Switching": [
            "static void STHMC040774_Calc_Iinc_Vdrop_Switching(void)"
        ],
        "STHMC040775_Calc_Vdrop_Ploss_Switching_ineg": [
            "static void STHMC040775_Calc_Vdrop_Ploss_Switching_ineg(void)"
        ],
        "STHMC040776_Calc_Vdrop_Ploss_Switching_ipos": [
            "static void STHMC040776_Calc_Vdrop_Ploss_Switching_ipos(void)"
        ],
        "STHMC04077_Proc_Idc_Vdrop_Ploss": [
            "static void STHMC04077_Proc_Idc_Vdrop_Ploss(void)"
        ],
        "STHMC04078_Set_correctioncoefficient": [
            "static void STHMC04078_Set_correctioncoefficient(void)"
        ]
    },
    "Pe2Loss.h": {},
    "Pe2Loss_lut.c": {
        "TabIdxS48T3150_THMC0407": [
            "void TabIdxS48T3150_THMC0407(const float32 * x_table, uint16 N, float32 x, uint16 * irx, float32 *fraction)"
        ]
    },
    "Pe2Loss_lut.h": {},
    "Pe2Thermal.c": {
        "RESTART_STHMC04101": [
            "void RESTART_STHMC04101(void)"
        ],
        "STEP_STHMC04101": [
            "void STEP_STHMC04101(void)"
        ],
        "STHMC041010_Proc_Temp": [
            "static void STHMC041010_Proc_Temp(void)"
        ],
        "STHMC041011_Select_LossParams": [
            "static void STHMC041011_Select_LossParams(void)"
        ],
        "STHMC041012_Select_MaxTemp": [
            "static void STHMC041012_Select_MaxTemp(void)"
        ],
        "STHMC041013_Correct_Temp": [
            "static void STHMC041013_Correct_Temp(void)"
        ],
        "STHMC0410147_Correct_Q_FB": [
            "static void STHMC0410147_Correct_Q_FB(void)"
        ],
        "STHMC0410148_Correct_Q_IGBTandFWD_FB": [
            "static void STHMC0410148_Correct_Q_IGBTandFWD_FB(void)"
        ],
        "STHMC0410149_Proc_LPF": [
            "static void STHMC0410149_Proc_LPF(void)"
        ],
        "STHMC041014_Proc_Temp": [
            "static void STHMC041014_Proc_Temp(void)"
        ],
        "STHMC041015_Reset_Temp_Delay": [
            "static void STHMC041015_Reset_Temp_Delay(void)"
        ],
        "STHMC041016_Correct_TempMap": [
            "static void STHMC041016_Correct_TempMap(void)"
        ],
        "STHMC0410195_Proc_Water_WtrInEst": [
            "static void STHMC0410195_Proc_Water_WtrInEst(void)"
        ],
        "STHMC0410196_Proc_Water_WtrInInit": [
            "static void STHMC0410196_Proc_Water_WtrInInit(void)"
        ],
        "STHMC0410197_Proc_Water_WtrInSesor": [
            "static void STHMC0410197_Proc_Water_WtrInSesor(void)"
        ],
        "STHMC041020_Proc_Base": [
            "static void STHMC041020_Proc_Base(void)"
        ],
        "STHMC041021_Proc_Heatsink": [
            "static void STHMC041021_Proc_Heatsink(void)"
        ],
        "STHMC041022_Proc_IGBT_FWD_Thermistor": [
            "static void STHMC041022_Proc_IGBT_FWD_Thermistor(void)"
        ],
        "STHMC041023_Proc_MotorBus": [
            "static void STHMC041023_Proc_MotorBus(void)"
        ],
        "STHMC041024_Proc_Thm_TempFB": [
            "static void STHMC041024_Proc_Thm_TempFB(void)"
        ],
        "STHMC041025_Proc_Water": [
            "static void STHMC041025_Proc_Water(void)"
        ],
        "STHMC041026_Reset_TempIni": [
            "static void STHMC041026_Reset_TempIni(void)"
        ],
        "STHMC041027_Proc_Base": [
            "static void STHMC041027_Proc_Base(void)"
        ],
        "STHMC041028_Select_variable_G": [
            "static void STHMC041028_Select_variable_G(void)"
        ],
        "STHMC04103_Main_Pe2Thermal": [
            "static void STHMC04103_Main_Pe2Thermal(void)"
        ],
        "STHMC041044_Calc_Q_IGBTandFWD": [
            "static void STHMC041044_Calc_Q_IGBTandFWD(void)"
        ],
        "STHMC041045_IGBTandFWDandThm": [
            "static void STHMC041045_IGBTandFWDandThm(void)"
        ],
        "STHMC041046_Calc_CR_Node1": [
            "static void STHMC041046_Calc_CR_Node1(void)"
        ],
        "STHMC041047_Calc_CR_Node10": [
            "static void STHMC041047_Calc_CR_Node10(void)"
        ],
        "STHMC041048_Calc_CR_Node11": [
            "static void STHMC041048_Calc_CR_Node11(void)"
        ],
        "STHMC041049_Calc_CR_Node12": [
            "static void STHMC041049_Calc_CR_Node12(void)"
        ],
        "STHMC04104_Calc_Temp_Ini": [
            "static void STHMC04104_Calc_Temp_Ini(void)"
        ],
        "STHMC041050_Calc_CR_Node13": [
            "static void STHMC041050_Calc_CR_Node13(void)"
        ],
        "STHMC041051_Calc_CR_Node14": [
            "static void STHMC041051_Calc_CR_Node14(void)"
        ],
        "STHMC041052_Calc_CR_Node15": [
            "static void STHMC041052_Calc_CR_Node15(void)"
        ],
        "STHMC041053_Calc_CR_Node16": [
            "static void STHMC041053_Calc_CR_Node16(void)"
        ],
        "STHMC041054_Calc_CR_Node17": [
            "static void STHMC041054_Calc_CR_Node17(void)"
        ],
        "STHMC041055_Calc_CR_Node18": [
            "static void STHMC041055_Calc_CR_Node18(void)"
        ],
        "STHMC041056_Calc_CR_Node19": [
            "static void STHMC041056_Calc_CR_Node19(void)"
        ],
        "STHMC041057_Calc_CR_Node2": [
            "static void STHMC041057_Calc_CR_Node2(void)"
        ],
        "STHMC041058_Calc_CR_Node20": [
            "static void STHMC041058_Calc_CR_Node20(void)"
        ],
        "STHMC041059_Calc_CR_Node21": [
            "static void STHMC041059_Calc_CR_Node21(void)"
        ],
        "STHMC04105_Calc_Temp_Ope": [
            "static void STHMC04105_Calc_Temp_Ope(void)"
        ],
        "STHMC041060_Calc_CR_Node22": [
            "static void STHMC041060_Calc_CR_Node22(void)"
        ],
        "STHMC041061_Calc_CR_Node23": [
            "static void STHMC041061_Calc_CR_Node23(void)"
        ],
        "STHMC041062_Calc_CR_Node24": [
            "static void STHMC041062_Calc_CR_Node24(void)"
        ],
        "STHMC041063_Calc_CR_Node25": [
            "static void STHMC041063_Calc_CR_Node25(void)"
        ],
        "STHMC041064_Calc_CR_Node26": [
            "static void STHMC041064_Calc_CR_Node26(void)"
        ],
        "STHMC041065_Calc_CR_Node27": [
            "static void STHMC041065_Calc_CR_Node27(void)"
        ],
        "STHMC041066_Calc_CR_Node28": [
            "static void STHMC041066_Calc_CR_Node28(void)"
        ],
        "STHMC041067_Calc_CR_Node29": [
            "static void STHMC041067_Calc_CR_Node29(void)"
        ],
        "STHMC041068_Calc_CR_Node3": [
            "static void STHMC041068_Calc_CR_Node3(void)"
        ],
        "STHMC041069_Calc_CR_Node30": [
            "static void STHMC041069_Calc_CR_Node30(void)"
        ],
        "STHMC04106_Calc_Temp_OpeTmp": [
            "static void STHMC04106_Calc_Temp_OpeTmp(void)"
        ],
        "STHMC041070_Calc_CR_Node31": [
            "static void STHMC041070_Calc_CR_Node31(void)"
        ],
        "STHMC041071_Calc_CR_Node32": [
            "static void STHMC041071_Calc_CR_Node32(void)"
        ],
        "STHMC041072_Calc_CR_Node33": [
            "static void STHMC041072_Calc_CR_Node33(void)"
        ],
        "STHMC041073_Calc_CR_Node34": [
            "static void STHMC041073_Calc_CR_Node34(void)"
        ],
        "STHMC041074_Calc_CR_Node35": [
            "static void STHMC041074_Calc_CR_Node35(void)"
        ],
        "STHMC041075_Calc_CR_Node36": [
            "static void STHMC041075_Calc_CR_Node36(void)"
        ],
        "STHMC041076_Calc_CR_Node37": [
            "static void STHMC041076_Calc_CR_Node37(void)"
        ],
        "STHMC041077_Calc_CR_Node38": [
            "static void STHMC041077_Calc_CR_Node38(void)"
        ],
        "STHMC041078_Calc_CR_Node39": [
            "static void STHMC041078_Calc_CR_Node39(void)"
        ],
        "STHMC041079_Calc_CR_Node4": [
            "static void STHMC041079_Calc_CR_Node4(void)"
        ],
        "STHMC04107_Calc_Temp_Sdn": [
            "static void STHMC04107_Calc_Temp_Sdn(void)"
        ],
        "STHMC041080_Calc_CR_Node40": [
            "static void STHMC041080_Calc_CR_Node40(void)"
        ],
        "STHMC041081_Calc_CR_Node41": [
            "static void STHMC041081_Calc_CR_Node41(void)"
        ],
        "STHMC041082_Calc_CR_Node5": [
            "static void STHMC041082_Calc_CR_Node5(void)"
        ],
        "STHMC041083_Calc_CR_Node6": [
            "static void STHMC041083_Calc_CR_Node6(void)"
        ],
        "STHMC041084_Calc_CR_Node7": [
            "static void STHMC041084_Calc_CR_Node7(void)"
        ],
        "STHMC041085_Calc_CR_Node8": [
            "static void STHMC041085_Calc_CR_Node8(void)"
        ],
        "STHMC041086_Calc_CR_Node9": [
            "static void STHMC041086_Calc_CR_Node9(void)"
        ],
        "STHMC04109_Check_Qf": [
            "static void STHMC04109_Check_Qf(void)"
        ]
    },
    "Pe2Thermal.h": {},
    "Pe2Thermal_lut.c": {
        "TabIdxS48T3150_THMC0410": [
            "void TabIdxS48T3150_THMC0410(const float32 * x_table, uint16 N, float32 x, uint16 * irx, float32 *fraction)"
        ]
    },
    "Pe2Thermal_lut.h": {},
    "PeThermMdl.c": {
        "PeThermMdl_Init": [
            "void PeThermMdl_Init(void)"
        ],
        "PeThermMdl_Run1_Main": [
            "void PeThermMdl_Run1_Main(void)"
        ],
        "PeThermMdl_Run2_Main": [
            "void PeThermMdl_Run2_Main(void)"
        ]
    },
    "PeThermMdl.h": {},
    "Qualifiers.c": {
        "RESTART_STHMC04161": [
            "void RESTART_STHMC04161(void)"
        ],
        "STEP_STHMC04161": [
            "void STEP_STHMC04161(void)"
        ],
        "STHMC04162_Thmc_Qualifiers_Main": [
            "static void STHMC04162_Thmc_Qualifiers_Main(void)"
        ],
        "STHMC04163_Judge_Qf_DcdcSignal": [
            "static void STHMC04163_Judge_Qf_DcdcSignal(void)"
        ],
        "STHMC04164_Judge_Qf_Pe1Signal": [
            "static void STHMC04164_Judge_Qf_Pe1Signal(void)"
        ],
        "STHMC04165_Judge_Qf_Pe2Signal": [
            "static void STHMC04165_Judge_Qf_Pe2Signal(void)"
        ],
        "STHMC04166_Judge_Qf_WaterSignal": [
            "static void STHMC04166_Judge_Qf_WaterSignal(void)"
        ]
    },
    "Qualifiers.h": {},
    "PeThermMdl_MemMap.h": {},
    "Rte_PeThermMdl.h": {},
    "Rte_PeThermMdl_Type.h": {},
    "Tab1DnMS3I2T3126.c": {
        "Tab1DnMS3I2T3126": [
            "float32 Tab1DnMS3I2T3126(uint8 Nx, const float32 * x_table, const float32 * z_table, float32 x)"
        ]
    },
    "Tab1DnMS3I2T3126.h": {},
    "Tab1DnMS3I2T3190.c": {
        "Tab1DnMS3I2T3190": [
            "float32 Tab1DnMS3I2T3190(uint16 Nx, const float32 * x_table, const float32 * z_table, float32 x)"
        ]
    },
    "Tab1DnMS3I2T3190.h": {},
    "Tab2DnMS51I2T25014.c": {
        "Tab2DnMS51I2T25014": [
            "float32 Tab2DnMS51I2T25014(uint8 Nx, uint8 Ny, const float32 * x_table, const float32 * y_table,const float32 * z_table, float32 x, float32 y)"
        ]
    },
    "Tab2DnMS51I2T25014.h": {},
    "THMC_Calparams.c": {},
    "THMC_Calparams.h": {},
    "ThreeDLut_Fcn.c": {
        "Tab3DLookUpFcn_Float32": [
            "float32\tTab3DLookUpFcn_Float32( const uint16 Idx1, const float32 Frc1,const uint16 Idx2, const float32 Frc2,const uint16 Idx3, const float32 Frc3,const uint16 Ny, const uint16 Nz, const volatile float32* const fcn_values )"
        ]
    },
    "ThreeDLut_Fcn.h": {},
    "if_bknl_IGBTAbst.c": {},
    "if_bknl_IGBTAbst.h": {
        "IfBknl_Set_PE1IgbtEn": [
            "inline static\tVOID\tIfBknl_Set_PE1IgbtEn( FLAG out_req )"
        ],
        "IfBknl_Set_PE2IgbtEn": [
            "inline static\tVOID\tIfBknl_Set_PE2IgbtEn( FLAG out_req )"
        ],
        "IfBknl_Set_PE1IgbtEn_H": [
            "inline static\tVOID\tIfBknl_Set_PE1IgbtEn_H( FLAG out_req )"
        ],
        "IfBknl_Set_PE2IgbtEn_H": [
            "inline static\tVOID\tIfBknl_Set_PE2IgbtEn_H( FLAG out_req )"
        ],
        "IfBknl_Set_PE1IgbtEn_L": [
            "inline static\tVOID\tIfBknl_Set_PE1IgbtEn_L( FLAG out_req )"
        ],
        "IfBknl_Set_PE2IgbtEn_L": [
            "inline static\tVOID\tIfBknl_Set_PE2IgbtEn_L( FLAG out_req )"
        ]
    },
    "knl_pio_ibl_cfg_TC377.c": {},
    "knl_pio_ibl_cfg_TC377.h": {},
    "knl_cfg.h": {},
    "knl_common_Func.c": {
        "Cpu_getCoreIndex": [
            "IfxCpu_ResourceCpu Cpu_getCoreIndex(void)"
        ],
        "ScuWdt_getCpuWatchdogPasswordInline": [
            "static uint16 ScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)"
        ],
        "ScuWdt_getCpuWatchdogPassword": [
            "uint16 ScuWdt_getCpuWatchdogPassword(void)"
        ],
        "ScuWdt_clearCpuEndinitInline": [
            "static void ScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)"
        ],
        "ScuWdt_clearCpuEndinit": [
            "void ScuWdt_clearCpuEndinit(uint16 password)"
        ],
        "ScuWdt_setCpuEndinitInline": [
            "static void ScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)"
        ],
        "ScuWdt_setCpuEndinit": [
            "void ScuWdt_setCpuEndinit(uint16 password)"
        ],
        "Port_setPinMode": [
            "void Port_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)"
        ],
        "Port_setPinPadDriver": [
            "void Port_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)"
        ],
        "ScuWdt_getSafetyWatchdogPassword": [
            "uint16 ScuWdt_getSafetyWatchdogPassword(void)"
        ],
        "ScuWdt_clearSafetyEndinitInline": [
            "static void ScuWdt_clearSafetyEndinitInline(uint16 password)"
        ],
        "ScuWdt_clearSafetyEndinit": [
            "void ScuWdt_clearSafetyEndinit(uint16 password)"
        ],
        "ScuWdt_setSafetyEndinitInline": [
            "static void ScuWdt_setSafetyEndinitInline(uint16 password)"
        ],
        "ScuWdt_setSafetyEndinit": [
            "void ScuWdt_setSafetyEndinit(uint16 password)"
        ]
    },
    "knl_common_Func.h": {},
    "knl_Dcdc.c": {
        "Knl_Init_DCDC_PWMdriver": [
            "VOID Knl_Init_DCDC_PWMdriver( VOID )"
        ],
        "Knl_Init_DcdcZeroCross": [
            "inline static VOID Knl_Init_DcdcZeroCross( VOID )"
        ],
        "Knl_DCDC_Tim4_Init_MCS": [
            "inline static VOID Knl_DCDC_Tim4_Init_MCS( VOID )"
        ],
        "Knl_Init_ATOM4": [
            "inline static VOID Knl_Init_ATOM4( VOID )"
        ],
        "Knl_Init_ATOM4_MCS": [
            "inline static VOID\tKnl_Init_ATOM4_MCS( VOID )"
        ],
        "Knl_Dcdc_TOUTSEL": [
            "inline static VOID Knl_Dcdc_TOUTSEL( VOID )"
        ],
        "Knl_Init_DCDC_GPT12": [
            "VOID Knl_Init_DCDC_GPT12( VOID )"
        ],
        "Knl_Init_DCDC_Dma": [
            "inline static VOID Knl_Init_DCDC_Dma( VOID )"
        ],
        "Knl_get_DcdcZeroCross_StartTime": [
            "ULONG Knl_get_DcdcZeroCross_StartTime( UCHAR phase )"
        ],
        "Knl_DCDC_Dma_Reconfigration": [
            "VOID Knl_DCDC_Dma_Reconfigration( UCHAR phase, UCHAR mode )"
        ],
        "Knl_DCDC_Duty": [
            "VOID Knl_DCDC_Duty( TAG_DcDc_OutPut* dcdc_param )",
            "VOID Knl_DCDC_Duty( UCHAR Phase, ULONG duty, UCHAR mode)"
        ]
    },
    "knl_Dcdc.h": {},
    "knl_pic.c": {
        "Knl_Init_Pic": [
            "void\tKnl_Init_Pic( void )"
        ],
        "Knl_Start_Pic": [
            "void\tKnl_Start_Pic( void )"
        ],
        "Knl_Reset_Pic": [
            "void\tKnl_Reset_Pic( void )"
        ]
    },
    "knl_pic.h": {},
    "knl_pic_cfg.c": {},
    "knl_pic_cfg.h": {},
    "if_knl_SWC.c": {},
    "if_knl_SWC.h": {
        "IfKnl_Get_AdcResult_DCDC_C2": [
            "inline static\tUSHORT\tIfKnl_Get_AdcResult_DCDC_C2( VOID )"
        ],
        "IfKnl_Init_DCDC_PWMdriver": [
            "inline static\tVOID\tIfKnl_Init_DCDC_PWMdriver( VOID )"
        ],
        "IfKnl_Set_DCDC_Duty": [
            "inline static\tVOID\tIfKnl_Set_DCDC_Duty( TAG_DcDc_OutPut* dcdc_param )#elseinline static\tVOID\tIfKnl_Set_DCDC_Duty( UCHAR Phase, ULONG duty, UCHAR mode )#endif"
        ],
        "IfKnl_get_DcdcZeroCross_StartTime": [
            "inline static\tULONG\tIfKnl_get_DcdcZeroCross_StartTime( UCHAR phase )"
        ],
        "IfKnl_Set_DcdcDuty": [
            "inline static\tULONG\tIfKnl_Set_DcdcDuty( UCHAR phase, ULONG on_time, ULONG offsync_time )"
        ],
        "IfKnl_Get_RamShared_PwmOutInfo": [
            "inline static\tFLAG\tIfKnl_Get_RamShared_PwmOutInfo( UCHAR phase, LONG* period, LONG* offset )"
        ],
        "IfKnl_Gtm_Init": [
            "inline static\tVOID\tIfKnl_Gtm_Init( VOID )"
        ],
        "IfKnl_Get_Mot_Gu": [
            "inline static\tFLAG\tIfKnl_Get_Mot_Gu( VOID )"
        ],
        "IfKnl_Get_Mot_Gv": [
            "inline static\tFLAG\tIfKnl_Get_Mot_Gv( VOID )"
        ],
        "IfKnl_Get_Mot_Gw": [
            "inline static\tFLAG\tIfKnl_Get_Mot_Gw( VOID )"
        ],
        "IfKnl_Get_Mot_Gx": [
            "inline static\tFLAG\tIfKnl_Get_Mot_Gx( VOID )"
        ],
        "IfKnl_Get_Mot_Gy": [
            "inline static\tFLAG\tIfKnl_Get_Mot_Gy( VOID )"
        ],
        "IfKnl_Get_Mot_Gz": [
            "inline static\tFLAG\tIfKnl_Get_Mot_Gz( VOID )"
        ],
        "IfKnl_Get_Gen_Gu": [
            "inline static\tFLAG\tIfKnl_Get_Gen_Gu( VOID )"
        ],
        "IfKnl_Get_Gen_Gv": [
            "inline static\tFLAG\tIfKnl_Get_Gen_Gv( VOID )"
        ],
        "IfKnl_Get_Gen_Gw": [
            "inline static\tFLAG\tIfKnl_Get_Gen_Gw( VOID )"
        ],
        "IfKnl_Get_Gen_Gx": [
            "inline static\tFLAG\tIfKnl_Get_Gen_Gx( VOID )"
        ],
        "IfKnl_Get_Gen_Gy": [
            "inline static\tFLAG\tIfKnl_Get_Gen_Gy( VOID )"
        ],
        "IfKnl_Get_Gen_Gz": [
            "inline static\tFLAG\tIfKnl_Get_Gen_Gz( VOID )"
        ]
    },
    "knl_gtm.c": {
        "Knl_Gtm_Init_forMCS": [
            "VOID\tKnl_Gtm_Init_forMCS( VOID )"
        ],
        "Knl_Cmu_Init": [
            "static\tVOID\tKnl_Cmu_Init( VOID )"
        ],
        "Knl_Aru_Init": [
            "static\tVOID\tKnl_Aru_Init( VOID )"
        ],
        "Knl_Brc_Init": [
            "static\tVOID\tKnl_Brc_Init( VOID )"
        ],
        "Knl_Tbu_Init": [
            "static\tVOID\tKnl_Tbu_Init( VOID )"
        ],
        "Knl_Tbu_Start": [
            "static\tVOID\tKnl_Tbu_Start( VOID )"
        ],
        "Knl_Tim_Init": [
            "static\tVOID\tKnl_Tim_Init( VOID )"
        ],
        "Knl_Tim_Channel_Init": [
            "static\tVOID\tKnl_Tim_Channel_Init( UCHAR unit, UCHAR ch )"
        ],
        "Knl_Atom_Init": [
            "static\tVOID\tKnl_Atom_Init( VOID )"
        ],
        "Knl_Atom_Channel_Init": [
            "static\tVOID\tKnl_Atom_Channel_Init( UCHAR unit, UCHAR ch )"
        ],
        "Knl_Mcfg_Init": [
            "static\tVOID\tKnl_Mcfg_Init( VOID )"
        ],
        "Knl_Gtm_Mcs_Program_Copy": [
            "static\tVOID\tKnl_Gtm_Mcs_Program_Copy( ULONG* ram_start , const ULONG* prog_start, USHORT prog_byte )"
        ],
        "Knl_Gtm_Ccm_Init": [
            "static\tVOID\tKnl_Gtm_Ccm_Init( VOID )"
        ],
        "Knl_Gtm_Mcs_Channel_Enable": [
            "static\tVOID\tKnl_Gtm_Mcs_Channel_Enable( UCHAR mcsCore, UCHAR ch )"
        ],
        "Knl_Tout_Init": [
            "static\tVOID\tKnl_Tout_Init( VOID )"
        ],
        "Knl_AdcTrig_Init": [
            "static\tVOID\tKnl_AdcTrig_Init( VOID )"
        ],
        "Knl_Mcs_Init": [
            "static\tVOID\tKnl_Mcs_Init( VOID )"
        ],
        "Knl_Gtm_AruRead": [
            "ULONG\tKnl_Gtm_AruRead( ULONG aru_address, ULONG *data_h, ULONG *data_l )"
        ],
        "Knl_Gtm_AruWrite": [
            "ULONG\tKnl_Gtm_AruWrite( ULONG aru_address, UCHAR ch, ULONG data_h, ULONG data_l )"
        ]
    },
    "knl_gtm.h": {},
    "knl_gtm_cfg.c": {},
    "knl_gtm_cfg.h": {},
    "nidec_gtm_mcs3.c": {},
    "nidec_gtm_mcs3.h": {},
    "nidec_gtm_mcs4.c": {},
    "nidec_gtm_mcs4.h": {},
    "knl_tsg3.c": {
        "Knl_Init_Tsg3": [
            "VOID Knl_Init_Tsg3(const UCHAR unit)"
        ],
        "Knl_Convert_Cycle_Tsg3": [
            "VOID\tKnl_Convert_Cycle_Tsg3( const UCHAR unit, const USHORT pwm_cycle, ULONG data_out[], ULONG* p_dead_tim_mcu )"
        ],
        "Knl_Convert_Duty_Tsg3": [
            "VOID\tKnl_Convert_Duty_Tsg3( const UCHAR tsg3_unit, const USHORT data_in[], ULONG data_out[], const ULONG pwm_cycle_mcu, const ULONG dead_tim_mcu )"
        ],
        "Knl_Set_DeadTim_Tsg3": [
            "VOID\tKnl_Set_DeadTim_Tsg3( const UCHAR unit, const USHORT deadtime )"
        ],
        "Knl_Set_Mode_Tsg3": [
            "VOID\tKnl_Set_Mode_Tsg3( const UCHAR unit, const USHORT pwmreq, const USHORT pwmsts )"
        ],
        "Knl_Set_TSG3CMP0_Conf": [
            "VOID\tKnl_Set_TSG3CMP0_Conf( const UCHAR unit, const UCHAR kind )"
        ],
        "Knl_Check_RegTsg3": [
            "FLAG\tKnl_Check_RegTsg3( const UCHAR unit )"
        ],
        "Knl_Reset_TSG3": [
            "VOID Knl_Reset_TSG3(const UCHAR unit)"
        ],
        "Knl_Get_TSG3CMP0": [
            "ULONG\tKnl_Get_TSG3CMP0( const UCHAR unit )"
        ],
        "Knl_Start_Tsg3": [
            "VOID\tKnl_Start_Tsg3( const UCHAR unit )"
        ],
        "Knl_Get_TSG3STR0_CntSts": [
            "UCHAR\tKnl_Get_TSG3STR0_CntSts( const UCHAR unit )"
        ],
        "Knl_Stop_Tsg3": [
            "VOID Knl_Stop_Tsg3( const UCHAR unit )"
        ],
        "Knl_Set_CmpReg_Tsg3": [
            "VOID\tKnl_Set_CmpReg_Tsg3( const UCHAR unit, const USHORT freq )"
        ],
        "Knl_ResetAGC_TSG3": [
            "inline static VOID Knl_ResetAGC_TSG3(const UCHAR unit)"
        ],
        "Gtm_enable": [
            "inline static VOID Gtm_enable(Ifx_GTM *gtm)"
        ],
        "Knl_Init_GTM": [
            "inline static VOID Knl_Init_GTM(VOID)"
        ],
        "Knl_MotorGenerator_Port_Init_Motor": [
            "inline static VOID Knl_MotorGenerator_Port_Init_Motor(VOID)"
        ],
        "Knl_MotorGenerator_Port_Init_Generator": [
            "inline static VOID Knl_MotorGenerator_Port_Init_Generator(VOID)"
        ],
        "Knl_MotorMotor_TOUTSEL": [
            "inline static VOID Knl_MotorMotor_TOUTSEL(VOID)"
        ],
        "Knl_MotorGenerator_TOUTSEL": [
            "inline static VOID Knl_MotorGenerator_TOUTSEL(VOID)"
        ],
        "Knl_MotorGenerator_Port_Init": [
            "inline static VOID Knl_MotorGenerator_Port_Init(const UCHAR unit)"
        ],
        "Knl_Init_ATOM0": [
            "inline static VOID Knl_Init_ATOM0(VOID)"
        ],
        "Knl_Init_ATOM1": [
            "inline static VOID Knl_Init_ATOM1(VOID)"
        ],
        "Knl_Init_ATOMi": [
            "inline static VOID Knl_Init_ATOMi(const UCHAR unit)"
        ],
        "Gtm_Cmu_enableClocks": [
            "inline static VOID Gtm_Cmu_enableClocks(Ifx_GTM *gtm, ULONG clkMask)"
        ],
        "Set_DeadTim_TSG3_ROW": [
            "inline static VOID\tSet_DeadTim_TSG3_ROW( const UCHAR unit )"
        ],
        "Knl_Calc_DutyMin": [
            "inline static VOID\tKnl_Calc_DutyMin( UCHAR unit, UCHAR phase  )"
        ],
        "Knl_Calc_DutyLow": [
            "inline static VOID\tKnl_Calc_DutyLow( UCHAR unit, UCHAR phase )"
        ],
        "Knl_Calc_DutyMdl": [
            "inline static VOID\tKnl_Calc_DutyMdl( UCHAR unit, UCHAR phase )"
        ],
        "Knl_Calc_DutyHigh": [
            "inline static VOID\tKnl_Calc_DutyHigh( UCHAR unit, UCHAR phase )"
        ],
        "Knl_Calc_DutyMax": [
            "inline static VOID\tKnl_Calc_DutyMax( UCHAR unit, UCHAR phase )"
        ],
        "Knl_Judge_DutyPuttern": [
            "inline static UCHAR\tKnl_Judge_DutyPuttern( UCHAR unit, UCHAR phase )"
        ],
        "Knl_Judge_DutyPuttern_Mdl": [
            "inline static UCHAR\tKnl_Judge_DutyPuttern_Mdl( UCHAR unit, UCHAR phase )"
        ],
        "Knl_DutyOutputStatus": [
            "inline static VOID Knl_DutyOutputStatus( UCHAR unit )"
        ],
        "Knl_DutyOutputStatusLowHigh": [
            "inline static VOID Knl_DutyOutputStatusLowHigh( UCHAR unit, UCHAR phase, UCHAR duty_Puttern )"
        ],
        "Knl_DutyOutputStatusMid": [
            "inline static VOID Knl_DutyOutputStatusMid( UCHAR unit, UCHAR phase, UCHAR duty_Puttern )"
        ],
        "Knl_Nop_InstructionExe": [
            "inline static VOID Knl_Nop_InstructionExe( ULONG nopcount )"
        ],
        "Knl_Duty_Calculation": [
            "inline static VOID Knl_Duty_Calculation( const UCHAR unit, const USHORT data_in[], const ULONG pwm_cycle_mcu )"
        ],
        "Knl_Init_PWM_TimDma": [
            "static VOID Knl_Init_PWM_TimDma(VOID)"
        ],
        "Knl_Proc_OneshotTim_Refresh": [
            "inline static VOID Knl_Proc_OneshotTim_Refresh( const UCHAR unit )"
        ]
    },
    "knl_tsg3.h": {},
    "knl_tsg3_cfg.c": {},
    "knl_tsg3_cfg.h": {},
    "AcCurrentAbstr.c": {
        "AcCurrentAbstr_Init": [
            "void AcCurrentAbstr_Init(void)"
        ],
        "AcCurrentAbstr_Main": [
            "void AcCurrentAbstr_Main(void)"
        ]
    },
    "AcCurrentAbstr.h": {},
    "ai_mng_iuvw.c": {
        "AiMng_Input_AdScan_Pe1Iuvw": [
            "VOID\tAiMng_Input_AdScan_Pe1Iuvw( VOID )"
        ],
        "AiMng_Input_AdScan_Pe2Iuvw": [
            "VOID\tAiMng_Input_AdScan_Pe2Iuvw( VOID )"
        ]
    },
    "ai_mng_iuvw.h": {},
    "ai_prm_iuvw.c": {
        "CurrentSensorAbstr_Pe1Ini": [
            "VOID\tCurrentSensorAbstr_Pe1Ini(VOID)"
        ],
        "CurrentSensorAbstr_Pe2Ini": [
            "VOID\tCurrentSensorAbstr_Pe2Ini(VOID)"
        ],
        "AiPrm_Renewal_Pe1Iu": [
            "VOID\tAiPrm_Renewal_Pe1Iu( VOID )"
        ],
        "AiPrm_Renewal_Pe2Iu": [
            "VOID\tAiPrm_Renewal_Pe2Iu( VOID )"
        ],
        "AiPrm_Renewal_Pe1Iv": [
            "VOID\tAiPrm_Renewal_Pe1Iv( VOID )"
        ],
        "AiPrm_Renewal_Pe2Iv": [
            "VOID\tAiPrm_Renewal_Pe2Iv( VOID )"
        ],
        "AiPrm_Renewal_Pe1Iw": [
            "VOID\tAiPrm_Renewal_Pe1Iw( VOID )"
        ],
        "AiPrm_Renewal_Pe2Iw": [
            "VOID\tAiPrm_Renewal_Pe2Iw( VOID )"
        ],
        "AiPrm_Get_Pe1OvrCurAdBuf": [
            "VOID\tAiPrm_Get_Pe1OvrCurAdBuf( VOID )"
        ],
        "AiPrm_Get_Pe2OvrCurAdBuf": [
            "VOID\tAiPrm_Get_Pe2OvrCurAdBuf( VOID )"
        ],
        "AiPrm_Renewal_Pe1OvrCurSts": [
            "VOID\tAiPrm_Renewal_Pe1OvrCurSts( VOID )"
        ],
        "AiPrm_Renewal_Pe2OvrCurSts": [
            "VOID\tAiPrm_Renewal_Pe2OvrCurSts( VOID )"
        ],
        "AiPrm_Renewal_Pe1IuvwSum_Diag": [
            "VOID\tAiPrm_Renewal_Pe1IuvwSum_Diag( VOID )"
        ],
        "AiPrm_Renewal_Pe2IuvwSum_Diag": [
            "VOID\tAiPrm_Renewal_Pe2IuvwSum_Diag( VOID )"
        ],
        "AiPrm_Renewal_Pe1Iuvw_rms": [
            "VOID\tAiPrm_Renewal_Pe1Iuvw_rms( VOID )"
        ],
        "AiPrm_Renewal_Pe2Iuvw_rms": [
            "VOID\tAiPrm_Renewal_Pe2Iuvw_rms( VOID )"
        ]
    },
    "ai_prm_iuvw.h": {},
    "CurrentSensorAbstr.c": {
        "CurrentSensorAbstr_Pe1Main": [
            "VOID\tCurrentSensorAbstr_Pe1Main(VOID)"
        ],
        "CurrentSensorAbstr_Pe2Main": [
            "VOID\tCurrentSensorAbstr_Pe2Main(VOID)"
        ]
    },
    "CurrentSensorAbstr.h": {},
    "AcCurrentAbstr_MemMap.h": {},
    "Rte_AcCurrentAbstr.h": {},
    "Rte_AcCurrentAbstr_Type.h": {},
    "DCCurrsens.c": {
        "DCCurrsens_Init": [
            "void DCCurrsens_Init(void)"
        ],
        "DCCurrsens_Main": [
            "void DCCurrsens_Main(void)"
        ]
    },
    "DCCurrsens.h": {},
    "mng_DCCurrsens.c": {
        "Mng_Init_DCCurrsens": [
            "VOID\tMng_Init_DCCurrsens( VOID )"
        ],
        "AiMng_Set_DCDCCurInitDat": [
            "VOID\tAiMng_Set_DCDCCurInitDat( VOID )"
        ],
        "Mng_Input_DCCurrsens": [
            "VOID\tMng_Input_DCCurrsens( VOID )"
        ],
        "AiMng_Main_DCDCCur": [
            "VOID\tAiMng_Main_DCDCCur( VOID )"
        ],
        "Mng_Renewal_DCCurrsens": [
            "VOID\tMng_Renewal_DCCurrsens( VOID )"
        ],
        "AiMng_Main_DCDCCur_1ms": [
            "VOID\tAiMng_Main_DCDCCur_1ms( VOID )"
        ],
        "Mng_Input_DcConCurr": [
            "VOID\tMng_Input_DcConCurr( VOID )"
        ],
        "Mng_Renewal_DcConCurr": [
            "VOID\tMng_Renewal_DcConCurr( VOID )"
        ]
    },
    "mng_DCCurrsens.h": {},
    "prm_DCCurrsens.c": {
        "Prm_Init_DCCurrsens": [
            "VOID\tPrm_Init_DCCurrsens( VOID )"
        ],
        "AiPrm_Set_DCDCCurInitDat": [
            "VOID\tAiPrm_Set_DCDCCurInitDat( VOID )"
        ],
        "Prm_Input_DCCurrsens": [
            "VOID\tPrm_Input_DCCurrsens( VOID )"
        ],
        "AiPrm_Input_DCBattCur1": [
            "VOID\tAiPrm_Input_DCBattCur1( VOID )"
        ],
        "AiPrm_Input_DCBattCur2": [
            "VOID\tAiPrm_Input_DCBattCur2( VOID )"
        ],
        "AiPrm_Input_DCBattCur3": [
            "VOID\tAiPrm_Input_DCBattCur3( VOID )"
        ],
        "AiPrm_Check_DCLinkCur": [
            "VOID\tAiPrm_Check_DCLinkCur( VOID )"
        ],
        "AiPrm_Check_DCBattCur1": [
            "VOID\tAiPrm_Check_DCBattCur1( VOID )"
        ],
        "AiPrm_Check_DCBattCur2": [
            "VOID\tAiPrm_Check_DCBattCur2( VOID )"
        ],
        "AiPrm_Check_DCBattCur3": [
            "VOID\tAiPrm_Check_DCBattCur3( VOID )"
        ],
        "Prm_Renewal_DCCurrsens": [
            "VOID\tPrm_Renewal_DCCurrsens( VOID )"
        ],
        "AiPrm_Renewal_DCBattCur1": [
            "VOID\tAiPrm_Renewal_DCBattCur1( VOID )"
        ],
        "AiPrm_Renewal_DCBattCur2": [
            "VOID\tAiPrm_Renewal_DCBattCur2( VOID )"
        ],
        "AiPrm_Renewal_DCBattCur3": [
            "VOID\tAiPrm_Renewal_DCBattCur3( VOID )"
        ],
        "AiPrm_Renewal_DCBattCurTotal": [
            "VOID\tAiPrm_Renewal_DCBattCurTotal( VOID )"
        ],
        "AiPrm_Check_DCBattCurTotal": [
            "VOID\tAiPrm_Check_DCBattCurTotal( VOID )"
        ],
        "Prm_Input_DcConnectorCurr": [
            "VOID\tPrm_Input_DcConnectorCurr( VOID )"
        ],
        "Prm_Renewal_DcConnectorCurr": [
            "VOID\tPrm_Renewal_DcConnectorCurr( VOID )"
        ]
    },
    "prm_DCCurrsens.h": {},
    "DCCurrsens_MemMap.h": {},
    "Rte_DCCurrsens.h": {},
    "Rte_DCCurrsens_Type.h": {},
    "ai_mng_PeTempsensAbstr.c": {
        "AiMng_Init_PetempsensAbst": [
            "VOID\tAiMng_Init_PetempsensAbst( VOID )"
        ],
        "AiMng_DcDcTemp_Set_Inidat": [
            "VOID\tAiMng_DcDcTemp_Set_Inidat( VOID )"
        ],
        "AiMng_Main_PcbTmp": [
            "VOID\tAiMng_Main_PcbTmp( VOID )"
        ],
        "AiMng_Main_CapTmp": [
            "VOID\tAiMng_Main_CapTmp( VOID )"
        ],
        "AiMng_Main_MotIgbtTmp": [
            "VOID\tAiMng_Main_MotIgbtTmp( VOID )"
        ],
        "AiMng_Main_GenIgbtTmp": [
            "VOID\tAiMng_Main_GenIgbtTmp( VOID )"
        ],
        "AiMng_Input_PcbTmp": [
            "VOID\tAiMng_Input_PcbTmp( VOID )"
        ],
        "AiMng_Input_CapTmp": [
            "VOID\tAiMng_Input_CapTmp( VOID )"
        ],
        "AiMng_Input_GenIgbtTmp": [
            "VOID\tAiMng_Input_GenIgbtTmp( VOID )"
        ],
        "AiMng_Input_MotIgbtTmp": [
            "VOID\tAiMng_Input_MotIgbtTmp( VOID )"
        ],
        "AiMng_Main_PeOverTmpSts": [
            "VOID\tAiMng_Main_PeOverTmpSts( VOID )"
        ],
        "AiMng_DcDcTemp_Main": [
            "VOID\tAiMng_DcDcTemp_Main( VOID )"
        ]
    },
    "ai_mng_PeTempsensAbstr.h": {},
    "ai_prm_PeTempsensAbstr.c": {
        "AiPrm_Init_PeTempsensAbst": [
            "VOID\tAiPrm_Init_PeTempsensAbst( VOID )"
        ],
        "AiPrm_DcDcTemp_Set_Inidat": [
            "VOID\tAiPrm_DcDcTemp_Set_Inidat( VOID )"
        ],
        "AiPrm_Renewal_CapTmp_Rte": [
            "VOID\tAiPrm_Renewal_CapTmp_Rte( VOID )"
        ],
        "AiPrm_Renewal_PcbTmp_Rte": [
            "VOID\tAiPrm_Renewal_PcbTmp_Rte( VOID )"
        ],
        "AiPrm_Renewal_MotIgbtTmp": [
            "VOID\tAiPrm_Renewal_MotIgbtTmp( const UCHAR phase )"
        ],
        "AiPrm_Renewal_GenIgbtTmp": [
            "VOID\tAiPrm_Renewal_GenIgbtTmp( const UCHAR phase )"
        ],
        "AiPrm_Input_CapTmp": [
            "VOID\tAiPrm_Input_CapTmp( VOID )"
        ],
        "AiPrm_Input_PcbTmp": [
            "VOID\tAiPrm_Input_PcbTmp( VOID )"
        ],
        "AiPrm_Input_MotIgbtTmp": [
            "VOID\tAiPrm_Input_MotIgbtTmp( VOID )"
        ],
        "AiPrm_Input_GenIgbtTmp": [
            "VOID\tAiPrm_Input_GenIgbtTmp( VOID )"
        ],
        "AiPrm_Renewal_Filmcap_OverTmpSts": [
            "VOID\tAiPrm_Renewal_Filmcap_OverTmpSts( VOID )"
        ],
        "AiPrm_Renewal_Pe1Igbt_OverTmpSts": [
            "VOID\tAiPrm_Renewal_Pe1Igbt_OverTmpSts( VOID )"
        ],
        "AiPrm_Renewal_Pe2Igbt_OverTmpSts": [
            "VOID\tAiPrm_Renewal_Pe2Igbt_OverTmpSts( VOID )"
        ],
        "AiPrm_Renewal_Pcb_OverTmpSts": [
            "VOID\tAiPrm_Renewal_Pcb_OverTmpSts( VOID )"
        ],
        "AiPrm_Input_DcDcTmp": [
            "VOID\tAiPrm_Input_DcDcTmp( VOID )"
        ],
        "AiPrm_Input_DcDcReaTmp": [
            "VOID\tAiPrm_Input_DcDcReaTmp( VOID )"
        ],
        "AiPrm_Renewal_DcDcTmp_1L": [
            "VOID\tAiPrm_Renewal_DcDcTmp_1L( const UCHAR ch )"
        ],
        "AiPrm_Renewal_DcDcReaTmp_1L": [
            "VOID\tAiPrm_Renewal_DcDcReaTmp_1L( const UCHAR ch )"
        ],
        "AiPrm_Renewal_Dcdc_OverTmpSts": [
            "VOID\tAiPrm_Renewal_Dcdc_OverTmpSts( VOID )"
        ],
        "AiPrm_Renewal_Rea_OverTmpSts": [
            "VOID\tAiPrm_Renewal_Rea_OverTmpSts( VOID )"
        ]
    },
    "ai_prm_PeTempsensAbstr.h": {},
    "PeTempsensAbstr.c": {
        "PeTempsensAbstr_Init": [
            "void PeTempsensAbstr_Init(void)"
        ],
        "PeTempsensAbstr_Main": [
            "void PeTempsensAbstr_Main(void)"
        ]
    },
    "PeTempsensAbstr.h": {},
    "PeTempsensAbstr_MemMap.h": {},
    "Rte_PeTempsensAbstr.h": {},
    "Rte_PeTempsensAbstr_Type.h": {},
    "ai_mng_PwrMgtAbstr.c": {
        "AiMng_Init_PwrMgtAbstr": [
            "VOID\tAiMng_Init_PwrMgtAbstr( VOID )"
        ],
        "AiMng_Input_PwrMgtAbstr": [
            "VOID\tAiMng_Input_PwrMgtAbstr( VOID )"
        ],
        "AiMng_Renewal_PwrMgtAbstr": [
            "VOID\tAiMng_Renewal_PwrMgtAbstr( VOID )"
        ]
    },
    "ai_mng_PwrMgtAbstr.h": {},
    "ai_prm_PwrMgtAbstr.c": {
        "AiPrm_PwrMgtAbstr_Set_Inidat": [
            "VOID\tAiPrm_PwrMgtAbstr_Set_Inidat( VOID )"
        ],
        "AiPrm_Input_LvdcMon": [
            "VOID\tAiPrm_Input_LvdcMon( VOID )"
        ],
        "AiPrm_Input_Flbk": [
            "VOID\tAiPrm_Input_Flbk( VOID )"
        ],
        "AiPrm_Input_Vbatt": [
            "VOID\tAiPrm_Input_Vbatt( VOID )"
        ],
        "AiPrm_Input_B12": [
            "VOID\tAiPrm_Input_B12( VOID )"
        ],
        "AiPrm_Input_5vcan": [
            "VOID\tAiPrm_Input_5vcan( VOID )"
        ],
        "AiPrm_Input_5vsc1": [
            "VOID\tAiPrm_Input_5vsc1( VOID )"
        ],
        "AiPrm_Input_5vsc2": [
            "VOID\tAiPrm_Input_5vsc2( VOID )"
        ],
        "AiPrm_Input_5vsc3": [
            "VOID\tAiPrm_Input_5vsc3( VOID )"
        ],
        "AiPrm_Input_5vasc": [
            "VOID\tAiPrm_Input_5vasc( VOID )"
        ],
        "AiPrm_Input_5vref": [
            "VOID\tAiPrm_Input_5vref( VOID )"
        ],
        "AiPrm_Input_IgMon": [
            "VOID\tAiPrm_Input_IgMon( VOID )"
        ],
        "AiPrm_Renewal_LvdcMon": [
            "VOID\tAiPrm_Renewal_LvdcMon( VOID )"
        ],
        "AiPrm_Renewal_Flbk": [
            "VOID\tAiPrm_Renewal_Flbk( VOID )"
        ],
        "AiPrm_Renewal_Vbatt": [
            "VOID\tAiPrm_Renewal_Vbatt( VOID )"
        ],
        "AiPrm_Renewal_B12": [
            "VOID\tAiPrm_Renewal_B12( VOID )"
        ],
        "AiPrm_Renewal_5vcan": [
            "VOID\tAiPrm_Renewal_5vcan( VOID )"
        ],
        "AiPrm_Renewal_5vsc1": [
            "VOID\tAiPrm_Renewal_5vsc1( VOID )"
        ],
        "AiPrm_Renewal_5vsc2": [
            "VOID\tAiPrm_Renewal_5vsc2( VOID )"
        ],
        "AiPrm_Renewal_5vsc3": [
            "VOID\tAiPrm_Renewal_5vsc3( VOID )"
        ],
        "AiPrm_Renewal_5vasc": [
            "VOID\tAiPrm_Renewal_5vasc( VOID )"
        ],
        "AiPrm_Renewal_5vref": [
            "VOID\tAiPrm_Renewal_5vref( VOID )"
        ],
        "AiPrm_Renewal_Ig": [
            "VOID\tAiPrm_Renewal_Ig( VOID )"
        ],
        "AiPrm_Renewal_VBATTOvrVolSts": [
            "VOID\tAiPrm_Renewal_VBATTOvrVolSts( VOID )"
        ],
        "AiPrm_Renewal_VBATTUndrVolSts": [
            "VOID\tAiPrm_Renewal_VBATTUndrVolSts( VOID )"
        ],
        "AiPrm_Input_N5vasc": [
            "VOID\tAiPrm_Input_N5vasc( VOID )"
        ],
        "AiPrm_Input_Rd5vasc": [
            "VOID\tAiPrm_Input_Rd5vasc( VOID )"
        ],
        "AiPrm_Input_Hv5v": [
            "VOID\tAiPrm_Input_Hv5v( VOID )"
        ],
        "AiPrm_Input_Ldo_A5v1": [
            "VOID\tAiPrm_Input_Ldo_A5v1( VOID )"
        ],
        "AiPrm_Input_5vadc": [
            "VOID\tAiPrm_Input_5vadc( VOID )"
        ],
        "AiPrm_Input_Ldo_A5v2": [
            "VOID\tAiPrm_Input_Ldo_A5v2( VOID )"
        ],
        "AiPrm_Input_Ldo_D5v": [
            "VOID\tAiPrm_Input_Ldo_D5v( VOID )"
        ],
        "AiPrm_Renewal_N5vasc": [
            "VOID\tAiPrm_Renewal_N5vasc( VOID )"
        ],
        "AiPrm_Renewal_Rd5vasc": [
            "VOID\tAiPrm_Renewal_Rd5vasc( VOID )"
        ],
        "AiPrm_Renewal_Hv5v": [
            "VOID\tAiPrm_Renewal_Hv5v( VOID )"
        ],
        "AiPrm_Renewal_Ldo_A5v1": [
            "VOID\tAiPrm_Renewal_Ldo_A5v1( VOID )"
        ],
        "AiPrm_Renewal_5vadc": [
            "VOID\tAiPrm_Renewal_5vadc( VOID )"
        ],
        "AiPrm_Renewal_Ldo_A5v2": [
            "VOID\tAiPrm_Renewal_Ldo_A5v2( VOID )"
        ],
        "AiPrm_Renewal_Ldo_D5v": [
            "VOID\tAiPrm_Renewal_Ldo_D5v( VOID )"
        ]
    },
    "ai_prm_PwrMgtAbstr.h": {},
    "dio_ifp_PwrMgtAbstr.c": {
        "DioIfp_Input_Port_Intout": [
            "VOID\tDioIfp_Input_Port_Intout( VOID )"
        ],
        "DioIfp_Input_Port_IgSig": [
            "VOID\tDioIfp_Input_Port_IgSig( VOID )"
        ],
        "DioIfp_Input_Port_CanInh": [
            "VOID\tDioIfp_Input_Port_CanInh( VOID )"
        ],
        "DioIfp_Output_Flbk": [
            "VOID\tDioIfp_Output_Flbk( VOID )"
        ],
        "DioIfp_Output_VccInh": [
            "VOID\tDioIfp_Output_VccInh( VOID )"
        ],
        "DioIfp_Output_BoostEn": [
            "VOID\tDioIfp_Output_BoostEn( VOID )"
        ],
        "DioIfp_Output_SelfFHolding": [
            "VOID\tDioIfp_Output_SelfFHolding( VOID )"
        ]
    },
    "dio_ifp_PwrMgtAbstr.h": {},
    "dio_mng_PwrMgtAbstr.c": {
        "DioMng_PwrMgtAbstr_Set_Inidat": [
            "VOID\tDioMng_PwrMgtAbstr_Set_Inidat( VOID )"
        ],
        "DioMng_PwrMgtAbstr_Input_Ports": [
            "VOID\tDioMng_PwrMgtAbstr_Input_Ports( VOID )"
        ],
        "DioMng_PwrMgtAbstr_Output_Digitals": [
            "VOID\tDioMng_PwrMgtAbstr_Output_Digitals( VOID )"
        ]
    },
    "dio_mng_PwrMgtAbstr.h": {},
    "dio_prm_PwrMgtAbstr.c": {
        "DioPrm_PwrMgtAbstr_Set_Inidat": [
            "VOID\tDioPrm_PwrMgtAbstr_Set_Inidat( VOID )"
        ],
        "DioPrm_Set_Input": [
            "VOID\tDioPrm_Set_Input( VOID )"
        ],
        "DioPrm_Renewal_Intout": [
            "VOID\tDioPrm_Renewal_Intout( VOID )"
        ],
        "DioPrm_Renewal_IgSig": [
            "VOID\tDioPrm_Renewal_IgSig( VOID )"
        ],
        "DioPrm_Renewal_CanInh": [
            "VOID\tDioPrm_Renewal_CanInh( VOID )"
        ],
        "DioPrm_Renewal_ReqFlbk": [
            "VOID\tDioPrm_Renewal_ReqFlbk( VOID )"
        ],
        "DioPrm_Renewal_ReqVccInh": [
            "VOID\tDioPrm_Renewal_ReqVccInh( VOID )"
        ],
        "DioPrm_Renewal_ReqBoostEn": [
            "VOID\tDioPrm_Renewal_ReqBoostEn( VOID )"
        ],
        "DioPrm_Renewal_ReqSelfFHolding": [
            "VOID\tDioPrm_Renewal_ReqSelfFHolding( VOID )"
        ]
    },
    "dio_prm_PwrMgtAbstr.h": {},
    "if_dio_PwrMgtAbstr.c": {},
    "if_dio_PwrMgtAbstr.h": {
        "IfDio_SetFlg_Intout": [
            "inline static\tVOID\tIfDio_SetFlg_Intout( const FLAG indat )"
        ],
        "IfDio_GetFlg_Intout": [
            "inline static\tFLAG\tIfDio_GetFlg_Intout( VOID )"
        ],
        "IfDio_SetFlg_IgSig": [
            "inline static\tVOID\tIfDio_SetFlg_IgSig( const FLAG indat )"
        ],
        "IfDio_GetFlg_IgSig": [
            "inline static\tFLAG\tIfDio_GetFlg_IgSig( VOID )"
        ],
        "IfDio_SetFlg_CanInh": [
            "inline static\tVOID\tIfDio_SetFlg_CanInh( const FLAG indat )"
        ],
        "IfDio_GetFlg_CanInh": [
            "inline static\tFLAG\tIfDio_GetFlg_CanInh( VOID )"
        ],
        "IfDio_SetFlg_FlbkReq": [
            "inline static\tVOID\tIfDio_SetFlg_FlbkReq( const FLAG data )"
        ],
        "IfDio_GetFlg_FlbkReq": [
            "inline static\tFLAG\tIfDio_GetFlg_FlbkReq( VOID )"
        ],
        "IfDio_SetFlg_VccInh": [
            "inline static\tVOID\tIfDio_SetFlg_VccInh( const FLAG data )"
        ],
        "IfDio_GetFlg_VccInh": [
            "inline static\tFLAG\tIfDio_GetFlg_VccInh( VOID )"
        ],
        "IfDio_SetFlg_VccInhReq": [
            "inline static\tVOID\tIfDio_SetFlg_VccInhReq( const FLAG data )"
        ],
        "IfDio_GetFlg_VccInhReq": [
            "inline static\tFLAG\tIfDio_GetFlg_VccInhReq( VOID )"
        ],
        "IfDio_SetFlg_BoostEn": [
            "inline static\tVOID\tIfDio_SetFlg_BoostEn( const FLAG indat )"
        ],
        "IfDio_GetFlg_BoostEn": [
            "inline static\tFLAG\tIfDio_GetFlg_BoostEn( VOID )"
        ],
        "IfDio_SetFlg_BoostEnReq": [
            "inline static\tVOID\tIfDio_SetFlg_BoostEnReq( const FLAG data )"
        ],
        "IfDio_GetFlg_BoostEnReq": [
            "inline static\tFLAG\tIfDio_GetFlg_BoostEnReq( VOID )"
        ],
        "IfDio_SetFlg_SelfFHolding": [
            "inline static\tVOID\tIfDio_SetFlg_SelfFHolding( const FLAG indat )"
        ],
        "IfDio_GetFlg_SelfFHolding": [
            "inline static\tFLAG\tIfDio_GetFlg_SelfFHolding( VOID )"
        ],
        "IfDio_SetFlg_SelfFHoldingReq": [
            "inline static\tVOID\tIfDio_SetFlg_SelfFHoldingReq( const FLAG data )"
        ],
        "IfDio_GetFlg_SelfFHoldingReq": [
            "inline static\tFLAG\tIfDio_GetFlg_SelfFHoldingReq( VOID )"
        ]
    },
    "PwrMgtAbstr.c": {
        "PwrMgtAbstr_Init": [
            "void PwrMgtAbstr_Init(void)"
        ],
        "PwrMgtAbstr_Main": [
            "void PwrMgtAbstr_Main(void)"
        ]
    },
    "PwrMgtAbstr.h": {},
    "PwrMgtAbstr_MemMap.h": {},
    "Rte_PwrMgtAbstr.h": {},
    "Rte_PwrMgtAbstr_Type.h": {},
    "ai_mng_vdc.c": {
        "AiMng_Init_Vdc": [
            "VOID\tAiMng_Init_Vdc( VOID )"
        ],
        "AiMng_Set_DCDCVolInitDat": [
            "static\tVOID\tAiMng_Set_DCDCVolInitDat( VOID )"
        ],
        "AiMng_Input_AdScan_Pe1Vdc": [
            "VOID\tAiMng_Input_AdScan_Pe1Vdc( VOID )"
        ],
        "AiMng_Input_AdScan_Pe2Vdc": [
            "VOID\tAiMng_Input_AdScan_Pe2Vdc( VOID )"
        ],
        "AiMng_Main_DCDCVol": [
            "VOID\tAiMng_Main_DCDCVol( VOID )"
        ],
        "AiMng_Main_Vdc": [
            "VOID\tAiMng_Main_Vdc( VOID )"
        ],
        "AiMng_Main_DCDCVol_1ms": [
            "static\tVOID\tAiMng_Main_DCDCVol_1ms( VOID )"
        ],
        "Mng_Input_AdcMon": [
            "static\tVOID\tMng_Input_AdcMon( VOID )"
        ],
        "Mng_Renewal_AdcMon": [
            "static\tVOID\tMng_Renewal_AdcMon( VOID )"
        ]
    },
    "ai_mng_vdc.h": {},
    "ai_prm_vdc.c": {
        "VoltageSensorAbstr_Pe1Ini": [
            "VOID\tVoltageSensorAbstr_Pe1Ini( VOID )"
        ],
        "VoltageSensorAbstr_Pe2Ini": [
            "VOID\tVoltageSensorAbstr_Pe2Ini( VOID )"
        ],
        "AiPrm_Set_DCDCVolInitDat": [
            "VOID\tAiPrm_Set_DCDCVolInitDat( VOID )"
        ],
        "AiPrm_Renewal_Pe1Vdc": [
            "VOID\tAiPrm_Renewal_Pe1Vdc( VOID )"
        ],
        "AiPrm_Renewal_Pe2Vdc": [
            "VOID\tAiPrm_Renewal_Pe2Vdc( VOID )"
        ],
        "AiPrm_Input_DCLinkVol": [
            "VOID\tAiPrm_Input_DCLinkVol( VOID )"
        ],
        "AiPrm_Input_DCBattVol": [
            "VOID\tAiPrm_Input_DCBattVol( VOID )"
        ],
        "AiPrm_Check_DCLinkVol": [
            "VOID\tAiPrm_Check_DCLinkVol( VOID )"
        ],
        "AiPrm_Check_DCBattVol": [
            "VOID\tAiPrm_Check_DCBattVol( VOID )"
        ],
        "AiPrm_Renewal_Pe1OvrVolSts": [
            "VOID\tAiPrm_Renewal_Pe1OvrVolSts( VOID )"
        ],
        "AiPrm_Renewal_Pe2OvrVolSts": [
            "VOID\tAiPrm_Renewal_Pe2OvrVolSts( VOID )"
        ],
        "AiPrm_Renewal_DCLinkVol": [
            "VOID\tAiPrm_Renewal_DCLinkVol( VOID )"
        ],
        "AiPrm_Renewal_DCBattVol": [
            "VOID\tAiPrm_Renewal_DCBattVol( VOID )"
        ],
        "AiPrm_Input_AdcMon": [
            "VOID\tAiPrm_Input_AdcMon( VOID )"
        ],
        "AiPrm_Renewal_AdcMon": [
            "VOID\tAiPrm_Renewal_AdcMon( VOID )"
        ],
        "AiPrm_Renewal_DcLinkVol_Pe1_Qf": [
            "VOID\tAiPrm_Renewal_DcLinkVol_Pe1_Qf( VOID )"
        ],
        "AiPrm_Renewal_DcLinkVol_Pe2_Qf": [
            "VOID\tAiPrm_Renewal_DcLinkVol_Pe2_Qf( VOID )"
        ],
        "AiPrm_Renewal_DcLinkVol_DcDc_Qf": [
            "VOID\tAiPrm_Renewal_DcLinkVol_DcDc_Qf( VOID )"
        ],
        "AiPrm_Renewal_DcConVol_DcDc_Qf": [
            "VOID\tAiPrm_Renewal_DcConVol_DcDc_Qf( VOID )"
        ]
    },
    "ai_prm_vdc.h": {},
    "VoltageSensorAbstr.c": {
        "VoltageSensorAbstr_Pe1Main": [
            "VOID\tVoltageSensorAbstr_Pe1Main( VOID )"
        ],
        "VoltageSensorAbstr_Pe2Main": [
            "VOID\tVoltageSensorAbstr_Pe2Main( VOID )"
        ]
    },
    "VoltageSensorAbstr.h": {},
    "angle_mng_pe1.c": {
        "AngleMng_Set_Inidat_SG_PE1": [
            "VOID\tAngleMng_Set_Inidat_SG_PE1( VOID )"
        ],
        "AngleMng_Main_SG_PE1": [
            "VOID\tAngleMng_Main_SG_PE1( VOID )"
        ],
        "AngleMng_Calc_WR_SG_PE1": [
            "static\tVOID\tAngleMng_Calc_WR_SG_PE1( VOID )"
        ]
    },
    "angle_mng_pe2.c": {
        "AngleMng_Set_Inidat_SG_PE2": [
            "VOID\tAngleMng_Set_Inidat_SG_PE2( VOID )"
        ],
        "AngleMng_Main_SG_PE2": [
            "VOID\tAngleMng_Main_SG_PE2( VOID )"
        ],
        "AngleMng_Calc_WR_SG_PE2": [
            "static\tVOID\tAngleMng_Calc_WR_SG_PE2( VOID )"
        ],
        "AngleMng_Check_Pe2_Stalled": [
            "VOID\tAngleMng_Check_Pe2_Stalled( VOID )"
        ]
    },
    "CurrentControl.c": {
        "CurrentControl_Pe1Init": [
            "void CurrentControl_Pe1Init(void)"
        ],
        "CurrentControl_Pe2Init": [
            "void CurrentControl_Pe2Init(void)"
        ],
        "CurrentControl_Pe1Main": [
            "void CurrentControl_Pe1Main(void)"
        ],
        "CurrentControl_Pe2Main": [
            "void CurrentControl_Pe2Main(void)"
        ]
    },
    "CurrentControl.h": {},
    "fb_kpwm_tbl_pe1.c": {},
    "fb_kpwm_tbl_pe2.c": {},
    "fb_vdead_tbl_pe1.c": {},
    "fb_vdead_tbl_pe2.c": {},
    "fi_pwm_invadj_pe1.c": {
        "fi_pwm_invadj_PE1": [
            "void fi_pwm_invadj_PE1 (void)"
        ],
        "fb_pwm_invadj_init_PE1": [
            "void fb_pwm_invadj_init_PE1 (void)"
        ]
    },
    "fi_pwm_invadj_pe2.c": {
        "fi_pwm_invadj_PE2": [
            "void fi_pwm_invadj_PE2 (void)"
        ],
        "fb_pwm_invadj_init_PE2": [
            "void fb_pwm_invadj_init_PE2 (void)"
        ]
    },
    "fpmsm_user_pe1.h": {},
    "fpmsm_user_pe2.h": {},
    "motc_cfg_pe1.c": {},
    "motc_cfg_pe1.h": {},
    "motc_cfg_pe2.c": {},
    "motc_cfg_pe2.h": {},
    "motc_crrctrl_pe1.c": {
        "Motc_CrrCtrl_Set_Inidat_PE1": [
            "VOID\tMotc_CrrCtrl_Set_Inidat_PE1( VOID )"
        ],
        "Motc_CrrCtrl_Main_PE1": [
            "VOID\tMotc_CrrCtrl_Main_PE1( VOID )"
        ],
        "CrrCtrl_Calc_FcPwm_PE1": [
            "static\tVOID\tCrrCtrl_Calc_FcPwm_PE1( VOID )"
        ],
        "CrrCtrl_Set_SampleFreq_PE1": [
            "static\tVOID\tCrrCtrl_Set_SampleFreq_PE1( VOID )"
        ]
    },
    "motc_crrctrl_pe2.c": {
        "Motc_CrrCtrl_Set_Inidat_PE2": [
            "VOID\tMotc_CrrCtrl_Set_Inidat_PE2( VOID )"
        ],
        "Motc_CrrCtrl_Main_PE2": [
            "VOID\tMotc_CrrCtrl_Main_PE2( VOID )"
        ],
        "CrrCtrl_Calc_FcPwm_PE2": [
            "static\tVOID\tCrrCtrl_Calc_FcPwm_PE2( VOID )"
        ],
        "CrrCtrl_Set_SampleFreq_PE2": [
            "static\tVOID\tCrrCtrl_Set_SampleFreq_PE2( VOID )"
        ]
    },
    "motc_estimate_pe1.c": {
        "Motc_Estimate_Set_Inidat_PE1": [
            "VOID\tMotc_Estimate_Set_Inidat_PE1( VOID )"
        ],
        "Motc_Estimate_Main_PE1": [
            "VOID\tMotc_Estimate_Main_PE1( VOID )"
        ],
        "Estimate_Calc_Trq_Current_PE1": [
            "static\tVOID\tEstimate_Calc_Trq_Current_PE1( VOID )"
        ],
        "Estimate_Calc_Power_PE1": [
            "static\tFLOAT\tEstimate_Calc_Power_PE1( const FLOAT f4_iq, const FLOAT f4_id, const FLOAT f4_vq_ref,const FLOAT f4_vd_ref, const FLAG f_calc_enable )"
        ],
        "Estimate_Calc_Idc_PE1": [
            "static\tFLOAT\tEstimate_Calc_Idc_PE1( const FLOAT f4_power_ac, const FLOAT f4_vdc, const FLAG f_calc_enable,const FLOAT f4_idc_est_lpf_n1 )"
        ],
        "Cfl_LinearInterpolation_PE1": [
            "static\tFLOAT\tCfl_LinearInterpolation_PE1( const FLOAT xin, const FLOAT x0, const FLOAT x1, const FLOAT y0, const FLOAT y1 )"
        ],
        "Cfl_Interpolation_1Dem_PE1": [
            "static\tFLOAT\tCfl_Interpolation_1Dem_PE1( const FLOAT xin, const USHORT size, const FLOAT* const x_tbl, const FLOAT* const y_tbl )"
        ],
        "Cfl_Interpolation_2Dem_PE1": [
            "static\tFLOAT\tCfl_Interpolation_2Dem_PE1( const FLOAT xin, const FLOAT yin, const TAG_ITPTBL_2DEM * const table )"
        ]
    },
    "motc_estimate_pe2.c": {
        "Motc_Estimate_Set_Inidat_PE2": [
            "VOID\tMotc_Estimate_Set_Inidat_PE2( VOID )"
        ],
        "Motc_Estimate_Main_PE2": [
            "VOID\tMotc_Estimate_Main_PE2( VOID )"
        ],
        "Estimate_Calc_Trq_Current_PE2": [
            "static\tVOID\tEstimate_Calc_Trq_Current_PE2( VOID )"
        ],
        "Estimate_Calc_Power_PE2": [
            "static\tFLOAT\tEstimate_Calc_Power_PE2( const FLOAT f4_iq, const FLOAT f4_id, const FLOAT f4_vq_ref,const FLOAT f4_vd_ref, const FLAG f_calc_enable )"
        ],
        "Estimate_Calc_Idc_PE2": [
            "static\tFLOAT\tEstimate_Calc_Idc_PE2( const FLOAT f4_power_ac, const FLOAT f4_vdc, const FLAG f_calc_enable,const FLOAT f4_idc_est_lpf_n1 )"
        ],
        "Cfl_LinearInterpolation_PE2": [
            "static\tFLOAT\tCfl_LinearInterpolation_PE2( const FLOAT xin, const FLOAT x0, const FLOAT x1, const FLOAT y0, const FLOAT y1 )"
        ],
        "Cfl_Interpolation_1Dem_PE2": [
            "static\tFLOAT\tCfl_Interpolation_1Dem_PE2( const FLOAT xin, const USHORT size, const FLOAT* const x_tbl, const FLOAT* const y_tbl )"
        ],
        "Cfl_Interpolation_2Dem_PE2": [
            "static\tFLOAT\tCfl_Interpolation_2Dem_PE2( const FLOAT xin, const FLOAT yin, const TAG_ITPTBL_2DEM1 * const table )"
        ]
    },
    "motc_idqctrl_pe1.c": {
        "Motc_IdqCtrl_Set_Inidat_PE1": [
            "VOID\tMotc_IdqCtrl_Set_Inidat_PE1( VOID )"
        ],
        "Motc_IdqCtrl_Main_PE1": [
            "VOID\tMotc_IdqCtrl_Main_PE1( VOID )"
        ],
        "IdqCtrl_Select_EstimatePhaseCurr_PE1": [
            "static\tVOID\tIdqCtrl_Select_EstimatePhaseCurr_PE1( VOID )"
        ],
        "IdqCtrl_Convert_32_PE1": [
            "static\tVOID\tIdqCtrl_Convert_32_PE1( VOID )"
        ],
        "IdqCtrl_Convert_UVW_to_AB_PE1": [
            "static\tVOID\tIdqCtrl_Convert_UVW_to_AB_PE1( FLOAT *f4_ia_temp, FLOAT *f4_ib_temp)"
        ],
        "IdqCtrl_Calc_OutlierRemoval_PE1": [
            "static\tVOID\tIdqCtrl_Calc_OutlierRemoval_PE1( VOID )"
        ],
        "IdqCtrl_Proc_TargetCurrent_PE1": [
            "static\tVOID\tIdqCtrl_Proc_TargetCurrent_PE1( VOID )"
        ],
        "IdqCtrl_Calc_TargetCurrent_VectorLimit_PE1": [
            "static\tVOID\tIdqCtrl_Calc_TargetCurrent_VectorLimit_PE1( VOID )"
        ],
        "IdqCtrl_Select_TargetCurrent_PE1": [
            "static\tVOID\tIdqCtrl_Select_TargetCurrent_PE1( VOID )"
        ],
        "IdqCtrl_Calc_Add_IHarmonic_PE1": [
            "static\tVOID\tIdqCtrl_Calc_Add_IHarmonic_PE1( TAG_VHM* vhm, FLOAT idq_vdqctrl_abs, FLOAT* idq_ref )"
        ],
        "Motc_Renewal_ActIdVal_Qf_PE1": [
            "VOID\tMotc_Renewal_ActIdVal_Qf_PE1( VOID )"
        ],
        "Motc_Renewal_ActIqVal_Qf_PE1": [
            "VOID\tMotc_Renewal_ActIqVal_Qf_PE1( VOID )"
        ]
    },
    "motc_idqctrl_pe2.c": {
        "Motc_IdqCtrl_Set_Inidat_PE2": [
            "VOID\tMotc_IdqCtrl_Set_Inidat_PE2( VOID )"
        ],
        "Motc_IdqCtrl_Main_PE2": [
            "VOID\tMotc_IdqCtrl_Main_PE2( VOID )"
        ],
        "IdqCtrl_Select_EstimatePhaseCurr_PE2": [
            "static\tVOID\tIdqCtrl_Select_EstimatePhaseCurr_PE2( VOID )"
        ],
        "IdqCtrl_Convert_32_PE2": [
            "static\tVOID\tIdqCtrl_Convert_32_PE2( VOID )"
        ],
        "IdqCtrl_Convert_UVW_to_AB_PE2": [
            "static\tVOID\tIdqCtrl_Convert_UVW_to_AB_PE2( FLOAT *f4_ia_temp, FLOAT *f4_ib_temp)"
        ],
        "IdqCtrl_Calc_OutlierRemoval_PE2": [
            "static\tVOID\tIdqCtrl_Calc_OutlierRemoval_PE2( VOID )"
        ],
        "IdqCtrl_Proc_TargetCurrent_PE2": [
            "static\tVOID\tIdqCtrl_Proc_TargetCurrent_PE2( VOID )"
        ],
        "IdqCtrl_Calc_TargetCurrent_VectorLimit_PE2": [
            "static\tVOID\tIdqCtrl_Calc_TargetCurrent_VectorLimit_PE2( VOID )"
        ],
        "IdqCtrl_Select_TargetCurrent_PE2": [
            "static\tVOID\tIdqCtrl_Select_TargetCurrent_PE2( VOID )"
        ],
        "IdqCtrl_Calc_Add_IHarmonic_PE2": [
            "static\tVOID\tIdqCtrl_Calc_Add_IHarmonic_PE2( TAG_VHM* vhm, FLOAT idq_vdqctrl_abs, FLOAT* idq_ref )"
        ],
        "Motc_Renewal_ActIdVal_Qf_PE2": [
            "VOID\tMotc_Renewal_ActIdVal_Qf_PE2( VOID )"
        ],
        "Motc_Renewal_ActIqVal_Qf_PE2": [
            "VOID\tMotc_Renewal_ActIqVal_Qf_PE2( VOID )"
        ]
    },
    "motc_nvh_pe1.c": {
        "Motc_NVH_Set_Inidat_PE1": [
            "VOID\tMotc_NVH_Set_Inidat_PE1( VOID )"
        ],
        "Motc_NVH_Main_PE1": [
            "VOID\tMotc_NVH_Main_PE1( VOID )"
        ],
        "Motc_IdqCtrl_Renewal_CalibPrm_PE1": [
            "VOID\tMotc_IdqCtrl_Renewal_CalibPrm_PE1( VOID )"
        ],
        "NVHTbl_Inidat_PE1": [
            "static VOID NVHTbl_Inidat_PE1( FLAG use_rom )"
        ],
        "Calc_NVHTbl_PE1": [
            "VOID Calc_NVHTbl_PE1( FLOAT x, FLOAT y ) // 回転数, ﾄﾙｸ"
        ],
        "Calc_Interp2d_UsePrelookup_PE1": [
            "static FLOAT Calc_Interp2d_UsePrelookup_PE1( TAG_PRELOOKUP* plx, TAG_PRELOOKUP* ply, SHORT *z, USHORT nx )"
        ]
    },
    "motc_nvh_pe2.c": {
        "Motc_NVH_Set_Inidat_PE2": [
            "VOID\tMotc_NVH_Set_Inidat_PE2( VOID )"
        ],
        "Motc_NVH_Main_PE2": [
            "VOID\tMotc_NVH_Main_PE2( VOID )"
        ],
        "Motc_IdqCtrl_Renewal_CalibPrm_PE2": [
            "VOID\tMotc_IdqCtrl_Renewal_CalibPrm_PE2( VOID )"
        ],
        "NVHTbl_Inidat_PE2": [
            "static VOID NVHTbl_Inidat_PE2( FLAG use_rom )"
        ],
        "Calc_NVHTbl_PE2": [
            "VOID Calc_NVHTbl_PE2( FLOAT x, FLOAT y ) // 回転数, ﾄﾙｸ"
        ],
        "Calc_Interp2d_UsePrelookup_PE2": [
            "static FLOAT Calc_Interp2d_UsePrelookup_PE2( TAG_PRELOOKUP* plx, TAG_PRELOOKUP* ply, SHORT *z, USHORT nx )"
        ]
    },
    "motc_nvh_typedef.h": {},
    "motc_pwmctrl_pe1.c": {
        "Motc_PwmCtrl_Set_Inidat_PE1": [
            "VOID\tMotc_PwmCtrl_Set_Inidat_PE1( VOID )"
        ],
        "PwmCtrl_Proc_DeadTimeCorrect_PE1": [
            "static\tVOID\tPwmCtrl_Proc_DeadTimeCorrect_PE1( VOID )"
        ],
        "PwmCtrl_Convert_dq_to_uvw_for_DeadTime_PE1": [
            "static\tVOID\tPwmCtrl_Convert_dq_to_uvw_for_DeadTime_PE1( VOID )"
        ],
        "PwmCtrl_Calc_PhaseCompensateVolt_PE1": [
            "static\tVOID\tPwmCtrl_Calc_PhaseCompensateVolt_PE1( VOID )"
        ],
        "PwmCtrl_Calc_VoltErrCompensateCoeff_PE1": [
            "static\tVOID\tPwmCtrl_Calc_VoltErrCompensateCoeff_PE1(FLOAT _f4_i_ref, FLOAT *_f4_v_vdead )"
        ],
        "PwmCtrl_Calc_VuvwCtrl_Err_PE1": [
            "static\tVOID\tPwmCtrl_Calc_VuvwCtrl_Err_PE1( VOID )"
        ],
        "Motc_PwmCtrl_Main_PE1": [
            "VOID\tMotc_PwmCtrl_Main_PE1( VOID )"
        ],
        "PwmCtrl_Proc_PwmModutationGain_PE1": [
            "static\tVOID\tPwmCtrl_Proc_PwmModutationGain_PE1( VOID )"
        ],
        "PwmCtrl_Calc_ModulatationRate_PE1": [
            "static\tVOID\tPwmCtrl_Calc_ModulatationRate_PE1( VOID )"
        ],
        "PwmCtrl_Modulatation_Method_PE1": [
            "static\tVOID\tPwmCtrl_Modulatation_Method_PE1( VOID )"
        ],
        "PwmCtrl_Calc_OverModulateArea_PE1": [
            "static\tVOID\tPwmCtrl_Calc_OverModulateArea_PE1( VOID )"
        ],
        "PwmCtrl_Convert_23_PE1": [
            "static\tVOID\tPwmCtrl_Convert_23_PE1( VOID )"
        ],
        "PwmCtrl_Calc_InvertorPhaseAngle_PE1": [
            "static\tVOID\tPwmCtrl_Calc_InvertorPhaseAngle_PE1( VOID )"
        ],
        "PwmCtrl_Calc_DQ_UVW_PE1": [
            "static\tVOID\tPwmCtrl_Calc_DQ_UVW_PE1( VOID )"
        ],
        "PwmCtrl_Proc_SpaceVectorModulation_PE1": [
            "static\tVOID\tPwmCtrl_Proc_SpaceVectorModulation_PE1( VOID )"
        ],
        "PwmCtrl_Calc_ModulationOffset_PE1": [
            "static\tVOID\tPwmCtrl_Calc_ModulationOffset_PE1( VOID )"
        ],
        "PwmCtrl_Calc_ModulationOffset_TopBottom_PE1": [
            "static\tVOID\tPwmCtrl_Calc_ModulationOffset_TopBottom_PE1( VOID )"
        ],
        "PwmCtrl_Calc_ModulationRate_Vuvw_PE1": [
            "static\tVOID\tPwmCtrl_Calc_ModulationRate_Vuvw_PE1( VOID )"
        ],
        "PwmCtrl_Calc_ModulationRate_Vuwv_PE1": [
            "static\tVOID\tPwmCtrl_Calc_ModulationRate_Vuwv_PE1( VOID )"
        ],
        "IdqCtrl_Calc_Vab_ctrl_mode_PE1": [
            "static\tVOID\tIdqCtrl_Calc_Vab_ctrl_mode_PE1( FLOAT *f4_vac_tmp, FLOAT *f4_vbc_tmp )"
        ]
    },
    "motc_pwmctrl_pe2.c": {
        "Motc_PwmCtrl_Set_Inidat_PE2": [
            "VOID\tMotc_PwmCtrl_Set_Inidat_PE2( VOID )"
        ],
        "PwmCtrl_Proc_DeadTimeCorrect_PE2": [
            "static\tVOID\tPwmCtrl_Proc_DeadTimeCorrect_PE2( VOID )"
        ],
        "PwmCtrl_Convert_dq_to_uvw_for_DeadTime_PE2": [
            "static\tVOID\tPwmCtrl_Convert_dq_to_uvw_for_DeadTime_PE2( VOID )"
        ],
        "PwmCtrl_Calc_PhaseCompensateVolt_PE2": [
            "static\tVOID\tPwmCtrl_Calc_PhaseCompensateVolt_PE2( VOID )"
        ],
        "PwmCtrl_Calc_VoltErrCompensateCoeff_PE2": [
            "static\tVOID\tPwmCtrl_Calc_VoltErrCompensateCoeff_PE2(FLOAT _f4_i_ref, FLOAT *_f4_v_vdead )"
        ],
        "PwmCtrl_Calc_VuvwCtrl_Err_PE2": [
            "static\tVOID\tPwmCtrl_Calc_VuvwCtrl_Err_PE2( VOID )"
        ],
        "Motc_PwmCtrl_Main_PE2": [
            "VOID\tMotc_PwmCtrl_Main_PE2( VOID )"
        ],
        "PwmCtrl_Proc_PwmModutationGain_PE2": [
            "static\tVOID\tPwmCtrl_Proc_PwmModutationGain_PE2( VOID )"
        ],
        "PwmCtrl_Calc_ModulatationRate_PE2": [
            "static\tVOID\tPwmCtrl_Calc_ModulatationRate_PE2( VOID )"
        ],
        "PwmCtrl_Modulatation_Method_PE2": [
            "static\tVOID\tPwmCtrl_Modulatation_Method_PE2( VOID )"
        ],
        "PwmCtrl_Calc_OverModulateArea_PE2": [
            "static\tVOID\tPwmCtrl_Calc_OverModulateArea_PE2( VOID )"
        ],
        "PwmCtrl_Convert_23_PE2": [
            "static\tVOID\tPwmCtrl_Convert_23_PE2( VOID )"
        ],
        "PwmCtrl_Calc_InvertorPhaseAngle_PE2": [
            "static\tVOID\tPwmCtrl_Calc_InvertorPhaseAngle_PE2( VOID )"
        ],
        "PwmCtrl_Calc_DQ_UVW_PE2": [
            "static\tVOID\tPwmCtrl_Calc_DQ_UVW_PE2( VOID )"
        ],
        "PwmCtrl_Proc_SpaceVectorModulation_PE2": [
            "static\tVOID\tPwmCtrl_Proc_SpaceVectorModulation_PE2( VOID )"
        ],
        "PwmCtrl_Calc_ModulationOffset_PE2": [
            "static\tVOID\tPwmCtrl_Calc_ModulationOffset_PE2( VOID )"
        ],
        "PwmCtrl_Calc_ModulationOffset_TopBottom_PE2": [
            "static\tVOID\tPwmCtrl_Calc_ModulationOffset_TopBottom_PE2( VOID )"
        ],
        "PwmCtrl_Calc_ModulationRate_Vuvw_PE2": [
            "static\tVOID\tPwmCtrl_Calc_ModulationRate_Vuvw_PE2( VOID )"
        ],
        "PwmCtrl_Calc_ModulationRate_Vuwv_PE2": [
            "static\tVOID\tPwmCtrl_Calc_ModulationRate_Vuwv_PE2( VOID )"
        ],
        "IdqCtrl_Calc_Vab_ctrl_mode_PE2": [
            "static\tVOID\tIdqCtrl_Calc_Vab_ctrl_mode_PE2( FLOAT *f4_vac_tmp, FLOAT *f4_vbc_tmp )"
        ]
    },
    "motc_vdqctrl_pe1.c": {
        "Motc_VdqCtrl_Set_Inidat_PE1": [
            "VOID\tMotc_VdqCtrl_Set_Inidat_PE1( VOID )"
        ],
        "Motc_VdqCtrl_Main_PE1": [
            "VOID\tMotc_VdqCtrl_Main_PE1( VOID )"
        ],
        "IdqCtrl_Mixed_TargetCurrent_PE1": [
            "static\tVOID\tIdqCtrl_Mixed_TargetCurrent_PE1( VOID )"
        ],
        "VdqCtrl_Calc_Inductance_PE1": [
            "static\tVOID\tVdqCtrl_Calc_Inductance_PE1( VOID )"
        ],
        "VdqCtrl_Calc_Inductance_for_Measure_Param_PE1": [
            "static\tVOID\tVdqCtrl_Calc_Inductance_for_Measure_Param_PE1( VOID )"
        ],
        "VdqCtrl_init_Vdq_Input_PE1": [
            "static\tVOID\tVdqCtrl_init_Vdq_Input_PE1( VOID )"
        ],
        "VdqCtrl_init_Current_Control_PE1": [
            "static\tVOID\tVdqCtrl_init_Current_Control_PE1( VOID )"
        ],
        "VdqCtrl_Calc_Current_Control_PE1": [
            "static\tVOID\tVdqCtrl_Calc_Current_Control_PE1( VOID )"
        ],
        "VdqCtrl_Calc_Current_Control_PI_Gain_PE1": [
            "static\tVOID\tVdqCtrl_Calc_Current_Control_PI_Gain_PE1( VOID )"
        ],
        "VdqCtrl_Calc_Current_Control_PI_PE1": [
            "static\tVOID\tVdqCtrl_Calc_Current_Control_PI_PE1( VOID )"
        ],
        "VdqCtrl_Calc_Current_Control_d_PE1": [
            "static\tVOID\tVdqCtrl_Calc_Current_Control_d_PE1( VOID )"
        ],
        "VdqCtrl_Calc_Current_Control_q_PE1": [
            "static\tVOID\tVdqCtrl_Calc_Current_Control_q_PE1( VOID )"
        ],
        "VdqCtrl_Calc_Decoupling_Ctrl_PE1": [
            "static\tVOID\tVdqCtrl_Calc_Decoupling_Ctrl_PE1( VOID )"
        ],
        "VdqCtrl_Proc_For_Normal_Mode_Decoupling_Ctrl_PE1": [
            "static\tVOID\tVdqCtrl_Proc_For_Normal_Mode_Decoupling_Ctrl_PE1( VOID )"
        ],
        "VdqCtrl_Proc_For_MeasureVerr_Mode_Decoupling_Ctrl_PE1": [
            "static\tVOID\tVdqCtrl_Proc_For_MeasureVerr_Mode_Decoupling_Ctrl_PE1( VOID )"
        ],
        "VdqCtrl_Proc_VdVq_Limit_PE1": [
            "static\tVOID\tVdqCtrl_Proc_VdVq_Limit_PE1( VOID )"
        ],
        "VdqCtrl_Calc_TargetVolt_VectorLimit_PE1": [
            "static\tVOID\tVdqCtrl_Calc_TargetVolt_VectorLimit_PE1( VOID )"
        ],
        "VdqCtrl_Calc_VdqLpf_PE1": [
            "static\tVOID\tVdqCtrl_Calc_VdqLpf_PE1( VOID )"
        ],
        "VdqCtrl_Calc_Add_VHarmonic_PE1": [
            "static\tVOID\tVdqCtrl_Calc_Add_VHarmonic_PE1( TAG_VHM* vhm, FLOAT idq_vdqctrl_abs, FLOAT vhm_ldq, FLOAT * vdq_ref_tmp )"
        ],
        "IdqCtrl_Calc_Vdq_ctrl_mode_PE1": [
            "static\tVOID\tIdqCtrl_Calc_Vdq_ctrl_mode_PE1( FLOAT *f4_vdc_tmp, FLOAT *f4_vqc_tmp )"
        ]
    },
    "motc_vdqctrl_pe2.c": {
        "Motc_VdqCtrl_Set_Inidat_PE2": [
            "VOID\tMotc_VdqCtrl_Set_Inidat_PE2( VOID )"
        ],
        "Motc_VdqCtrl_Main_PE2": [
            "VOID\tMotc_VdqCtrl_Main_PE2( VOID )"
        ],
        "IdqCtrl_Mixed_TargetCurrent_PE2": [
            "static\tVOID\tIdqCtrl_Mixed_TargetCurrent_PE2( VOID )"
        ],
        "VdqCtrl_Calc_Inductance_PE2": [
            "static\tVOID\tVdqCtrl_Calc_Inductance_PE2( VOID )"
        ],
        "VdqCtrl_Calc_Inductance_for_Measure_Param_PE2": [
            "static\tVOID\tVdqCtrl_Calc_Inductance_for_Measure_Param_PE2( VOID )"
        ],
        "VdqCtrl_init_Vdq_Input_PE2": [
            "static\tVOID\tVdqCtrl_init_Vdq_Input_PE2( VOID )"
        ],
        "VdqCtrl_init_Current_Control_PE2": [
            "static\tVOID\tVdqCtrl_init_Current_Control_PE2( VOID )"
        ],
        "VdqCtrl_Calc_Current_Control_PE2": [
            "static\tVOID\tVdqCtrl_Calc_Current_Control_PE2( VOID )"
        ],
        "VdqCtrl_Calc_Current_Control_PI_Gain_PE2": [
            "static\tVOID\tVdqCtrl_Calc_Current_Control_PI_Gain_PE2( VOID )"
        ],
        "VdqCtrl_Calc_Current_Control_PI_PE2": [
            "static\tVOID\tVdqCtrl_Calc_Current_Control_PI_PE2( VOID )"
        ],
        "VdqCtrl_Calc_Current_Control_d_PE2": [
            "static\tVOID\tVdqCtrl_Calc_Current_Control_d_PE2( VOID )"
        ],
        "VdqCtrl_Calc_Current_Control_q_PE2": [
            "static\tVOID\tVdqCtrl_Calc_Current_Control_q_PE2( VOID )"
        ],
        "VdqCtrl_Calc_Decoupling_Ctrl_PE2": [
            "static\tVOID\tVdqCtrl_Calc_Decoupling_Ctrl_PE2( VOID )"
        ],
        "VdqCtrl_Proc_For_Normal_Mode_Decoupling_Ctrl_PE2": [
            "static\tVOID\tVdqCtrl_Proc_For_Normal_Mode_Decoupling_Ctrl_PE2( VOID )"
        ],
        "VdqCtrl_Proc_For_MeasureVerr_Mode_Decoupling_Ctrl_PE2": [
            "static\tVOID\tVdqCtrl_Proc_For_MeasureVerr_Mode_Decoupling_Ctrl_PE2( VOID )"
        ],
        "VdqCtrl_Proc_VdVq_Limit_PE2": [
            "static\tVOID\tVdqCtrl_Proc_VdVq_Limit_PE2( VOID )"
        ],
        "VdqCtrl_Calc_TargetVolt_VectorLimit_PE2": [
            "static\tVOID\tVdqCtrl_Calc_TargetVolt_VectorLimit_PE2( VOID )"
        ],
        "VdqCtrl_Calc_VdqLpf_PE2": [
            "static\tVOID\tVdqCtrl_Calc_VdqLpf_PE2( VOID )"
        ],
        "VdqCtrl_Calc_Add_VHarmonic_PE2": [
            "static\tVOID\tVdqCtrl_Calc_Add_VHarmonic_PE2( TAG_VHM* vhm, FLOAT idq_vdqctrl_abs, FLOAT vhm_ldq, FLOAT * vdq_ref_tmp )"
        ],
        "IdqCtrl_Calc_Vdq_ctrl_mode_PE2": [
            "static\tVOID\tIdqCtrl_Calc_Vdq_ctrl_mode_PE2( FLOAT *f4_vdc_tmp, FLOAT *f4_vqc_tmp )"
        ]
    },
    "param_cfg_pe1.h": {},
    "param_cfg_pe2.h": {},
    "if_cdd_pe1_mot_ctrl.c": {},
    "if_cdd_pe1_mot_ctrl.h": {
        "IfCdd_Set_NDCPe1CurrentCtrl_FSVal": [
            "inline static\tVOID\tIfCdd_Set_NDCPe1CurrentCtrl_FSVal( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe1CurrentCtrl_FSVal": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe1CurrentCtrl_FSVal( VOID )"
        ],
        "IfCdd_Set_NDCPe1CurrentCtrl_TSVal": [
            "inline static\tVOID\tIfCdd_Set_NDCPe1CurrentCtrl_TSVal( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe1CurrentCtrl_TSVal": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe1CurrentCtrl_TSVal( VOID )"
        ],
        "IfCdd_Set_NDCPe1MotCtrlCddNVH_Iq6amp": [
            "inline static\tVOID\tIfCdd_Set_NDCPe1MotCtrlCddNVH_Iq6amp( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe1MotCtrlCddNVH_Iq6amp": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe1MotCtrlCddNVH_Iq6amp( VOID )"
        ],
        "IfCdd_Set_NDCPe1MotCtrlCddNVH_Iq12amp": [
            "inline static\tVOID\tIfCdd_Set_NDCPe1MotCtrlCddNVH_Iq12amp( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe1MotCtrlCddNVH_Iq12amp": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe1MotCtrlCddNVH_Iq12amp( VOID )"
        ],
        "IfCdd_Set_NDCPe1MotCtrlCddNVH_Iq24amp": [
            "inline static\tVOID\tIfCdd_Set_NDCPe1MotCtrlCddNVH_Iq24amp( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe1MotCtrlCddNVH_Iq24amp": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe1MotCtrlCddNVH_Iq24amp( VOID )"
        ],
        "IfCdd_Set_NDCPe1MotCtrlCddNVH_Vd12amp": [
            "inline static\tVOID\tIfCdd_Set_NDCPe1MotCtrlCddNVH_Vd12amp( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe1MotCtrlCddNVH_Vd12amp": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe1MotCtrlCddNVH_Vd12amp( VOID )"
        ],
        "IfCdd_Set_NDCPe1MotCtrlCddNVH_Iq6pha": [
            "inline static\tVOID\tIfCdd_Set_NDCPe1MotCtrlCddNVH_Iq6pha( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe1MotCtrlCddNVH_Iq6pha": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe1MotCtrlCddNVH_Iq6pha( VOID )"
        ],
        "IfCdd_Set_NDCPe1MotCtrlCddNVH_Iq12pha": [
            "inline static\tVOID\tIfCdd_Set_NDCPe1MotCtrlCddNVH_Iq12pha( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe1MotCtrlCddNVH_Iq12pha": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe1MotCtrlCddNVH_Iq12pha( VOID )"
        ],
        "IfCdd_Set_NDCPe1MotCtrlCddNVH_Iq24pha": [
            "inline static\tVOID\tIfCdd_Set_NDCPe1MotCtrlCddNVH_Iq24pha( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe1MotCtrlCddNVH_Iq24pha": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe1MotCtrlCddNVH_Iq24pha( VOID )"
        ],
        "IfCdd_Set_NDCPe1MotCtrlCddNVH_Vd12pha": [
            "inline static\tVOID\tIfCdd_Set_NDCPe1MotCtrlCddNVH_Vd12pha( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe1MotCtrlCddNVH_Vd12pha": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe1MotCtrlCddNVH_Vd12pha( VOID )"
        ],
        "IfCdd_Set_NDCPe1MotCtrlCddNVH_Iq6ena": [
            "inline static\tVOID\tIfCdd_Set_NDCPe1MotCtrlCddNVH_Iq6ena( UCHAR data )"
        ],
        "IfCdd_Get_NDCPe1MotCtrlCddNVH_Iq6ena": [
            "inline static\tUCHAR\tIfCdd_Get_NDCPe1MotCtrlCddNVH_Iq6ena( VOID )"
        ],
        "IfCdd_Set_NDCPe1MotCtrlCddNVH_Iq12ena": [
            "inline static\tVOID\tIfCdd_Set_NDCPe1MotCtrlCddNVH_Iq12ena( UCHAR data )"
        ],
        "IfCdd_Get_NDCPe1MotCtrlCddNVH_Iq12ena": [
            "inline static\tUCHAR\tIfCdd_Get_NDCPe1MotCtrlCddNVH_Iq12ena( VOID )"
        ],
        "IfCdd_Set_NDCPe1MotCtrlCddNVH_Iq24ena": [
            "inline static\tVOID\tIfCdd_Set_NDCPe1MotCtrlCddNVH_Iq24ena( UCHAR data )"
        ],
        "IfCdd_Get_NDCPe1MotCtrlCddNVH_Iq24ena": [
            "inline static\tUCHAR\tIfCdd_Get_NDCPe1MotCtrlCddNVH_Iq24ena( VOID )"
        ],
        "IfCdd_Set_NDCPe1MotCtrlCddNVH_Vd12ena": [
            "inline static\tVOID\tIfCdd_Set_NDCPe1MotCtrlCddNVH_Vd12ena( UCHAR data )"
        ],
        "IfCdd_Get_NDCPe1MotCtrlCddNVH_Vd12ena": [
            "inline static\tUCHAR\tIfCdd_Get_NDCPe1MotCtrlCddNVH_Vd12ena( VOID )"
        ],
        "IfCdd_Set_NDCPe1MotCtrlCddNVH_Iq6SpdLim": [
            "inline static\tVOID\tIfCdd_Set_NDCPe1MotCtrlCddNVH_Iq6SpdLim( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe1MotCtrlCddNVH_Iq6SpdLim": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe1MotCtrlCddNVH_Iq6SpdLim( VOID )"
        ],
        "IfCdd_Set_NDCPe1MotCtrlCddNVH_Iq12SpdLim": [
            "inline static\tVOID\tIfCdd_Set_NDCPe1MotCtrlCddNVH_Iq12SpdLim( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe1MotCtrlCddNVH_Iq12SpdLim": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe1MotCtrlCddNVH_Iq12SpdLim( VOID )"
        ],
        "IfCdd_Set_NDCPe1MotCtrlCddNVH_Iq24SpdLim": [
            "inline static\tVOID\tIfCdd_Set_NDCPe1MotCtrlCddNVH_Iq24SpdLim( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe1MotCtrlCddNVH_Iq24SpdLim": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe1MotCtrlCddNVH_Iq24SpdLim( VOID )"
        ],
        "IfCdd_Set_NDCPe1MotCtrlCddNVH_Vd12SpdLim": [
            "inline static\tVOID\tIfCdd_Set_NDCPe1MotCtrlCddNVH_Vd12SpdLim( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe1MotCtrlCddNVH_Vd12SpdLim": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe1MotCtrlCddNVH_Vd12SpdLim( VOID )"
        ],
        "IfCdd_Set_NDCPe1MotCtrlCddNVH_MaxRatio": [
            "inline static\tVOID\tIfCdd_Set_NDCPe1MotCtrlCddNVH_MaxRatio( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe1MotCtrlCddNVH_MaxRatio": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe1MotCtrlCddNVH_MaxRatio( VOID )"
        ],
        "IfCdd_Set_NDCPe1MotCtrlCddNVH_LoLim": [
            "inline static\tVOID\tIfCdd_Set_NDCPe1MotCtrlCddNVH_LoLim( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe1MotCtrlCddNVH_LoLim": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe1MotCtrlCddNVH_LoLim( VOID )"
        ]
    },
    "if_cdd_pe2_mot_ctrl.c": {},
    "if_cdd_pe2_mot_ctrl.h": {
        "IfCdd_Set_NDCPe2CurrentCtrl_FSVal": [
            "inline static\tVOID\tIfCdd_Set_NDCPe2CurrentCtrl_FSVal( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe2CurrentCtrl_FSVal": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe2CurrentCtrl_FSVal( VOID )"
        ],
        "IfCdd_Set_NDCPe2CurrentCtrl_TSVal": [
            "inline static\tVOID\tIfCdd_Set_NDCPe2CurrentCtrl_TSVal( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe2CurrentCtrl_TSVal": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe2CurrentCtrl_TSVal( VOID )"
        ],
        "IfCdd_Set_NDCPe2MotCtrlCddNVH_Iq6amp": [
            "inline static\tVOID\tIfCdd_Set_NDCPe2MotCtrlCddNVH_Iq6amp( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe2MotCtrlCddNVH_Iq6amp": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe2MotCtrlCddNVH_Iq6amp( VOID )"
        ],
        "IfCdd_Set_NDCPe2MotCtrlCddNVH_Iq12amp": [
            "inline static\tVOID\tIfCdd_Set_NDCPe2MotCtrlCddNVH_Iq12amp( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe2MotCtrlCddNVH_Iq12amp": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe2MotCtrlCddNVH_Iq12amp( VOID )"
        ],
        "IfCdd_Set_NDCPe2MotCtrlCddNVH_Iq24amp": [
            "inline static\tVOID\tIfCdd_Set_NDCPe2MotCtrlCddNVH_Iq24amp( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe2MotCtrlCddNVH_Iq24amp": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe2MotCtrlCddNVH_Iq24amp( VOID )"
        ],
        "IfCdd_Set_NDCPe2MotCtrlCddNVH_Vd12amp": [
            "inline static\tVOID\tIfCdd_Set_NDCPe2MotCtrlCddNVH_Vd12amp( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe2MotCtrlCddNVH_Vd12amp": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe2MotCtrlCddNVH_Vd12amp( VOID )"
        ],
        "IfCdd_Set_NDCPe2MotCtrlCddNVH_Iq6pha": [
            "inline static\tVOID\tIfCdd_Set_NDCPe2MotCtrlCddNVH_Iq6pha( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe2MotCtrlCddNVH_Iq6pha": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe2MotCtrlCddNVH_Iq6pha( VOID )"
        ],
        "IfCdd_Set_NDCPe2MotCtrlCddNVH_Iq12pha": [
            "inline static\tVOID\tIfCdd_Set_NDCPe2MotCtrlCddNVH_Iq12pha( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe2MotCtrlCddNVH_Iq12pha": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe2MotCtrlCddNVH_Iq12pha( VOID )"
        ],
        "IfCdd_Set_NDCPe2MotCtrlCddNVH_Iq24pha": [
            "inline static\tVOID\tIfCdd_Set_NDCPe2MotCtrlCddNVH_Iq24pha( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe2MotCtrlCddNVH_Iq24pha": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe2MotCtrlCddNVH_Iq24pha( VOID )"
        ],
        "IfCdd_Set_NDCPe2MotCtrlCddNVH_Vd12pha": [
            "inline static\tVOID\tIfCdd_Set_NDCPe2MotCtrlCddNVH_Vd12pha( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe2MotCtrlCddNVH_Vd12pha": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe2MotCtrlCddNVH_Vd12pha( VOID )"
        ],
        "IfCdd_Set_NDCPe2MotCtrlCddNVH_Iq6ena": [
            "inline static\tVOID\tIfCdd_Set_NDCPe2MotCtrlCddNVH_Iq6ena( UCHAR data )"
        ],
        "IfCdd_Get_NDCPe2MotCtrlCddNVH_Iq6ena": [
            "inline static\tUCHAR\tIfCdd_Get_NDCPe2MotCtrlCddNVH_Iq6ena( VOID )"
        ],
        "IfCdd_Set_NDCPe2MotCtrlCddNVH_Iq12ena": [
            "inline static\tVOID\tIfCdd_Set_NDCPe2MotCtrlCddNVH_Iq12ena( UCHAR data )"
        ],
        "IfCdd_Get_NDCPe2MotCtrlCddNVH_Iq12ena": [
            "inline static\tUCHAR\tIfCdd_Get_NDCPe2MotCtrlCddNVH_Iq12ena( VOID )"
        ],
        "IfCdd_Set_NDCPe2MotCtrlCddNVH_Iq24ena": [
            "inline static\tVOID\tIfCdd_Set_NDCPe2MotCtrlCddNVH_Iq24ena( UCHAR data )"
        ],
        "IfCdd_Get_NDCPe2MotCtrlCddNVH_Iq24ena": [
            "inline static\tUCHAR\tIfCdd_Get_NDCPe2MotCtrlCddNVH_Iq24ena( VOID )"
        ],
        "IfCdd_Set_NDCPe2MotCtrlCddNVH_Vd12ena": [
            "inline static\tVOID\tIfCdd_Set_NDCPe2MotCtrlCddNVH_Vd12ena( UCHAR data )"
        ],
        "IfCdd_Get_NDCPe2MotCtrlCddNVH_Vd12ena": [
            "inline static\tUCHAR\tIfCdd_Get_NDCPe2MotCtrlCddNVH_Vd12ena( VOID )"
        ],
        "IfCdd_Set_NDCPe2MotCtrlCddNVH_Iq6SpdLim": [
            "inline static\tVOID\tIfCdd_Set_NDCPe2MotCtrlCddNVH_Iq6SpdLim( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe2MotCtrlCddNVH_Iq6SpdLim": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe2MotCtrlCddNVH_Iq6SpdLim( VOID )"
        ],
        "IfCdd_Set_NDCPe2MotCtrlCddNVH_Iq12SpdLim": [
            "inline static\tVOID\tIfCdd_Set_NDCPe2MotCtrlCddNVH_Iq12SpdLim( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe2MotCtrlCddNVH_Iq12SpdLim": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe2MotCtrlCddNVH_Iq12SpdLim( VOID )"
        ],
        "IfCdd_Set_NDCPe2MotCtrlCddNVH_Iq24SpdLim": [
            "inline static\tVOID\tIfCdd_Set_NDCPe2MotCtrlCddNVH_Iq24SpdLim( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe2MotCtrlCddNVH_Iq24SpdLim": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe2MotCtrlCddNVH_Iq24SpdLim( VOID )"
        ],
        "IfCdd_Set_NDCPe2MotCtrlCddNVH_Vd12SpdLim": [
            "inline static\tVOID\tIfCdd_Set_NDCPe2MotCtrlCddNVH_Vd12SpdLim( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe2MotCtrlCddNVH_Vd12SpdLim": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe2MotCtrlCddNVH_Vd12SpdLim( VOID )"
        ],
        "IfCdd_Set_NDCPe2MotCtrlCddNVH_MaxRatio": [
            "inline static\tVOID\tIfCdd_Set_NDCPe2MotCtrlCddNVH_MaxRatio( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe2MotCtrlCddNVH_MaxRatio": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe2MotCtrlCddNVH_MaxRatio( VOID )"
        ],
        "IfCdd_Set_NDCPe2MotCtrlCddNVH_LoLim": [
            "inline static\tVOID\tIfCdd_Set_NDCPe2MotCtrlCddNVH_LoLim( FLOAT data )"
        ],
        "IfCdd_Get_NDCPe2MotCtrlCddNVH_LoLim": [
            "inline static\tFLOAT\tIfCdd_Get_NDCPe2MotCtrlCddNVH_LoLim( VOID )"
        ]
    },
    "MotorControlIsr.c": {
        "ISR_Pe1MotroControl": [
            "void\tISR_Pe1MotroControl( void )"
        ],
        "ISR_Pe2MotroControl": [
            "void\tISR_Pe2MotroControl( void )"
        ]
    },
    "MotorControlIsr.h": {},
    "Pe1MotCtrlCdd.c": {
        "Pe1MotCtrlCdd_Init": [
            "void Pe1MotCtrlCdd_Init(void)"
        ],
        "Pe1MotCtrlCdd_Main": [
            "void Pe1MotCtrlCdd_Main(void)"
        ]
    },
    "Pe1MotCtrlCdd.h": {},
    "Pe1MotCtrlCdd_MemMap.h": {},
    "Rte_Pe1MotCtrlCdd.h": {},
    "Rte_Pe1MotCtrlCdd_Type.h": {},
    "Pe2MotCtrlCdd.c": {
        "Pe2MotCtrlCdd_Init": [
            "void Pe2MotCtrlCdd_Init(void)"
        ],
        "Pe2MotCtrlCdd_Main": [
            "void Pe2MotCtrlCdd_Main(void)"
        ]
    },
    "Pe2MotCtrlCdd.h": {},
    "Pe2MotCtrlCdd_MemMap.h": {},
    "Rte_Pe2MotCtrlCdd.h": {},
    "Rte_Pe2MotCtrlCdd_Type.h": {},
    "PeDiag.c": {
        "PeDiag_Init": [
            "void PeDiag_Init(void)"
        ],
        "PeDiag_Run1_Main": [
            "void PeDiag_Run1_Main(void)"
        ],
        "PeDiag_Run2_Main": [
            "void PeDiag_Run2_Main(void)"
        ]
    },
    "PeDiag.h": {},
    "PeDiag_MemMap.h": {},
    "Rte_PeDiag.h": {},
    "Rte_PeDiag_Type.h": {},
    "cdd_pe1_duty_calc.c": {
        "CddDtyc_Set_Pe1Inidat": [
            "VOID\tCddDtyc_Set_Pe1Inidat( VOID )"
        ],
        "CddDtyc_Renewal_Pe1PwmDuty": [
            "VOID\tCddDtyc_Renewal_Pe1PwmDuty( const FLOAT f4_mu, const FLOAT f4_mv, const FLOAT f4_mw, const USHORT us_freq )"
        ],
        "CddDtyc_Calc_Pe1PwmDuty": [
            "static\tLONG CddDtyc_Calc_Pe1PwmDuty( const FLOAT f4_m, const FLOAT f4_m_dt, const FLOAT f4_m_max_tmp, const FLOAT f4_m_max_inv )"
        ],
        "CddDtyc_Calc_Pe1MMaxInv": [
            "static\tVOID\tCddDtyc_Calc_Pe1MMaxInv( const FLOAT f4_m_dt, FLOAT* f4_m_max_tmp, FLOAT* f4_m_max_inv )"
        ]
    },
    "cdd_pe1_duty_calc.h": {},
    "cdd_pe1_pwm.c": {
        "CddPwm_Output_Pe1PwmDuty": [
            "VOID\tCddPwm_Output_Pe1PwmDuty( const USHORT us_freq )"
        ],
        "CddPwm_Renewal_Pe1StaticPwm": [
            "VOID\tCddPwm_Renewal_Pe1StaticPwm( VOID )"
        ]
    },
    "cdd_pe1_pwm.h": {},
    "cdd_pe2_duty_calc.c": {
        "CddDtyc_Set_Pe2Inidat": [
            "VOID\tCddDtyc_Set_Pe2Inidat( VOID )"
        ],
        "CddDtyc_Renewal_Pe2PwmDuty": [
            "VOID\tCddDtyc_Renewal_Pe2PwmDuty( const FLOAT f4_mu, const FLOAT f4_mv, const FLOAT f4_mw, const USHORT us_freq )"
        ],
        "CddDtyc_Calc_Pe2PwmDuty": [
            "static\tLONG CddDtyc_Calc_Pe2PwmDuty( const FLOAT f4_m, const FLOAT f4_m_dt, const FLOAT f4_m_max_tmp, const FLOAT f4_m_max_inv )"
        ],
        "CddDtyc_Calc_Pe2MMaxInv": [
            "static\tVOID\tCddDtyc_Calc_Pe2MMaxInv( const FLOAT f4_m_dt, FLOAT* f4_m_max_tmp, FLOAT* f4_m_max_inv )"
        ]
    },
    "cdd_pe2_duty_calc.h": {},
    "cdd_pe2_pwm.c": {
        "CddPwm_Output_Pe2PwmDuty": [
            "VOID\tCddPwm_Output_Pe2PwmDuty( const USHORT us_freq )"
        ],
        "CddPwm_Renewal_Pe2StaticPwm": [
            "VOID\tCddPwm_Renewal_Pe2StaticPwm( VOID )"
        ]
    },
    "cdd_pe2_pwm.h": {},
    "if_mmt.c": {},
    "if_mmt.h": {
        "IfMmu_Convert_Pe1PwmDuty": [
            "inline static\tVOID\tIfMmu_Convert_Pe1PwmDuty( const USHORT *duty_in, ULONG *duty_out, const ULONG pwm_cycle_mcu, const ULONG dead_tim_mcu )"
        ],
        "IfMmu_Convert_Pe2PwmDuty": [
            "inline static\tVOID\tIfMmu_Convert_Pe2PwmDuty( const USHORT *duty_in, ULONG *duty_out, const ULONG pwm_cycle_mcu, const ULONG dead_tim_mcu )"
        ],
        "IfMmu_Convert_Pe1PwmCycle": [
            "inline static\tVOID\tIfMmu_Convert_Pe1PwmCycle( const USHORT pwm_cycle, ULONG *duty_out, ULONG* p_dead_tim_mcu )"
        ],
        "IfMmu_Convert_Pe2PwmCycle": [
            "inline static\tVOID\tIfMmu_Convert_Pe2PwmCycle( const USHORT pwm_cycle, ULONG *duty_out, ULONG* p_dead_tim_mcu )"
        ],
        "IfKnl_Set_GenPwmMode": [
            "static\tVOID\tIfKnl_Set_GenPwmMode( const USHORT pwm_req, const USHORT pwm_sts )"
        ],
        "IfKnl_Set_MotPwmMode": [
            "static\tVOID\tIfKnl_Set_MotPwmMode( const USHORT pwm_req, const USHORT pwm_sts )"
        ]
    },
    "if_pwm.c": {},
    "if_pwm.h": {
        "IfMdl_Set_MotPwmOutSts": [
            "static\tVOID\tIfMdl_Set_MotPwmOutSts( const USHORT pwm_sts )"
        ],
        "IfMdl_Get_MotPwmOutSts": [
            "static\tUSHORT\tIfMdl_Get_MotPwmOutSts( VOID )"
        ],
        "IfMdl_Set_GenPwmOutSts": [
            "static\tVOID\tIfMdl_Set_GenPwmOutSts( const USHORT pwm_sts )"
        ],
        "IfMdl_Get_GenPwmOutSts": [
            "static\tUSHORT\tIfMdl_Get_GenPwmOutSts( VOID )"
        ]
    },
    "PWMdriver.c": {
        "PWMdriver_Pe1Init": [
            "VOID\tPWMdriver_Pe1Init( VOID )"
        ],
        "PWMdriver_Pe2Init": [
            "VOID\tPWMdriver_Pe2Init( VOID )"
        ],
        "PWMdriver_Pe1Main": [
            "VOID\tPWMdriver_Pe1Main( VOID )"
        ],
        "PWMdriver_Pe2Main": [
            "VOID\tPWMdriver_Pe2Main( VOID )"
        ]
    },
    "PWMdriver.h": {},
    "DcDcCtrl.c": {
        "DcDcCtrl_Init": [
            "void DcDcCtrl_Init(void)"
        ],
        "DcDcCtrl_Main": [
            "void DcDcCtrl_Main(void)"
        ]
    },
    "DcDcCtrl.h": {},
    "DcDcCtrl_Cfc.c": {},
    "DcDcCtrl_Cfc.h": {
        "DcdcCfc_Calc_Mulshift": [
            "inline\tstatic\tLONG\tDcdcCfc_Calc_Mulshift( const LONG x1, const LONG x2, const LONG shift )"
        ],
        "DcdcCfc_Calc_Mulshift32": [
            "inline\tstatic\tLONG\tDcdcCfc_Calc_Mulshift32( const LONG x1, const LONG x2 )"
        ],
        "DcdcCfc_Lpf_Q24": [
            "inline\tstatic\tLONG\tDcdcCfc_Lpf_Q24( TAG_DCDC_LPF* const lpf, const LONG sl_indat_q24 )"
        ]
    },
    "DcDcCtrl_mng.c": {
        "DcdcCtrl_Mng_InitDat": [
            "VOID\tDcdcCtrl_Mng_InitDat( VOID )"
        ],
        "DcdcCtrl_Mng_Main_1ms": [
            "VOID\tDcdcCtrl_Mng_Main_1ms( VOID )"
        ],
        "DcdcCtrl_Mng_Main_25us": [
            "VOID\tDcdcCtrl_Mng_Main_25us( VOID )"
        ]
    },
    "DcDcCtrl_mng.h": {},
    "DcDcCtrl_ontime.c": {
        "DcdcCtrl_Ontime_InitDat": [
            "VOID\tDcdcCtrl_Ontime_InitDat( VOID )"
        ],
        "DcdcCtrl_Ontime_Init_Sync": [
            "static\tVOID\tDcdcCtrl_Ontime_Init_Sync( VOID )"
        ],
        "DcdcCtrl_Ontime_Init_Async": [
            "static\tVOID\tDcdcCtrl_Ontime_Init_Async( VOID )"
        ],
        "DcdcCtrl_Ontime_Main_1ms": [
            "VOID\tDcdcCtrl_Ontime_Main_1ms( VOID )"
        ],
        "DcdcCtrl_Ontime_SwLimit_Sync": [
            "static\tVOID\tDcdcCtrl_Ontime_SwLimit_Sync( TAG_DCDC_ONTIME_SYNC* const sync, const LONG sl_res_period )"
        ],
        "DcdcCtrl_Ontime_SwLimit_Async": [
            "static\tVOID\tDcdcCtrl_Ontime_SwLimit_Async( VOID )"
        ],
        "DcdcCtrl_Ontime_Select_OnTimeLimit": [
            "static\tUSHORT\tDcdcCtrl_Ontime_Select_OnTimeLimit( const SHORT xin, const UCHAR size )"
        ],
        "DcdcCtrl_Ontime_Main_25us": [
            "VOID\tDcdcCtrl_Ontime_Main_25us( const USHORT us_dclinkvol_lpf, const USHORT us_dcbattvol_lpf )"
        ],
        "DcdcCtrl_Ontime_SetParam_Sync": [
            "static\tVOID\tDcdcCtrl_Ontime_SetParam_Sync( TAG_DCDC_ONTIME_SYNC* const sync, const USHORT us_dclinkvol_lpf, const USHORT us_dcbattvol_lpf )"
        ],
        "DcdcCtrl_Ontime_Calc_Sync": [
            "static\tSHORT\tDcdcCtrl_Ontime_Calc_Sync( TAG_DCDC_ONTIME_SYNC* const sync, const LONG sl_tar_cur_q28 )"
        ],
        "DcdcCtrl_Ontime_SetParam_Async": [
            "static\tVOID\tDcdcCtrl_Ontime_SetParam_Async( TAG_DCDC_ONTIME_ASYNC* async, LONG sl_dclinkvol_lpf, LONG sl_dcbattvol_lpf )"
        ],
        "DcdcCtrl_Ontime_Calc_Async": [
            "static\tSHORT\tDcdcCtrl_Ontime_Calc_Async( TAG_DCDC_ONTIME_ASYNC* async, LONG sl_tar_cur_q28 )"
        ]
    },
    "DcDcCtrl_ontime.h": {},
    "DcDcCtrl_phase_adjust.c": {
        "DcdcCtrl_PhaseAdjst_Main": [
            "VOID\tDcdcCtrl_PhaseAdjst_Main( TAG_DCDC_ZCISR* const args, const UCHAR phase )"
        ],
        "DcdcCtrl_PhaseAdjst_PIctrl": [
            "static\tLONG\tDcdcCtrl_PhaseAdjst_PIctrl( const LONG sl_zcoffset, const ULONG ul_zcperiod, const LONG sl_ontime, const UCHAR phase )"
        ],
        "DcdcCtrl_PhaseAdjst_OnCalcSync": [
            "static\tVOID\tDcdcCtrl_PhaseAdjst_OnCalcSync( TAG_DCDC_ZCISR* const args, const LONG sl_ontime_abs, const LONG sl_ontime_phaseadjst, const UCHAR phase )"
        ],
        "DcdcCtrl_PhaseAdjst_OnCalcAsync": [
            "static\tVOID\tDcdcCtrl_PhaseAdjst_OnCalcAsync( TAG_DCDC_ZCISR* args, LONG sl_ontime_abs, LONG sl_ontime_phaseadjst, UCHAR phase )"
        ],
        "DcdcCtrl_PhaseAdjst_Set_DcdcKnl": [
            "static\tVOID\tDcdcCtrl_PhaseAdjst_Set_DcdcKnl( TAG_DCDC_ZCISR* const args, const UCHAR phase )"
        ]
    },
    "DcDcCtrl_phase_adjust.h": {},
    "DcDcCtrl_prm.c": {
        "DcdcCtrl_Prm_InitDat": [
            "VOID\tDcdcCtrl_Prm_InitDat( VOID )"
        ],
        "DcdcCtrl_Prm_Main_1ms": [
            "VOID\tDcdcCtrl_Prm_Main_1ms( VOID )"
        ],
        "DcdcCtrl_Prm_Judge_Mode": [
            "static\tVOID\tDcdcCtrl_Prm_Judge_Mode( VOID )"
        ],
        "DcdcCtrl_Prm_Set_LossCalcPrm": [
            "static\tVOID\tDcdcCtrl_Prm_Set_LossCalcPrm( VOID )"
        ],
        "DcdcCtrl_Prm_Main_25us": [
            "VOID\tDcdcCtrl_Prm_Main_25us( VOID )"
        ],
        "DcdcCtrl_Prm_Check_Err": [
            "static\tVOID\tDcdcCtrl_Prm_Check_Err( VOID )"
        ],
        "DcdcCtrl_Prm_Select_Mode": [
            "static\tVOID\tDcdcCtrl_Prm_Select_Mode( VOID )"
        ],
        "DcdcCtrl_Prm_Proc_DcdcCtrlLpf": [
            "static\tVOID\tDcdcCtrl_Prm_Proc_DcdcCtrlLpf( VOID )"
        ],
        "DcdcCtrl_Prm_Proc_LossCalcLpf": [
            "static\tVOID\tDcdcCtrl_Prm_Proc_LossCalcLpf( VOID )"
        ]
    },
    "DcDcCtrl_prm.h": {},
    "DcDcCtrl_tarLcurrent.c": {
        "DcdcCtrl_TarLCur_InitDat": [
            "VOID\tDcdcCtrl_TarLCur_InitDat( VOID )"
        ],
        "DcdcCtrl_TarLCur_Main_1ms": [
            "VOID\tDcdcCtrl_TarLCur_Main_1ms( VOID )"
        ],
        "DcdcCtrl_TarLCur_Main_25us": [
            "VOID\tDcdcCtrl_TarLCur_Main_25us( const LONG dclinkvol_lpf_q12 )"
        ],
        "DcdcCtrl_TarLCur_RateLim_Q24": [
            "static\tLONG\tDcdcCtrl_TarLCur_RateLim_Q24( TAG_DCDC_RATELIM* const tg_ratelim, const LONG sl_indat_q24 )"
        ],
        "DcdcCtrl_TarLCur_PIctrl": [
            "static\tVOID\tDcdcCtrl_TarLCur_PIctrl( TAG_DCDC_TARLCUR* const tg_tarcur )"
        ],
        "DcdcCtrl_TarLCur_Limit": [
            "static\tLONG\tDcdcCtrl_TarLCur_Limit( TAG_DCDC_TARLCUR* const tg_tarcur, const LONG sl_vdet_q24 )"
        ]
    },
    "DcDcCtrl_tarLcurrent.h": {},
    "DcDcCtrl_ISR.c": {
        "ISR_Main_DCDC": [
            "VOID\tISR_Main_DCDC( VOID )"
        ],
        "ISR_DCDC_PhaseA": [
            "VOID\tISR_DCDC_PhaseA( VOID )"
        ],
        "ISR_DCDC_PhaseB": [
            "VOID\tISR_DCDC_PhaseB( VOID )"
        ],
        "ISR_DCDC_PhaseC": [
            "VOID\tISR_DCDC_PhaseC( VOID )"
        ]
    },
    "DcDcCtrl_ISR.h": {},
    "DcDcCtrl_MemMap.h": {},
    "Rte_DcDcCtrl.h": {},
    "Rte_DcDcCtrl_Type.h": {},
    "dio_ifp_SicAbstr.c": {
        "DioIfp_Input_Port_DcdcFlt": [
            "VOID\tDioIfp_Input_Port_DcdcFlt( VOID )"
        ],
        "DioIfp_Output_SiCAll": [
            "VOID\tDioIfp_Output_SiCAll( VOID )"
        ]
    },
    "dio_ifp_SiCAbstr.h": {},
    "dio_mng_SiCAbstr.c": {
        "DioMng_Init_SiCAbstr": [
            "VOID\tDioMng_Init_SiCAbstr( VOID )"
        ],
        "DioMng_Main_SiCAbstr": [
            "VOID\tDioMng_Main_SiCAbstr( VOID )"
        ],
        "DioMng_Main_SiCAbstr_1ms": [
            "VOID\tDioMng_Main_SiCAbstr_1ms( VOID )"
        ]
    },
    "dio_mng_SiCAbstr.h": {},
    "dio_prm_SiCAbstr.c": {
        "DioPrm_Set_DcdcInitDat": [
            "VOID\tDioPrm_Set_DcdcInitDat( VOID )"
        ],
        "DioPrm_Renewal_DcdcFlt": [
            "VOID\tDioPrm_Renewal_DcdcFlt( VOID )"
        ],
        "DioPrm_Renewal_ReqDcdcEn": [
            "VOID\tDioPrm_Renewal_ReqDcdcEn( VOID )"
        ],
        "DioPrm_Renewal_ReqDcdcFlbk": [
            "VOID\tDioPrm_Renewal_ReqDcdcFlbk( VOID )"
        ],
        "DioPrm_Renewal_ReqDcdcRst": [
            "VOID\tDioPrm_Renewal_ReqDcdcRst( VOID )"
        ],
        "DioPrm_Input_DcdcFlt": [
            "VOID\tDioPrm_Input_DcdcFlt( VOID )"
        ]
    },
    "dio_prm_SicAbstr.h": {},
    "if_dio_SiCAbstr.c": {},
    "if_dio_SiCAbstr.h": {
        "IfDio_SetFlg_DcdcFlt": [
            "inline static\tVOID\tIfDio_SetFlg_DcdcFlt( const FLAG indat, const UCHAR num )"
        ],
        "IfDio_GetFlg_DcdcFlt": [
            "inline static\tFLAG\tIfDio_GetFlg_DcdcFlt( const UCHAR num )"
        ],
        "IfDio_SetFlg_DcdcEn": [
            "inline static\tVOID\tIfDio_SetFlg_DcdcEn( const FLAG indat )"
        ],
        "IfDio_GetFlg_DcdcEn": [
            "inline static\tFLAG\tIfDio_GetFlg_DcdcEn( VOID )"
        ],
        "IfDio_SetFlg_DcdcEnReq": [
            "inline static\tVOID\tIfDio_SetFlg_DcdcEnReq( const FLAG data )"
        ],
        "IfDio_GetFlg_DcdcEnReq": [
            "inline static\tFLAG\tIfDio_GetFlg_DcdcEnReq( VOID )"
        ],
        "IfDio_SetFlg_DcdcFlbk": [
            "inline static\tVOID\tIfDio_SetFlg_DcdcFlbk( const FLAG indat )"
        ],
        "IfDio_GetFlg_DcdcFlbk": [
            "inline static\tFLAG\tIfDio_GetFlg_DcdcFlbk( VOID )"
        ],
        "IfDio_SetFlg_DcdcFlbkReq": [
            "inline static\tVOID\tIfDio_SetFlg_DcdcFlbkReq( const FLAG data )"
        ],
        "IfDio_GetFlg_DcdcFlbkReq": [
            "inline static\tFLAG\tIfDio_GetFlg_DcdcFlbkReq( VOID )"
        ],
        "IfDio_SetFlg_DcdcRst": [
            "inline static\tVOID\tIfDio_SetFlg_DcdcRst( const FLAG indat )"
        ],
        "IfDio_GetFlg_DcdcRst": [
            "inline static\tFLAG\tIfDio_GetFlg_DcdcRst( VOID )"
        ],
        "IfDio_SetFlg_DcdcRstReq": [
            "inline static\tVOID\tIfDio_SetFlg_DcdcRstReq( const FLAG data )"
        ],
        "IfDio_GetFlg_DcdcRstReq": [
            "inline static\tFLAG\tIfDio_GetFlg_DcdcRstReq( VOID )"
        ]
    },
    "dio_ifp_iac.c": {
        "DioIfp_Input_Port_Pe1_Ocp": [
            "VOID\tDioIfp_Input_Port_Pe1_Ocp( VOID )"
        ],
        "DioIfp_Input_Port_Pe2_Ocp": [
            "VOID\tDioIfp_Input_Port_Pe2_Ocp( VOID )"
        ]
    },
    "dio_ifp_iac.h": {},
    "dio_mng_iac.c": {
        "DioMng_Init_Iac_Ocp": [
            "VOID\tDioMng_Init_Iac_Ocp( VOID )"
        ],
        "DioMng_Main_Iac_Ocp": [
            "VOID\tDioMng_Main_Iac_Ocp( VOID )"
        ]
    },
    "dio_mng_iac.h": {},
    "dio_prm_iac.c": {
        "DioPrm_Set_Inidat_Iac_Ocp": [
            "VOID\tDioPrm_Set_Inidat_Iac_Ocp( VOID )"
        ],
        "DioPrm_Input_Iac_Ocp": [
            "VOID\tDioPrm_Input_Iac_Ocp( VOID )"
        ],
        "DioPrm_Renewal_Pe1_Ocp": [
            "VOID\tDioPrm_Renewal_Pe1_Ocp( VOID )"
        ],
        "DioPrm_Renewal_Pe2_Ocp": [
            "VOID\tDioPrm_Renewal_Pe2_Ocp( VOID )"
        ]
    },
    "dio_prm_iac.h": {},
    "if_dio_iac.c": {},
    "if_dio_iac.h": {
        "IfDio_SetFlg_Pe1_Ocp": [
            "inline\tstatic\tVOID\tIfDio_SetFlg_Pe1_Ocp( const FLAG indat )"
        ],
        "IfDio_GetFlg_Pe1_Ocp": [
            "inline\tstatic\tFLAG\tIfDio_GetFlg_Pe1_Ocp( VOID )"
        ],
        "IfDio_SetFlg_Pe2_Ocp": [
            "inline\tstatic\tVOID\tIfDio_SetFlg_Pe2_Ocp( const FLAG indat )"
        ],
        "IfDio_GetFlg_Pe2_Ocp": [
            "inline\tstatic\tFLAG\tIfDio_GetFlg_Pe2_Ocp( VOID )"
        ]
    },
    "DCCurrsens_Dio.c": {
        "DioMng_Init_Dcdc_Ocp": [
            "VOID\tDioMng_Init_Dcdc_Ocp( VOID )"
        ],
        "DioMng_Main_Dcdc_Ocp": [
            "VOID\tDioMng_Main_Dcdc_Ocp( VOID )"
        ]
    },
    "DCCurrsens_Dio.h": {},
    "dio_ifp_idc.c": {
        "DioIfp_Input_Port_Dcdc_Batt_Ocp": [
            "VOID\tDioIfp_Input_Port_Dcdc_Batt_Ocp( VOID )"
        ],
        "DioIfp_Input_Port_Dcdc_Batt1_Ocp": [
            "VOID\tDioIfp_Input_Port_Dcdc_Batt1_Ocp( VOID )"
        ],
        "DioIfp_Input_Port_Dcdc_Batt2_Ocp": [
            "VOID\tDioIfp_Input_Port_Dcdc_Batt2_Ocp( VOID )"
        ],
        "DioIfp_Input_Port_Dcdc_Batt3_Ocp": [
            "VOID\tDioIfp_Input_Port_Dcdc_Batt3_Ocp( VOID )"
        ],
        "DioIfp_Input_Port_Dcdc_DcLink_Ocp": [
            "VOID\tDioIfp_Input_Port_Dcdc_DcLink_Ocp( VOID )"
        ]
    },
    "dio_ifp_idc.h": {},
    "dio_prm_idc.c": {
        "DioPrm_Set_Inidat_Dcdc_Ocp": [
            "VOID\tDioPrm_Set_Inidat_Dcdc_Ocp( VOID )"
        ],
        "DioPrm_Input_Dcdc_Batt_Ocp": [
            "VOID\tDioPrm_Input_Dcdc_Batt_Ocp( VOID )"
        ],
        "DioPrm_Input_Dcdc_Batt1_Ocp": [
            "VOID\tDioPrm_Input_Dcdc_Batt1_Ocp( VOID )"
        ],
        "DioPrm_Input_Dcdc_Batt2_Ocp": [
            "VOID\tDioPrm_Input_Dcdc_Batt2_Ocp( VOID )"
        ],
        "DioPrm_Input_Dcdc_Batt3_Ocp": [
            "VOID\tDioPrm_Input_Dcdc_Batt3_Ocp( VOID )"
        ],
        "DioPrm_Renewal_Dcdc_Batt_Ocp": [
            "VOID\tDioPrm_Renewal_Dcdc_Batt_Ocp( VOID )"
        ],
        "DioPrm_Renewal_Dcdc_Batt1_Ocp": [
            "VOID\tDioPrm_Renewal_Dcdc_Batt1_Ocp( VOID )"
        ],
        "DioPrm_Renewal_Dcdc_Batt2_Ocp": [
            "VOID\tDioPrm_Renewal_Dcdc_Batt2_Ocp( VOID )"
        ],
        "DioPrm_Renewal_Dcdc_Batt3_Ocp": [
            "VOID\tDioPrm_Renewal_Dcdc_Batt3_Ocp( VOID )"
        ],
        "DioPrm_Input_Dcdc_DcLink_Ocp": [
            "VOID\tDioPrm_Input_Dcdc_DcLink_Ocp( VOID )"
        ],
        "DioPrm_Renewal_Dcdc_DcLink_Ocp": [
            "VOID\tDioPrm_Renewal_Dcdc_DcLink_Ocp( VOID )"
        ]
    },
    "dio_prm_idc.h": {},
    "if_dio_idc.c": {},
    "if_dio_idc.h": {
        "IfDio_SetFlg_Dcdc_Batt_Ocp": [
            "inline\tstatic\tVOID\tIfDio_SetFlg_Dcdc_Batt_Ocp( const FLAG indat )"
        ],
        "IfDio_GetFlg_Dcdc_Batt_Ocp": [
            "inline\tstatic\tFLAG\tIfDio_GetFlg_Dcdc_Batt_Ocp( VOID )"
        ],
        "IfDio_SetFlg_Dcdc_Batt1_Ocp": [
            "inline\tstatic\tVOID\tIfDio_SetFlg_Dcdc_Batt1_Ocp( const FLAG indat )"
        ],
        "IfDio_GetFlg_Dcdc_Batt1_Ocp": [
            "inline\tstatic\tFLAG\tIfDio_GetFlg_Dcdc_Batt1_Ocp( VOID )"
        ],
        "IfDio_SetFlg_Dcdc_Batt2_Ocp": [
            "inline\tstatic\tVOID\tIfDio_SetFlg_Dcdc_Batt2_Ocp( const FLAG indat )"
        ],
        "IfDio_GetFlg_Dcdc_Batt2_Ocp": [
            "inline\tstatic\tFLAG\tIfDio_GetFlg_Dcdc_Batt2_Ocp( VOID )"
        ],
        "IfDio_SetFlg_Dcdc_Batt3_Ocp": [
            "inline\tstatic\tVOID\tIfDio_SetFlg_Dcdc_Batt3_Ocp( const FLAG indat )"
        ],
        "IfDio_GetFlg_Dcdc_Batt3_Ocp": [
            "inline\tstatic\tFLAG\tIfDio_GetFlg_Dcdc_Batt3_Ocp( VOID )"
        ],
        "IfDio_SetFlg_Dcdc_DcLink_Ocp": [
            "inline\tstatic\tVOID\tIfDio_SetFlg_Dcdc_DcLink_Ocp( const FLAG indat )"
        ],
        "IfDio_GetFlg_Dcdc_DcLink_Ocp": [
            "inline\tstatic\tFLAG\tIfDio_GetFlg_Dcdc_DcLink_Ocp( VOID )"
        ]
    },
    "dio_ifp_vdc.c": {
        "DioIfp_Input_Port_Dcdc_Bat_Ovp": [
            "VOID\tDioIfp_Input_Port_Dcdc_Bat_Ovp( VOID )"
        ],
        "DioIfp_Input_Port_Dcdc_DcLink_Ovp": [
            "VOID\tDioIfp_Input_Port_Dcdc_DcLink_Ovp( VOID )"
        ]
    },
    "dio_ifp_vdc.h": {},
    "dio_mng_vdc.c": {
        "DioMng_Init_Vdc": [
            "VOID\tDioMng_Init_Vdc( VOID )"
        ],
        "DioMng_Main_Vdc": [
            "VOID\tDioMng_Main_Vdc( VOID )"
        ],
        "DioMng_Main_Dcdc_Ovp": [
            "static\tVOID\tDioMng_Main_Dcdc_Ovp( VOID )"
        ]
    },
    "dio_mng_vdc.h": {},
    "dio_prm_vdc.c": {
        "DioPrm_Set_Inidat_Pe1Vdc": [
            "VOID\tDioPrm_Set_Inidat_Pe1Vdc( VOID )"
        ],
        "DioPrm_Set_Inidat_Pe2Vdc": [
            "VOID\tDioPrm_Set_Inidat_Pe2Vdc( VOID )"
        ],
        "DioPrm_Renewal_Pe1OvpMon": [
            "VOID\tDioPrm_Renewal_Pe1OvpMon( VOID )"
        ],
        "DioPrm_Renewal_Pe2OvpMon": [
            "VOID\tDioPrm_Renewal_Pe2OvpMon( VOID )"
        ],
        "DioPrm_Input_Dcdc_Bat_Ovp": [
            "VOID\tDioPrm_Input_Dcdc_Bat_Ovp( VOID )"
        ],
        "DioPrm_Renewal_Dcdc_Bat_Ovp": [
            "VOID\tDioPrm_Renewal_Dcdc_Bat_Ovp( VOID )"
        ],
        "DioPrm_Input_Dcdc_DcLink_Ovp": [
            "VOID\tDioPrm_Input_Dcdc_DcLink_Ovp( VOID )"
        ],
        "DioPrm_Renewal_Dcdc_DcLink_Ovp": [
            "VOID\tDioPrm_Renewal_Dcdc_DcLink_Ovp( VOID )"
        ]
    },
    "dio_prm_vdc.h": {},
    "if_dio_vdc.c": {},
    "if_dio_vdc.h": {
        "IfDio_SetFlg_DcDc_Bat_Ovp": [
            "inline static\tVOID\tIfDio_SetFlg_DcDc_Bat_Ovp( const FLAG indat )"
        ],
        "IfDio_GetFlg_DcDc_Bat_Ovp": [
            "inline static\tFLAG\tIfDio_GetFlg_DcDc_Bat_Ovp( VOID )"
        ],
        "IfDio_SetFlg_DcDc_Link_Ovp": [
            "inline static\tVOID\tIfDio_SetFlg_DcDc_Link_Ovp( const FLAG indat )"
        ],
        "IfDio_GetFlg_DcDc_Link_Ovp": [
            "inline static\tFLAG\tIfDio_GetFlg_DcDc_Link_Ovp( VOID )"
        ]
    },
    "DCVoltageAbstr_MemMap.h": {},
    "Rte_DCVoltageAbstr.h": {},
    "Rte_DCVoltageAbstr_Type.h": {},
    "VoltageSensorAbstr_Dio.c": {
        "DCVoltageAbstr_Init": [
            "void DCVoltageAbstr_Init(void)"
        ],
        "DCVoltageAbstr_Main": [
            "void DCVoltageAbstr_Main(void)"
        ]
    },
    "VoltageSensorAbstr_Dio.h": {},
    "fs_cfg.c": {
        "FsFsInit_Sec_CntInc": [
            "VOID\tFsFsInit_Sec_CntInc( VOID )"
        ],
        "FsFsInit_PreFSEndproc": [
            "static VOID\tFsFsInit_PreFSEndproc( VOID )"
        ],
        "FsFsCfgInit": [
            "VOID\tFsFsCfgInit( VOID )"
        ]
    },
    "fs_fsm_cstm.c": {
        "FsFsm_Set_Inidat": [
            "VOID\tFsFsm_Set_Inidat( VOID )"
        ],
        "FsFsm_Proc_MaskOffAct": [
            "VOID\tFsFsm_Proc_MaskOffAct( const USHORT sid, const USHORT actinfo, const UCHAR fs_evt )"
        ],
        "FsFsm_Set_Fs_Detect": [
            "VOID\tFsFsm_Set_Fs_Detect( const USHORT sid )"
        ],
        "FsFsm_Clear_Fs_Detect": [
            "VOID\tFsFsm_Clear_Fs_Detect( const USHORT sid )"
        ],
        "FsFsm_Set_Fs_ErrFix": [
            "VOID\tFsFsm_Set_Fs_ErrFix( const USHORT sid )"
        ],
        "FsFsm_Request_FsAllClr": [
            "VOID\tFsFsm_Request_FsAllClr( VOID )"
        ],
        "FsFsm_Get_FsCode_Dtch": [
            "UCHAR\tFsFsm_Get_FsCode_Dtch( const USHORT sid )"
        ],
        "FsFsm_Get_FsCode_Dtcm": [
            "UCHAR\tFsFsm_Get_FsCode_Dtcm( const USHORT sid )"
        ],
        "FsFsm_Get_FsCode_Dtcl": [
            "UCHAR\tFsFsm_Get_FsCode_Dtcl( const USHORT sid )"
        ],
        "FsFsm_Get_Wlp": [
            "FLAG\tFsFsm_Get_Wlp( const USHORT sid )"
        ],
        "FsFsm_Judge_FsCpuResWork": [
            "FLAG\tFsFsm_Judge_FsCpuResWork( VOID )"
        ]
    },
    "fs_fsm_cstm.h": {},
    "fs_fsm_sp_cstm.c": {
        "FsFsmSp_Proc_MaskOffAct": [
            "VOID\tFsFsmSp_Proc_MaskOffAct( const USHORT sid, const USHORT actinfo, const UCHAR fs_evt, const UCHAR fsclr_sts, const UCHAR func_id )"
        ],
        "FsFsmSp_Set_Fs_Judg": [
            "VOID\tFsFsmSp_Set_Fs_Judg( const USHORT sid )"
        ],
        "FsFsmSp_Set_Fs_Detect": [
            "VOID\tFsFsmSp_Set_Fs_Detect( const USHORT sid )"
        ],
        "FsFsmSp_Clear_Fs_DetectEntry": [
            "VOID\tFsFsmSp_Clear_Fs_DetectEntry( const USHORT sid )"
        ],
        "FsFsmSp_Clear_Fs_DetectDo": [
            "VOID\tFsFsmSp_Clear_Fs_DetectDo( const USHORT cnt_sid )"
        ],
        "FsFsmSp_Clear_Fs_DetectExit": [
            "VOID\tFsFsmSp_Clear_Fs_DetectExit( const USHORT sid )"
        ],
        "FsFsmSp_Set_Fs_ErrFix": [
            "VOID\tFsFsmSp_Set_Fs_ErrFix( const USHORT sid )"
        ],
        "FsFsmSp_Request_FsClr": [
            "VOID\tFsFsmSp_Request_FsClr( VOID )"
        ],
        "FsFsmSp_Request_FsAllClr": [
            "VOID\tFsFsmSp_Request_FsAllClr( VOID )"
        ],
        "FsFsmSp_Set_Errlvl": [
            "VOID\tFsFsmSp_Set_Errlvl( const USHORT err_lvl )"
        ],
        "FsFsmSp_Set_IghOnNg": [
            "VOID\tFsFsmSp_Set_IghOnNg( VOID )"
        ]
    },
    "fs_fsm_sp_cstm.h": {},
    "fs_fs_bat_cstm.c": {
        "FsFsBat_MonBEehwB12VoltOutRngHi": [
            "VOID\tFsFsBat_MonBEehwB12VoltOutRngHi(VOID)"
        ],
        "FsFsBat_MonBEehwB12VoltOutRngLo": [
            "VOID\tFsFsBat_MonBEehwB12VoltOutRngLo(VOID)"
        ],
        "FsFsBat_MonBEehwPwrSply5vascVoltOutRngHi": [
            "VOID\tFsFsBat_MonBEehwPwrSply5vascVoltOutRngHi( VOID )"
        ],
        "FsFsBat_MonBEehwPwrSply5vascVoltOutRngLo": [
            "VOID\tFsFsBat_MonBEehwPwrSply5vascVoltOutRngLo( VOID )"
        ],
        "FsFsBat_MonBEehwPwrSply5vascrdVoltOutRngHi": [
            "VOID\tFsFsBat_MonBEehwPwrSply5vascrdVoltOutRngHi( VOID )"
        ],
        "FsFsBat_MonBEehwPwrSply5vascrdVoltOutRngLo": [
            "VOID\tFsFsBat_MonBEehwPwrSply5vascrdVoltOutRngLo( VOID )"
        ],
        "FsFsBat_MonBEehwPwrSply5vhvVoltOutRngHi": [
            "VOID\tFsFsBat_MonBEehwPwrSply5vhvVoltOutRngHi( VOID )"
        ],
        "FsFsBat_MonBEehwPwrSply5vhvVoltOutRngLo": [
            "VOID\tFsFsBat_MonBEehwPwrSply5vhvVoltOutRngLo( VOID )"
        ],
        "FsFsBat_MonBEehwPwrSplyDcdc5vdVoltOutRngHi": [
            "VOID\tFsFsBat_MonBEehwPwrSplyDcdc5vdVoltOutRngHi( VOID )"
        ],
        "FsFsBat_MonBEehwPwrSplyDcdc5vdVoltOutRngLo": [
            "VOID\tFsFsBat_MonBEehwPwrSplyDcdc5vdVoltOutRngLo( VOID )"
        ],
        "FsFsBat_MonBEehwPwrSplyDcdc5va1VoltOutRngHi": [
            "VOID\tFsFsBat_MonBEehwPwrSplyDcdc5va1VoltOutRngHi( VOID )"
        ],
        "FsFsBat_MonBEehwPwrSplyDcdc5va1VoltOutRngLo": [
            "VOID\tFsFsBat_MonBEehwPwrSplyDcdc5va1VoltOutRngLo( VOID )"
        ],
        "FsFsBat_MonBEehwPwrSplyDcdc5va2VoltOutRngHi": [
            "VOID\tFsFsBat_MonBEehwPwrSplyDcdc5va2VoltOutRngHi( VOID )"
        ],
        "FsFsBat_MonBEehwPwrSplyDcdc5va2VoltOutRngLo": [
            "VOID\tFsFsBat_MonBEehwPwrSplyDcdc5va2VoltOutRngLo( VOID )"
        ],
        "FsFsBat_MonBEehwPwrSply5vascVoltShoSply": [
            "VOID\tFsFsBat_MonBEehwPwrSply5vascVoltShoSply( VOID )"
        ],
        "FsFsBat_MonBEehwPwrSply5vascVoltShoGnd": [
            "VOID\tFsFsBat_MonBEehwPwrSply5vascVoltShoGnd( VOID )"
        ],
        "FsFsBat_MonBEehwPwrSply5vascrdVoltShoSply": [
            "VOID\tFsFsBat_MonBEehwPwrSply5vascrdVoltShoSply( VOID )"
        ],
        "FsFsBat_MonBEehwPwrSply5vascrdVoltShoGnd": [
            "VOID\tFsFsBat_MonBEehwPwrSply5vascrdVoltShoGnd( VOID )"
        ],
        "FsFsBat_MonBEehwPwrSply5vhvVoltShoSply": [
            "VOID\tFsFsBat_MonBEehwPwrSply5vhvVoltShoSply( VOID )"
        ],
        "FsFsBat_MonBEehwPwrSply5vhvVoltShoGnd": [
            "VOID\tFsFsBat_MonBEehwPwrSply5vhvVoltShoGnd( VOID )"
        ],
        "FsFsBat_MonBEehwPwrSplyDcdc5vdVoltShoSply": [
            "VOID\tFsFsBat_MonBEehwPwrSplyDcdc5vdVoltShoSply( VOID )"
        ],
        "FsFsBat_MonBEehwPwrSplyDcdc5vdVoltShoGnd": [
            "VOID\tFsFsBat_MonBEehwPwrSplyDcdc5vdVoltShoGnd( VOID )"
        ],
        "FsFsBat_MonBEehwPwrSplyDcdc5va1VoltShoSply": [
            "VOID\tFsFsBat_MonBEehwPwrSplyDcdc5va1VoltShoSply( VOID )"
        ],
        "FsFsBat_MonBEehwPwrSplyDcdc5va1VoltShoGnd": [
            "VOID\tFsFsBat_MonBEehwPwrSplyDcdc5va1VoltShoGnd( VOID )"
        ],
        "FsFsBat_MonBEehwPwrSplyDcdc5va2VoltShoSply": [
            "VOID\tFsFsBat_MonBEehwPwrSplyDcdc5va2VoltShoSply( VOID )"
        ],
        "FsFsBat_MonBEehwPwrSplyDcdc5va2VoltShoGnd": [
            "VOID\tFsFsBat_MonBEehwPwrSplyDcdc5va2VoltShoGnd( VOID )"
        ],
        "FsFsBatDebounce": [
            "VOID\tFsFsBatDebounce( FLAG af_judge, UCHAR* ap_status, UCHAR* ap_DTCT_ERR, const UCHAR ac_DTCT_ERR )"
        ],
        "FsFsBatInit": [
            "VOID\tFsFsBatInit( VOID )"
        ]
    },
    "fs_fs_bat_cstm.h": {},
    "fs_fs_cur_cstm.c": {
        "FsFsCur_Check_Pe1CurSum": [
            "VOID\tFsFsCur_Check_Pe1CurSum( VOID )"
        ],
        "FsFsCur_Check_Pe2CurSum": [
            "VOID\tFsFsCur_Check_Pe2CurSum( VOID )"
        ],
        "FsFsCur_MonBSen7Pe1PhaseUVoltShoSply": [
            "VOID\tFsFsCur_MonBSen7Pe1PhaseUVoltShoSply( VOID )"
        ],
        "FsFsCur_MonBSen7Pe1PhaseUVoltShoGnd": [
            "VOID\tFsFsCur_MonBSen7Pe1PhaseUVoltShoGnd( VOID )"
        ],
        "FsFsCur_MonBSen7Pe1PhaseVVoltShoSply": [
            "VOID\tFsFsCur_MonBSen7Pe1PhaseVVoltShoSply( VOID )"
        ],
        "FsFsCur_MonBSen7Pe1PhaseVVoltShoGnd": [
            "VOID\tFsFsCur_MonBSen7Pe1PhaseVVoltShoGnd( VOID )"
        ],
        "FsFsCur_MonBSen7Pe1PhaseWVoltShoSply": [
            "VOID\tFsFsCur_MonBSen7Pe1PhaseWVoltShoSply( VOID )"
        ],
        "FsFsCur_MonBSen7Pe1PhaseWVoltShoGnd": [
            "VOID\tFsFsCur_MonBSen7Pe1PhaseWVoltShoGnd( VOID )"
        ],
        "FsFsCur_MonBSen7Pe1MultiPhaseVoltShoCirc": [
            "VOID\tFsFsCur_MonBSen7Pe1MultiPhaseVoltShoCirc( VOID )"
        ],
        "FsFsCur_MonBSen7Pe1BalanceSumCurrRatnlt": [
            "VOID\tFsFsCur_MonBSen7Pe1BalanceSumCurrRatnlt( VOID )"
        ],
        "FsFsCur_MonBSen7Pe2PhaseUVoltShoSply": [
            "VOID\tFsFsCur_MonBSen7Pe2PhaseUVoltShoSply( VOID )"
        ],
        "FsFsCur_MonBSen7Pe2PhaseUVoltShoGnd": [
            "VOID\tFsFsCur_MonBSen7Pe2PhaseUVoltShoGnd( VOID )"
        ],
        "FsFsCur_MonBSen7Pe2PhaseVVoltShoSply": [
            "VOID\tFsFsCur_MonBSen7Pe2PhaseVVoltShoSply( VOID )"
        ],
        "FsFsCur_MonBSen7Pe2PhaseVVoltShoGnd": [
            "VOID\tFsFsCur_MonBSen7Pe2PhaseVVoltShoGnd( VOID )"
        ],
        "FsFsCur_MonBSen7Pe2PhaseWVoltShoSply": [
            "VOID\tFsFsCur_MonBSen7Pe2PhaseWVoltShoSply( VOID )"
        ],
        "FsFsCur_MonBSen7Pe2PhaseWVoltShoGnd": [
            "VOID\tFsFsCur_MonBSen7Pe2PhaseWVoltShoGnd( VOID )"
        ],
        "FsFsCur_MonBSen7Pe2MultiPhaseVoltShoCirc": [
            "VOID\tFsFsCur_MonBSen7Pe2MultiPhaseVoltShoCirc( VOID )"
        ],
        "FsFsCur_MonBSen7Pe2BalanceSumCurrRatnlt": [
            "VOID\tFsFsCur_MonBSen7Pe2BalanceSumCurrRatnlt( VOID )"
        ],
        "FsFsCur_MonBProtPe1PhaseUCurrOutLimHi": [
            "VOID\tFsFsCur_MonBProtPe1PhaseUCurrOutLimHi( VOID )"
        ],
        "FsFsCur_MonBProtPe2PhaseUCurrOutLimHi": [
            "VOID\tFsFsCur_MonBProtPe2PhaseUCurrOutLimHi( VOID )"
        ],
        "FsFsCur_MonBSen5DcConPhaseAVoltShoSply": [
            "VOID\tFsFsCur_MonBSen5DcConPhaseAVoltShoSply( VOID )"
        ],
        "FsFsCur_MonBSen5DcConPhaseAVoltShoGnd": [
            "VOID\tFsFsCur_MonBSen5DcConPhaseAVoltShoGnd( VOID )"
        ],
        "FsFsCur_MonBSen5DcConPhaseBVoltShoSply": [
            "VOID\tFsFsCur_MonBSen5DcConPhaseBVoltShoSply( VOID )"
        ],
        "FsFsCur_MonBSen5DcConPhaseBVoltShoGnd": [
            "VOID\tFsFsCur_MonBSen5DcConPhaseBVoltShoGnd( VOID )"
        ],
        "FsFsCur_MonBSen5DcConPhaseCVoltShoSply": [
            "VOID\tFsFsCur_MonBSen5DcConPhaseCVoltShoSply( VOID )"
        ],
        "FsFsCur_MonBSen5DcConPhaseCVoltShoGnd": [
            "VOID\tFsFsCur_MonBSen5DcConPhaseCVoltShoGnd( VOID )"
        ],
        "FsFsCur_MonBProtDcConSumCurrOutLimHi": [
            "VOID\tFsFsCur_MonBProtDcConSumCurrOutLimHi( VOID )"
        ],
        "FsFsCur_MonBSen6DcLinkVoltShoSply": [
            "VOID\tFsFsCur_MonBSen6DcLinkVoltShoSply( VOID )"
        ],
        "FsFsCur_MonBSen6DcLinkVoltShoGnd": [
            "VOID\tFsFsCur_MonBSen6DcLinkVoltShoGnd( VOID )"
        ],
        "FsFsCur_MonBProtDcLinkSumCurrOutLimHi": [
            "VOID\tFsFsCur_MonBProtDcLinkSumCurrOutLimHi( VOID )"
        ],
        "FsFsCur_MonBSen7Pe1PhaseUCurrOutRngHi": [
            "VOID\tFsFsCur_MonBSen7Pe1PhaseUCurrOutRngHi( VOID )"
        ],
        "FsFsCur_MonBSen7Pe1PhaseVCurrOutRngHi": [
            "VOID\tFsFsCur_MonBSen7Pe1PhaseVCurrOutRngHi( VOID )"
        ],
        "FsFsCur_MonBSen7Pe1PhaseWCurrOutRngHi": [
            "VOID\tFsFsCur_MonBSen7Pe1PhaseWCurrOutRngHi( VOID )"
        ],
        "FsFsCur_MonBSen7Pe1PhaseUCurrOutRngLo": [
            "VOID\tFsFsCur_MonBSen7Pe1PhaseUCurrOutRngLo( VOID )"
        ],
        "FsFsCur_MonBSen7Pe1PhaseVCurrOutRngLo": [
            "VOID\tFsFsCur_MonBSen7Pe1PhaseVCurrOutRngLo( VOID )"
        ],
        "FsFsCur_MonBSen7Pe1PhaseWCurrOutRngLo": [
            "VOID\tFsFsCur_MonBSen7Pe1PhaseWCurrOutRngLo( VOID )"
        ],
        "FsFsCur_MonBSen7Pe2PhaseUCurrOutRngHi": [
            "VOID\tFsFsCur_MonBSen7Pe2PhaseUCurrOutRngHi( VOID )"
        ],
        "FsFsCur_MonBSen7Pe2PhaseVCurrOutRngHi": [
            "VOID\tFsFsCur_MonBSen7Pe2PhaseVCurrOutRngHi( VOID )"
        ],
        "FsFsCur_MonBSen7Pe2PhaseWCurrOutRngHi": [
            "VOID\tFsFsCur_MonBSen7Pe2PhaseWCurrOutRngHi( VOID )"
        ],
        "FsFsCur_MonBSen7Pe2PhaseUCurrOutRngLo": [
            "VOID\tFsFsCur_MonBSen7Pe2PhaseUCurrOutRngLo( VOID )"
        ],
        "FsFsCur_MonBSen7Pe2PhaseVCurrOutRngLo": [
            "VOID\tFsFsCur_MonBSen7Pe2PhaseVCurrOutRngLo( VOID )"
        ],
        "FsFsCur_MonBSen7Pe2PhaseWCurrOutRngLo": [
            "VOID\tFsFsCur_MonBSen7Pe2PhaseWCurrOutRngLo( VOID )"
        ],
        "FsFsCur_MonBSen5DcConPhaseACurrOutRngHi": [
            "VOID\tFsFsCur_MonBSen5DcConPhaseACurrOutRngHi( VOID )"
        ],
        "FsFsCur_MonBSen5DcConPhaseBCurrOutRngHi": [
            "VOID\tFsFsCur_MonBSen5DcConPhaseBCurrOutRngHi( VOID )"
        ],
        "FsFsCur_MonBSen5DcConPhaseCCurrOutRngHi": [
            "VOID\tFsFsCur_MonBSen5DcConPhaseCCurrOutRngHi( VOID )"
        ],
        "FsFsCur_MonBSen5DcConPhaseACurrOutRngLo": [
            "VOID\tFsFsCur_MonBSen5DcConPhaseACurrOutRngLo( VOID )"
        ],
        "FsFsCur_MonBSen5DcConPhaseBCurrOutRngLo": [
            "VOID\tFsFsCur_MonBSen5DcConPhaseBCurrOutRngLo( VOID )"
        ],
        "FsFsCur_MonBSen5DcConPhaseCCurrOutRngLo": [
            "VOID\tFsFsCur_MonBSen5DcConPhaseCCurrOutRngLo( VOID )"
        ],
        "FsFsCur_MonBSen6DcLinkCurrOutRngHi": [
            "VOID\tFsFsCur_MonBSen6DcLinkCurrOutRngHi( VOID )"
        ],
        "FsFsCur_MonBSen6DcLinkCurrOutRngLo": [
            "VOID\tFsFsCur_MonBSen6DcLinkCurrOutRngLo( VOID )"
        ],
        "FsFsCur_MonBProtPe1PhaseVCurrOutLimHi": [
            "VOID\tFsFsCur_MonBProtPe1PhaseVCurrOutLimHi( VOID )"
        ],
        "FsFsCur_MonBProtPe1PhaseWCurrOutLimHi": [
            "VOID\tFsFsCur_MonBProtPe1PhaseWCurrOutLimHi( VOID )"
        ],
        "FsFsCur_MonBProtPe2PhaseVCurrOutLimHi": [
            "VOID\tFsFsCur_MonBProtPe2PhaseVCurrOutLimHi( VOID )"
        ],
        "FsFsCur_MonBProtPe2PhaseWCurrOutLimHi": [
            "VOID\tFsFsCur_MonBProtPe2PhaseWCurrOutLimHi( VOID )"
        ],
        "FsFsCur_MonBSen5DcConPhaseACurrRatnltHi": [
            "VOID\tFsFsCur_MonBSen5DcConPhaseACurrRatnltHi( VOID )"
        ],
        "FsFsCur_MonBSen5DcConPhaseBCurrRatnltHi": [
            "VOID\tFsFsCur_MonBSen5DcConPhaseBCurrRatnltHi( VOID )"
        ],
        "FsFsCur_MonBSen5DcConPhaseCCurrRatnltHi": [
            "VOID\tFsFsCur_MonBSen5DcConPhaseCCurrRatnltHi( VOID )"
        ],
        "FsFsCur_MonBSen5DcConPhaseACurrRatnltLo": [
            "VOID\tFsFsCur_MonBSen5DcConPhaseACurrRatnltLo( VOID )"
        ],
        "FsFsCur_MonBSen5DcConPhaseBCurrRatnltLo": [
            "VOID\tFsFsCur_MonBSen5DcConPhaseBCurrRatnltLo( VOID )"
        ],
        "FsFsCur_MonBSen5DcConPhaseCCurrRatnltLo": [
            "VOID\tFsFsCur_MonBSen5DcConPhaseCCurrRatnltLo( VOID )"
        ],
        "FsFsCur_MonBSen5DcConPhaseACurrIntm": [
            "VOID\tFsFsCur_MonBSen5DcConPhaseACurrIntm( VOID )"
        ],
        "FsFsCur_MonBSen5DcConPhaseBCurrIntm": [
            "VOID\tFsFsCur_MonBSen5DcConPhaseBCurrIntm( VOID )"
        ],
        "FsFsCur_MonBSen5DcConPhaseCCurrIntm": [
            "VOID\tFsFsCur_MonBSen5DcConPhaseCCurrIntm( VOID )"
        ],
        "FsFsCur_MonBSen6DcLinkCurrRatnltHi": [
            "VOID\tFsFsCur_MonBSen6DcLinkCurrRatnltHi( VOID )"
        ],
        "FsFsCur_MonBSen6DcLinkCurrRatnltLo": [
            "VOID\tFsFsCur_MonBSen6DcLinkCurrRatnltLo( VOID )"
        ],
        "FsFsCur_MonBSen7Pe1PhaseUCurrIntm": [
            "VOID\tFsFsCur_MonBSen7Pe1PhaseUCurrIntm( VOID )"
        ],
        "FsFsCur_MonBSen7Pe1PhaseVCurrIntm": [
            "VOID\tFsFsCur_MonBSen7Pe1PhaseVCurrIntm( VOID )"
        ],
        "FsFsCur_MonBSen7Pe1PhaseWCurrIntm": [
            "VOID\tFsFsCur_MonBSen7Pe1PhaseWCurrIntm( VOID )"
        ],
        "FsFsCur_MonBSen7Pe2PhaseUCurrIntm": [
            "VOID\tFsFsCur_MonBSen7Pe2PhaseUCurrIntm( VOID )"
        ],
        "FsFsCur_MonBSen7Pe2PhaseVCurrIntm": [
            "VOID\tFsFsCur_MonBSen7Pe2PhaseVCurrIntm( VOID )"
        ],
        "FsFsCur_MonBSen7Pe2PhaseWCurrIntm": [
            "VOID\tFsFsCur_MonBSen7Pe2PhaseWCurrIntm( VOID )"
        ],
        "FsFsCur_MonBSen6DcLinkCurrIntm": [
            "VOID\tFsFsCur_MonBSen6DcLinkCurrIntm( VOID )"
        ],
        "FsFsCur_MonBProtDcConPhaseACurrOutLimHi": [
            "VOID\tFsFsCur_MonBProtDcConPhaseACurrOutLimHi( VOID )"
        ],
        "FsFsCur_MonBProtDcConPhaseBCurrOutLimHi": [
            "VOID\tFsFsCur_MonBProtDcConPhaseBCurrOutLimHi( VOID )"
        ],
        "FsFsCur_MonBProtDcConPhaseCCurrOutLimHi": [
            "VOID\tFsFsCur_MonBProtDcConPhaseCCurrOutLimHi( VOID )"
        ],
        "FsFsCur_MonBProtHwDcConPhaseACurrOutLimHi": [
            "VOID\tFsFsCur_MonBProtHwDcConPhaseACurrOutLimHi( VOID )"
        ],
        "FsFsCur_MonBProtHwDcConPhaseBCurrOutLimHi": [
            "VOID\tFsFsCur_MonBProtHwDcConPhaseBCurrOutLimHi( VOID )"
        ],
        "FsFsCur_MonBProtHwDcConPhaseCCurrOutLimHi": [
            "VOID\tFsFsCur_MonBProtHwDcConPhaseCCurrOutLimHi( VOID )"
        ],
        "FsFsCur_MonBProtHwDcLinkSumCurrOutLimHi": [
            "VOID\tFsFsCur_MonBProtHwDcLinkSumCurrOutLimHi( VOID )"
        ],
        "FsFsCur_MonBSen6DcLinkMdlCurrRatnltHi": [
            "VOID\tFsFsCur_MonBSen6DcLinkMdlCurrRatnltHi( VOID )"
        ],
        "FsFsCur_MonBSen6DcLinkMdlCurrRatnltLo": [
            "VOID\tFsFsCur_MonBSen6DcLinkMdlCurrRatnltLo( VOID )"
        ],
        "FsFsCurDebounce": [
            "VOID\tFsFsCurDebounce( FLAG af_judge, UCHAR* ap_status, UCHAR* ap_DTCT_ERR, const UCHAR ac_DTCT_ERR )"
        ],
        "FsFsCurIntmDebounce": [
            "VOID\tFsFsCurIntmDebounce( FLAG af_judge, UCHAR* ap_status, UCHAR* ap_DTCT_ERR, const UCHAR ac_DTCT_ERR, UCHAR* ap_DTCT_LIM, const UCHAR ac_DTCT_LIM )"
        ],
        "FsFsCurInit": [
            "VOID\tFsFsCurInit( VOID )"
        ]
    },
    "fs_fs_cur_cstm.h": {},
    "fs_fs_dcdc.c": {
        "FsFsDcdc_MonBEehwDcdcGateDrvPhaseAHiStsGenFlt": [
            "VOID\tFsFsDcdc_MonBEehwDcdcGateDrvPhaseAHiStsGenFlt( VOID )"
        ],
        "FsFsDcdc_MonBEehwDcdcGateDrvPhaseALoStsGenFlt": [
            "VOID\tFsFsDcdc_MonBEehwDcdcGateDrvPhaseALoStsGenFlt( VOID )"
        ],
        "FsFsDcdc_MonBEehwDcdcGateDrvPhaseBHiStsGenFlt": [
            "VOID\tFsFsDcdc_MonBEehwDcdcGateDrvPhaseBHiStsGenFlt( VOID )"
        ],
        "FsFsDcdc_MonBEehwDcdcGateDrvPhaseBLoStsGenFlt": [
            "VOID\tFsFsDcdc_MonBEehwDcdcGateDrvPhaseBLoStsGenFlt( VOID )"
        ],
        "FsFsDcdc_MonBEehwDcdcGateDrvPhaseCHiStsGenFlt": [
            "VOID\tFsFsDcdc_MonBEehwDcdcGateDrvPhaseCHiStsGenFlt( VOID )"
        ],
        "FsFsDcdc_MonBEehwDcdcGateDrvPhaseCLoStsGenFlt": [
            "VOID\tFsFsDcdc_MonBEehwDcdcGateDrvPhaseCLoStsGenFlt( VOID )"
        ],
        "FsFsDcdcDebounce": [
            "VOID\tFsFsDcdcDebounce( FLAG af_judge, UCHAR* ap_status, UCHAR* ap_DTCT_ERR, const UCHAR ac_DTCT_ERR )"
        ],
        "FsFsDcdcInit": [
            "VOID\tFsFsDcdcInit(VOID)"
        ]
    },
    "fs_fs_dcdc.h": {},
    "fs_fs_hw_cstm.c": {
        "FsFsHw_Check_IgbtFlt": [
            "VOID\tFsFsHw_Check_IgbtFlt( VOID )"
        ],
        "FsFsHw_Check_Pe1IgbtFlt1": [
            "VOID\tFsFsHw_Check_Pe1IgbtFlt1( VOID )"
        ],
        "FsFsHw_Check_Pe1IgbtFlt2": [
            "VOID\tFsFsHw_Check_Pe1IgbtFlt2( VOID )"
        ],
        "FsFsHw_Check_Pe1IgbtFlt3": [
            "VOID\tFsFsHw_Check_Pe1IgbtFlt3( VOID )"
        ],
        "FsFsHw_Check_Pe1IgbtFlt4": [
            "VOID\tFsFsHw_Check_Pe1IgbtFlt4( VOID )"
        ],
        "FsFsHw_Check_Pe1IgbtFlt5": [
            "VOID\tFsFsHw_Check_Pe1IgbtFlt5( VOID )"
        ],
        "FsFsHw_Check_Pe1IgbtFlt6": [
            "VOID\tFsFsHw_Check_Pe1IgbtFlt6( VOID )"
        ],
        "FsFsHw_Check_Pe2IgbtFlt1": [
            "VOID\tFsFsHw_Check_Pe2IgbtFlt1( VOID )"
        ],
        "FsFsHw_Check_Pe2IgbtFlt2": [
            "VOID\tFsFsHw_Check_Pe2IgbtFlt2( VOID )"
        ],
        "FsFsHw_Check_Pe2IgbtFlt3": [
            "VOID\tFsFsHw_Check_Pe2IgbtFlt3( VOID )"
        ],
        "FsFsHw_Check_Pe2IgbtFlt4": [
            "VOID\tFsFsHw_Check_Pe2IgbtFlt4( VOID )"
        ],
        "FsFsHw_Check_Pe2IgbtFlt5": [
            "VOID\tFsFsHw_Check_Pe2IgbtFlt5( VOID )"
        ],
        "FsFsHw_Check_Pe2IgbtFlt6": [
            "VOID\tFsFsHw_Check_Pe2IgbtFlt6( VOID )"
        ]
    },
    "fs_fs_hw_cstm.h": {},
    "fs_fs_motc.c": {
        "FsFsMotc_MonBSafPe1IgbtPeOnNoPwmStsFltUexptdIndcd": [
            "VOID\tFsFsMotc_MonBSafPe1IgbtPeOnNoPwmStsFltUexptdIndcd( VOID )"
        ],
        "FsFsMotc_MonBSafPe1IgbtPeOffErrNoPwmStsFltUexptdNotIndcd": [
            "VOID\tFsFsMotc_MonBSafPe1IgbtPeOffErrNoPwmStsFltUexptdNotIndcd( VOID )"
        ],
        "FsFsMotc_MonBSafPe1IgbtPeOffErrNoPwmStsFltUexptdNotIndcd_A": [
            "static FLAG\tFsFsMotc_MonBSafPe1IgbtPeOffErrNoPwmStsFltUexptdNotIndcd_A( VOID )"
        ],
        "FsFsMotc_MonBSafPe1IgbtPeOffErrNoPwmStsFltUexptdNotIndcd_B": [
            "static FLAG\tFsFsMotc_MonBSafPe1IgbtPeOffErrNoPwmStsFltUexptdNotIndcd_B( VOID )"
        ],
        "FsFsMotc_MonBSafPe1IgbtPeOnHiSideErrCurrUexptdOn": [
            "VOID\tFsFsMotc_MonBSafPe1IgbtPeOnHiSideErrCurrUexptdOn( VOID )"
        ],
        "FsFsMotc_MonBSafPe2IgbtPeOnHiSideErrCurrUexptdOn": [
            "VOID\tFsFsMotc_MonBSafPe2IgbtPeOnHiSideErrCurrUexptdOn( VOID )"
        ],
        "FsFsMotc_MonBSafPe1IgbtHiSideOffCurrUexptdOn": [
            "VOID\tFsFsMotc_MonBSafPe1IgbtHiSideOffCurrUexptdOn( VOID )"
        ],
        "FsFsMotc_MonBSafPe1IgbtPeOnCurrUexptdOff": [
            "VOID\tFsFsMotc_MonBSafPe1IgbtPeOnCurrUexptdOff( VOID )"
        ],
        "FsFsMotc_MonBSafPe1IgbtPeOnNoPwmLoStsFltUexptdIndcd": [
            "VOID\tFsFsMotc_MonBSafPe1IgbtPeOnNoPwmLoStsFltUexptdIndcd( VOID )"
        ],
        "FsFsMotc_MonBSafPe1IgbtPeOnNoPwmHiStsFltUexptdIndcd": [
            "VOID\tFsFsMotc_MonBSafPe1IgbtPeOnNoPwmHiStsFltUexptdIndcd( VOID )"
        ],
        "FsFsMotc_MonBEehwPe1IgbtGateDrvUStsGenFlt": [
            "VOID\tFsFsMotc_MonBEehwPe1IgbtGateDrvUStsGenFlt( VOID )"
        ],
        "FsFsMotc_MonBEehwPe1IgbtGateDrvVStsGenFlt": [
            "VOID\tFsFsMotc_MonBEehwPe1IgbtGateDrvVStsGenFlt( VOID )"
        ],
        "FsFsMotc_MonBEehwPe1IgbtGateDrvWStsGenFlt": [
            "VOID\tFsFsMotc_MonBEehwPe1IgbtGateDrvWStsGenFlt( VOID )"
        ],
        "FsFsMotc_MonBEehwPe1IgbtGateDrvXStsGenFlt": [
            "VOID\tFsFsMotc_MonBEehwPe1IgbtGateDrvXStsGenFlt( VOID )"
        ],
        "FsFsMotc_MonBEehwPe1IgbtGateDrvYStsGenFlt": [
            "VOID\tFsFsMotc_MonBEehwPe1IgbtGateDrvYStsGenFlt( VOID )"
        ],
        "FsFsMotc_MonBEehwPe1IgbtGateDrvZStsGenFlt": [
            "VOID\tFsFsMotc_MonBEehwPe1IgbtGateDrvZStsGenFlt( VOID )"
        ],
        "FsFsMotc_MonBSafPe2IgbtPeOnNoPwmStsFltUexptdIndcd": [
            "VOID\tFsFsMotc_MonBSafPe2IgbtPeOnNoPwmStsFltUexptdIndcd( VOID )"
        ],
        "FsFsMotc_MonBSafPe2IgbtPeOffErrNoPwmStsFltUexptdNotIndcd": [
            "VOID\tFsFsMotc_MonBSafPe2IgbtPeOffErrNoPwmStsFltUexptdNotIndcd( VOID )"
        ],
        "FsFsMotc_MonBSafPe2IgbtPeOffErrNoPwmStsFltUexptdNotIndcd_A": [
            "static FLAG\tFsFsMotc_MonBSafPe2IgbtPeOffErrNoPwmStsFltUexptdNotIndcd_A( VOID )"
        ],
        "FsFsMotc_MonBSafPe2IgbtPeOffErrNoPwmStsFltUexptdNotIndcd_B": [
            "static FLAG\tFsFsMotc_MonBSafPe2IgbtPeOffErrNoPwmStsFltUexptdNotIndcd_B( VOID )"
        ],
        "FsFsMotc_MonBSafPe1IgbtPeOnLoSideErrCurrUexptdOn": [
            "VOID\tFsFsMotc_MonBSafPe1IgbtPeOnLoSideErrCurrUexptdOn( VOID )"
        ],
        "FsFsMotc_MonBSafPe2IgbtPeOnLoSideErrCurrUexptdOn": [
            "VOID\tFsFsMotc_MonBSafPe2IgbtPeOnLoSideErrCurrUexptdOn( VOID )"
        ],
        "FsFsMotc_MonBSafPe2IgbtHiSideOffCurrUexptdOn": [
            "VOID\tFsFsMotc_MonBSafPe2IgbtHiSideOffCurrUexptdOn( VOID )"
        ],
        "FsFsMotc_MonBSafPe2IgbtPeOnCurrUexptdOff": [
            "VOID\tFsFsMotc_MonBSafPe2IgbtPeOnCurrUexptdOff( VOID )"
        ],
        "FsFsMotc_MonBSafPe2IgbtPeOnNoPwmLoStsFltUexptdIndcd": [
            "VOID\tFsFsMotc_MonBSafPe2IgbtPeOnNoPwmLoStsFltUexptdIndcd( VOID )"
        ],
        "FsFsMotc_MonBSafPe2IgbtPeOnNoPwmHiStsFltUexptdIndcd": [
            "VOID\tFsFsMotc_MonBSafPe2IgbtPeOnNoPwmHiStsFltUexptdIndcd( VOID )"
        ],
        "FsFsMotc_MonBEehwPe2IgbtGateDrvUStsGenFlt": [
            "VOID\tFsFsMotc_MonBEehwPe2IgbtGateDrvUStsGenFlt( VOID )"
        ],
        "FsFsMotc_MonBEehwPe2IgbtGateDrvVStsGenFlt": [
            "VOID\tFsFsMotc_MonBEehwPe2IgbtGateDrvVStsGenFlt( VOID )"
        ],
        "FsFsMotc_MonBEehwPe2IgbtGateDrvWStsGenFlt": [
            "VOID\tFsFsMotc_MonBEehwPe2IgbtGateDrvWStsGenFlt( VOID )"
        ],
        "FsFsMotc_MonBEehwPe2IgbtGateDrvXStsGenFlt": [
            "VOID\tFsFsMotc_MonBEehwPe2IgbtGateDrvXStsGenFlt( VOID )"
        ],
        "FsFsMotc_MonBEehwPe2IgbtGateDrvYStsGenFlt": [
            "VOID\tFsFsMotc_MonBEehwPe2IgbtGateDrvYStsGenFlt( VOID )"
        ],
        "FsFsMotc_MonBEehwPe2IgbtGateDrvZStsGenFlt": [
            "VOID\tFsFsMotc_MonBEehwPe2IgbtGateDrvZStsGenFlt( VOID )"
        ],
        "FsFsMotc_MonBSafPe1IgbtLoSideOffCurrUexptdOn": [
            "VOID\tFsFsMotc_MonBSafPe1IgbtLoSideOffCurrUexptdOn( VOID )"
        ],
        "FsFsMotc_MonBSafPe2IgbtLoSideOffCurrUexptdOn": [
            "VOID\tFsFsMotc_MonBSafPe2IgbtLoSideOffCurrUexptdOn( VOID )"
        ],
        "FsFsMotcInit": [
            "VOID\tFsFsMotcInit( VOID )"
        ],
        "FsFsMotcClear": [
            "VOID\tFsFsMotcClear( VOID )"
        ],
        "FsFsMotcDebounce": [
            "VOID\tFsFsMotcDebounce( FLAG af_judge, UCHAR* ap_status, UCHAR* ap_DTCT_NML, const UCHAR ac_DTCT_NML, UCHAR* ap_DTCT_ERR, const UCHAR ac_DTCT_ERR )"
        ],
        "FsFsMotcCstDiagDebounce": [
            "VOID\tFsFsMotcCstDiagDebounce( FLAG af_judge, UCHAR* ap_status, UCHAR* ap_DTCT_ERR, const UCHAR ac_DTCT_ERR )"
        ],
        "FsFsMotcFLTRelease": [
            "VOID\tFsFsMotcFLTRelease( VOID )"
        ]
    },
    "fs_fs_motc.h": {},
    "fs_fs_prot.c": {
        "FsFsProt_MonBSafEmStopStsGenFlt": [
            "VOID\tFsFsProt_MonBSafEmStopStsGenFlt(VOID)"
        ],
        "FsFsProt_MonBProtHwAscReadBackStsActv": [
            "VOID\tFsFsProt_MonBProtHwAscReadBackStsActv(VOID)"
        ],
        "FsFsProt_MonBSafActvDisMonVoltShoSply": [
            "VOID\tFsFsProt_MonBSafActvDisMonVoltShoSply(VOID)"
        ],
        "FsFsProt_MonBSafActvDisMonVoltShoGnd": [
            "VOID\tFsFsProt_MonBSafActvDisMonVoltShoGnd(VOID)"
        ],
        "FsFsProt_MonBSafActvDisFetHiVoltShoCirc": [
            "VOID\tFsFsProt_MonBSafActvDisFetHiVoltShoCirc(VOID)"
        ],
        "FsFsProt_MonBSafActvDisFetHiVoltOpenLine": [
            "VOID\tFsFsProt_MonBSafActvDisFetHiVoltOpenLine(VOID)"
        ],
        "FsFsProt_MonBSafActvDisFetLoVoltShoCirc": [
            "VOID\tFsFsProt_MonBSafActvDisFetLoVoltShoCirc(VOID)"
        ],
        "FsFsProt_MonBSafActvDisFetLoVoltOpenLine": [
            "VOID\tFsFsProt_MonBSafActvDisFetLoVoltOpenLine(VOID)"
        ],
        "FsFsProtInit": [
            "VOID\tFsFsProtInit(VOID)"
        ],
        "FsFsProtcDebounce": [
            "VOID\tFsFsProtcDebounce( FLAG af_judge, UCHAR* ap_status, UCHAR* ap_DTCT_NML, const UCHAR ac_DTCT_NML, UCHAR* ap_DTCT_ERR, const UCHAR ac_DTCT_ERR )"
        ]
    },
    "fs_fs_prot.h": {},
    "fs_fs_temp.c": {
        "FsFsTemp_MonBSen15FilmcapVoltShoSply": [
            "VOID\tFsFsTemp_MonBSen15FilmcapVoltShoSply( VOID )"
        ],
        "FsFsTemp_MonBSen15FilmcapVoltShoGnd": [
            "VOID\tFsFsTemp_MonBSen15FilmcapVoltShoGnd( VOID )"
        ],
        "FsFsTemp_MonBProtFilmcapTempOutLimHi": [
            "VOID\tFsFsTemp_MonBProtFilmcapTempOutLimHi( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe1IgbtUVoltShoSply": [
            "VOID\tFsFsTemp_MonBSen16Pe1IgbtUVoltShoSply( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe1IgbtUVoltShoGnd": [
            "VOID\tFsFsTemp_MonBSen16Pe1IgbtUVoltShoGnd( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe1IgbtVVoltShoSply": [
            "VOID\tFsFsTemp_MonBSen16Pe1IgbtVVoltShoSply( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe1IgbtVVoltShoGnd": [
            "VOID\tFsFsTemp_MonBSen16Pe1IgbtVVoltShoGnd( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe1IgbtWVoltShoSply": [
            "VOID\tFsFsTemp_MonBSen16Pe1IgbtWVoltShoSply( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe1IgbtWVoltShoGnd": [
            "VOID\tFsFsTemp_MonBSen16Pe1IgbtWVoltShoGnd( VOID )"
        ],
        "FsFsTemp_MonBProtPe1IgbtUTempOutLimHi": [
            "VOID\tFsFsTemp_MonBProtPe1IgbtUTempOutLimHi( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe2IgbtUVoltShoSply": [
            "VOID\tFsFsTemp_MonBSen16Pe2IgbtUVoltShoSply( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe2IgbtUVoltShoGnd": [
            "VOID\tFsFsTemp_MonBSen16Pe2IgbtUVoltShoGnd( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe2IgbtVVoltShoSply": [
            "VOID\tFsFsTemp_MonBSen16Pe2IgbtVVoltShoSply( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe2IgbtVVoltShoGnd": [
            "VOID\tFsFsTemp_MonBSen16Pe2IgbtVVoltShoGnd( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe2IgbtWVoltShoSply": [
            "VOID\tFsFsTemp_MonBSen16Pe2IgbtWVoltShoSply( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe2IgbtWVoltShoGnd": [
            "VOID\tFsFsTemp_MonBSen16Pe2IgbtWVoltShoGnd( VOID )"
        ],
        "FsFsTemp_MonBProtPe2IgbtUTempOutLimHi": [
            "VOID\tFsFsTemp_MonBProtPe2IgbtUTempOutLimHi( VOID )"
        ],
        "FsFsTemp_MonBSen19PcbVoltShoSply": [
            "VOID\tFsFsTemp_MonBSen19PcbVoltShoSply( VOID )"
        ],
        "FsFsTemp_MonBSen19PcbVoltShoGnd": [
            "VOID\tFsFsTemp_MonBSen19PcbVoltShoGnd( VOID )"
        ],
        "FsFsTemp_MonBProtPcbTempOutLimHi": [
            "VOID\tFsFsTemp_MonBProtPcbTempOutLimHi( VOID )"
        ],
        "FsFsTemp_MonBSen12DcdcMosfet1VoltShoSply": [
            "VOID\tFsFsTemp_MonBSen12DcdcMosfet1VoltShoSply( VOID )"
        ],
        "FsFsTemp_MonBSen12DcdcMosfet1VoltShoGnd": [
            "VOID\tFsFsTemp_MonBSen12DcdcMosfet1VoltShoGnd( VOID )"
        ],
        "FsFsTemp_MonBSen12DcdcMosfet2VoltShoSply": [
            "VOID\tFsFsTemp_MonBSen12DcdcMosfet2VoltShoSply( VOID )"
        ],
        "FsFsTemp_MonBSen12DcdcMosfet2VoltShoGnd": [
            "VOID\tFsFsTemp_MonBSen12DcdcMosfet2VoltShoGnd( VOID )"
        ],
        "FsFsTemp_MonBProtDcdcMosfetTempOutLimHi": [
            "VOID\tFsFsTemp_MonBProtDcdcMosfetTempOutLimHi( VOID )"
        ],
        "FsFsTemp_MonBSen13DcdcReactor1VoltShoSply": [
            "VOID\tFsFsTemp_MonBSen13DcdcReactor1VoltShoSply( VOID )"
        ],
        "FsFsTemp_MonBSen13DcdcReactor1VoltShoGnd": [
            "VOID\tFsFsTemp_MonBSen13DcdcReactor1VoltShoGnd( VOID )"
        ],
        "FsFsTemp_MonBSen13DcdcReactor2VoltShoSply": [
            "VOID\tFsFsTemp_MonBSen13DcdcReactor2VoltShoSply( VOID )"
        ],
        "FsFsTemp_MonBSen13DcdcReactor2VoltShoGnd": [
            "VOID\tFsFsTemp_MonBSen13DcdcReactor2VoltShoGnd( VOID )"
        ],
        "FsFsTemp_MonBProtDcdcReactorTempOutLimHi": [
            "VOID\tFsFsTemp_MonBProtDcdcReactorTempOutLimHi( VOID )"
        ],
        "FsFsTemp_MonBSen15FilmcapTempOutRngHi": [
            "VOID\tFsFsTemp_MonBSen15FilmcapTempOutRngHi( VOID )"
        ],
        "FsFsTemp_MonBSen15FilmcapTempOutRngLo": [
            "VOID\tFsFsTemp_MonBSen15FilmcapTempOutRngLo( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe1IgbtUTempOutRngHi": [
            "VOID\tFsFsTemp_MonBSen16Pe1IgbtUTempOutRngHi( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe1IgbtVTempOutRngHi": [
            "VOID\tFsFsTemp_MonBSen16Pe1IgbtVTempOutRngHi( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe1IgbtWTempOutRngHi": [
            "VOID\tFsFsTemp_MonBSen16Pe1IgbtWTempOutRngHi( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe1IgbtUTempOutRngLo": [
            "VOID\tFsFsTemp_MonBSen16Pe1IgbtUTempOutRngLo( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe1IgbtVTempOutRngLo": [
            "VOID\tFsFsTemp_MonBSen16Pe1IgbtVTempOutRngLo( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe1IgbtWTempOutRngLo": [
            "VOID\tFsFsTemp_MonBSen16Pe1IgbtWTempOutRngLo( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe2IgbtUTempOutRngHi": [
            "VOID\tFsFsTemp_MonBSen16Pe2IgbtUTempOutRngHi( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe2IgbtVTempOutRngHi": [
            "VOID\tFsFsTemp_MonBSen16Pe2IgbtVTempOutRngHi( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe2IgbtWTempOutRngHi": [
            "VOID\tFsFsTemp_MonBSen16Pe2IgbtWTempOutRngHi( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe2IgbtUTempOutRngLo": [
            "VOID\tFsFsTemp_MonBSen16Pe2IgbtUTempOutRngLo( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe2IgbtVTempOutRngLo": [
            "VOID\tFsFsTemp_MonBSen16Pe2IgbtVTempOutRngLo( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe2IgbtWTempOutRngLo": [
            "VOID\tFsFsTemp_MonBSen16Pe2IgbtWTempOutRngLo( VOID )"
        ],
        "FsFsTemp_MonBSen19PcbTempOutRngHi": [
            "VOID\tFsFsTemp_MonBSen19PcbTempOutRngHi( VOID )"
        ],
        "FsFsTemp_MonBSen19PcbTempOutRngLo": [
            "VOID\tFsFsTemp_MonBSen19PcbTempOutRngLo( VOID )"
        ],
        "FsFsTemp_MonBSen12DcdcMosfet1TempOutRngHi": [
            "VOID\tFsFsTemp_MonBSen12DcdcMosfet1TempOutRngHi( VOID )"
        ],
        "FsFsTemp_MonBSen12DcdcMosfet1TempOutRngLo": [
            "VOID\tFsFsTemp_MonBSen12DcdcMosfet1TempOutRngLo( VOID )"
        ],
        "FsFsTemp_MonBSen12DcdcMosfet2TempOutRngHi": [
            "VOID\tFsFsTemp_MonBSen12DcdcMosfet2TempOutRngHi( VOID )"
        ],
        "FsFsTemp_MonBSen12DcdcMosfet2TempOutRngLo": [
            "VOID\tFsFsTemp_MonBSen12DcdcMosfet2TempOutRngLo( VOID )"
        ],
        "FsFsTemp_MonBSen13DcdcReactor1TempOutRngHi": [
            "VOID\tFsFsTemp_MonBSen13DcdcReactor1TempOutRngHi( VOID )"
        ],
        "FsFsTemp_MonBSen13DcdcReactor1TempOutRngLo": [
            "VOID\tFsFsTemp_MonBSen13DcdcReactor1TempOutRngLo( VOID )"
        ],
        "FsFsTemp_MonBSen13DcdcReactor2TempOutRngHi": [
            "VOID\tFsFsTemp_MonBSen13DcdcReactor2TempOutRngHi( VOID )"
        ],
        "FsFsTemp_MonBSen13DcdcReactor2TempOutRngLo": [
            "VOID\tFsFsTemp_MonBSen13DcdcReactor2TempOutRngLo( VOID )"
        ],
        "FsFsTemp_MonBSen15FilmcapTempRatnltHi": [
            "VOID\tFsFsTemp_MonBSen15FilmcapTempRatnltHi( VOID )"
        ],
        "FsFsTemp_MonBSen15FilmcapTempRatnltLo": [
            "VOID\tFsFsTemp_MonBSen15FilmcapTempRatnltLo( VOID )"
        ],
        "FsFsTemp_MonBSen15FilmcapTempIntm": [
            "VOID\tFsFsTemp_MonBSen15FilmcapTempIntm( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe1IgbtUTempRatnltHi": [
            "VOID\tFsFsTemp_MonBSen16Pe1IgbtUTempRatnltHi( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe1IgbtVTempRatnltHi": [
            "VOID\tFsFsTemp_MonBSen16Pe1IgbtVTempRatnltHi( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe1IgbtWTempRatnltHi": [
            "VOID\tFsFsTemp_MonBSen16Pe1IgbtWTempRatnltHi( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe1IgbtUTempRatnltLo": [
            "VOID\tFsFsTemp_MonBSen16Pe1IgbtUTempRatnltLo( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe1IgbtVTempRatnltLo": [
            "VOID\tFsFsTemp_MonBSen16Pe1IgbtVTempRatnltLo( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe1IgbtWTempRatnltLo": [
            "VOID\tFsFsTemp_MonBSen16Pe1IgbtWTempRatnltLo( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe1IgbtUVoltIntm": [
            "VOID\tFsFsTemp_MonBSen16Pe1IgbtUVoltIntm( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe1IgbtVVoltIntm": [
            "VOID\tFsFsTemp_MonBSen16Pe1IgbtVVoltIntm( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe1IgbtWVoltIntm": [
            "VOID\tFsFsTemp_MonBSen16Pe1IgbtWVoltIntm( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe2IgbtUTempRatnltHi": [
            "VOID\tFsFsTemp_MonBSen16Pe2IgbtUTempRatnltHi( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe2IgbtVTempRatnltHi": [
            "VOID\tFsFsTemp_MonBSen16Pe2IgbtVTempRatnltHi( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe2IgbtWTempRatnltHi": [
            "VOID\tFsFsTemp_MonBSen16Pe2IgbtWTempRatnltHi( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe2IgbtUTempRatnltLo": [
            "VOID\tFsFsTemp_MonBSen16Pe2IgbtUTempRatnltLo( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe2IgbtVTempRatnltLo": [
            "VOID\tFsFsTemp_MonBSen16Pe2IgbtVTempRatnltLo( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe2IgbtWTempRatnltLo": [
            "VOID\tFsFsTemp_MonBSen16Pe2IgbtWTempRatnltLo( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe2IgbtUVoltIntm": [
            "VOID\tFsFsTemp_MonBSen16Pe2IgbtUVoltIntm( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe2IgbtVVoltIntm": [
            "VOID\tFsFsTemp_MonBSen16Pe2IgbtVVoltIntm( VOID )"
        ],
        "FsFsTemp_MonBSen16Pe2IgbtWVoltIntm": [
            "VOID\tFsFsTemp_MonBSen16Pe2IgbtWVoltIntm( VOID )"
        ],
        "FsFsTemp_MonBSen19PcbTempRatnltHi": [
            "VOID\tFsFsTemp_MonBSen19PcbTempRatnltHi( VOID )"
        ],
        "FsFsTemp_MonBSen19PcbTempRatnltLo": [
            "VOID\tFsFsTemp_MonBSen19PcbTempRatnltLo( VOID )"
        ],
        "FsFsTemp_MonBSen19PcbTempIntm": [
            "VOID\tFsFsTemp_MonBSen19PcbTempIntm( VOID )"
        ],
        "FsFsTemp_MonBSen12DcdcMosfet1TempRatnltHi": [
            "VOID\tFsFsTemp_MonBSen12DcdcMosfet1TempRatnltHi( VOID )"
        ],
        "FsFsTemp_MonBSen12DcdcMosfet1TempRatnltLo": [
            "VOID\tFsFsTemp_MonBSen12DcdcMosfet1TempRatnltLo( VOID )"
        ],
        "FsFsTemp_MonBSen12DcdcMosfet1TempIntm": [
            "VOID\tFsFsTemp_MonBSen12DcdcMosfet1TempIntm( VOID )"
        ],
        "FsFsTemp_MonBSen12DcdcMosfet2TempRatnltHi": [
            "VOID\tFsFsTemp_MonBSen12DcdcMosfet2TempRatnltHi( VOID )"
        ],
        "FsFsTemp_MonBSen12DcdcMosfet2TempRatnltLo": [
            "VOID\tFsFsTemp_MonBSen12DcdcMosfet2TempRatnltLo( VOID )"
        ],
        "FsFsTemp_MonBSen12DcdcMosfet2TempIntm": [
            "VOID\tFsFsTemp_MonBSen12DcdcMosfet2TempIntm( VOID )"
        ],
        "FsFsTemp_MonBSen13DcdcReactor1TempRatnltHi": [
            "VOID\tFsFsTemp_MonBSen13DcdcReactor1TempRatnltHi( VOID )"
        ],
        "FsFsTemp_MonBSen13DcdcReactor1TempRatnltLo": [
            "VOID\tFsFsTemp_MonBSen13DcdcReactor1TempRatnltLo( VOID )"
        ],
        "FsFsTemp_MonBSen13DcdcReactor1TempIntm": [
            "VOID\tFsFsTemp_MonBSen13DcdcReactor1TempIntm( VOID )"
        ],
        "FsFsTemp_MonBSen13DcdcReactor2TempRatnltHi": [
            "VOID\tFsFsTemp_MonBSen13DcdcReactor2TempRatnltHi( VOID )"
        ],
        "FsFsTemp_MonBSen13DcdcReactor2TempRatnltLo": [
            "VOID\tFsFsTemp_MonBSen13DcdcReactor2TempRatnltLo( VOID )"
        ],
        "FsFsTemp_MonBSen13DcdcReactor2TempIntm": [
            "VOID\tFsFsTemp_MonBSen13DcdcReactor2TempIntm( VOID )"
        ],
        "FsFsTemp_MonBProtDcdcMosfetMdlTempOutLimHi": [
            "VOID\tFsFsTemp_MonBProtDcdcMosfetMdlTempOutLimHi( VOID )"
        ],
        "FsFsTemp_MonBProtPe1IgbtVTempOutLimHi": [
            "VOID\tFsFsTemp_MonBProtPe1IgbtVTempOutLimHi( VOID )"
        ],
        "FsFsTemp_MonBProtPe1IgbtWTempOutLimHi": [
            "VOID\tFsFsTemp_MonBProtPe1IgbtWTempOutLimHi( VOID )"
        ],
        "FsFsTemp_MonBProtPe1IgbtMdlTempOutLimHi": [
            "VOID\tFsFsTemp_MonBProtPe1IgbtMdlTempOutLimHi( VOID )"
        ],
        "FsFsTemp_MonBProtPe2IgbtVTempOutLimHi": [
            "VOID\tFsFsTemp_MonBProtPe2IgbtVTempOutLimHi( VOID )"
        ],
        "FsFsTemp_MonBProtPe2IgbtWTempOutLimHi": [
            "VOID\tFsFsTemp_MonBProtPe2IgbtWTempOutLimHi( VOID )"
        ],
        "FsFsTemp_MonBProtPe2IgbtMdlTempOutLimHi": [
            "VOID\tFsFsTemp_MonBProtPe2IgbtMdlTempOutLimHi( VOID )"
        ],
        "FsFsTemp_Renewal_AdFilmCapTemp": [
            "VOID\tFsFsTemp_Renewal_AdFilmCapTemp(VOID)"
        ],
        "FsFsTemp_Renewal_GenIgbtAdTempU": [
            "VOID\tFsFsTemp_Renewal_GenIgbtAdTempU(VOID)"
        ],
        "FsFsTemp_Renewal_GenIgbtAdTempV": [
            "VOID\tFsFsTemp_Renewal_GenIgbtAdTempV(VOID)"
        ],
        "FsFsTemp_Renewal_GenIgbtAdTempW": [
            "VOID\tFsFsTemp_Renewal_GenIgbtAdTempW(VOID)"
        ],
        "FsFsTemp_Renewal_MotIgbtAdTempU": [
            "VOID\tFsFsTemp_Renewal_MotIgbtAdTempU(VOID)"
        ],
        "FsFsTemp_Renewal_MotIgbtAdTempV": [
            "VOID\tFsFsTemp_Renewal_MotIgbtAdTempV(VOID)"
        ],
        "FsFsTemp_Renewal_MotIgbtAdTempW": [
            "VOID\tFsFsTemp_Renewal_MotIgbtAdTempW(VOID)"
        ],
        "FsFsTemp_Renewal_AdPcbTemp": [
            "VOID\tFsFsTemp_Renewal_AdPcbTemp(VOID)"
        ],
        "FsFsTemp_Renewal_DcDcAdTemp1": [
            "VOID\tFsFsTemp_Renewal_DcDcAdTemp1(VOID)"
        ],
        "FsFsTemp_Renewal_DcDcAdTemp2": [
            "VOID\tFsFsTemp_Renewal_DcDcAdTemp2(VOID)"
        ],
        "FsFsTemp_Renewal_DcDcReaAdTemp1": [
            "VOID\tFsFsTemp_Renewal_DcDcReaAdTemp1(VOID)"
        ],
        "FsFsTemp_Renewal_DcDcReaAdTemp2": [
            "VOID\tFsFsTemp_Renewal_DcDcReaAdTemp2(VOID)"
        ],
        "FsFsTemp_Renewal_DcdcMosFetMdlTmp": [
            "VOID\tFsFsTemp_Renewal_DcdcMosFetMdlTmp(VOID)"
        ],
        "FsFsTempInit": [
            "VOID\tFsFsTempInit( VOID )"
        ]
    },
    "fs_fs_temp.h": {},
    "fs_fs_tmp_cstm.c": {
        "FsFsTmp_Check_ActvDcha_EstTemp": [
            "VOID\tFsFsTmp_Check_ActvDcha_EstTemp( VOID )"
        ]
    },
    "fs_fs_tmp_cstm.h": {},
    "fs_fs_vol.c": {
        "FsFsVol_MonBSen4DcLinkPe1VoltShoGnd": [
            "VOID\tFsFsVol_MonBSen4DcLinkPe1VoltShoGnd( VOID )"
        ],
        "FsFsVol_MonBProtDcLinkPe1VoltOutLimHi": [
            "VOID\tFsFsVol_MonBProtDcLinkPe1VoltOutLimHi( VOID )"
        ],
        "FsFsVol_MonBProtHwDcLinkPe1VoltOutLimHi": [
            "VOID\tFsFsVol_MonBProtHwDcLinkPe1VoltOutLimHi( VOID )"
        ],
        "FsFsVol_MonBSen4DcLinkPe2VoltShoGnd": [
            "VOID\tFsFsVol_MonBSen4DcLinkPe2VoltShoGnd( VOID )"
        ],
        "FsFsVol_MonBProtDcLinkPe2VoltOutLimHi": [
            "VOID\tFsFsVol_MonBProtDcLinkPe2VoltOutLimHi( VOID )"
        ],
        "FsFsVol_MonBProtHwDcLinkPe2VoltOutLimHi": [
            "VOID\tFsFsVol_MonBProtHwDcLinkPe2VoltOutLimHi( VOID )"
        ],
        "FsFsVol_MonBSen1DcConVoltShoSply": [
            "VOID\tFsFsVol_MonBSen1DcConVoltShoSply( VOID )"
        ],
        "FsFsVol_MonBSen1DcConVoltShoGnd": [
            "VOID\tFsFsVol_MonBSen1DcConVoltShoGnd( VOID )"
        ],
        "FsFsVol_MonBProtDcConVoltOutLimHi": [
            "VOID\tFsFsVol_MonBProtDcConVoltOutLimHi( VOID )"
        ],
        "FsFsVol_MonBProtHwDcConVoltOutLimHi": [
            "VOID\tFsFsVol_MonBProtHwDcConVoltOutLimHi( VOID )"
        ],
        "FsFsVol_MonBSen2DcLinkVoltShoSply": [
            "VOID\tFsFsVol_MonBSen2DcLinkVoltShoSply( VOID )"
        ],
        "FsFsVol_MonBSen2DcLinkVoltShoGnd": [
            "VOID\tFsFsVol_MonBSen2DcLinkVoltShoGnd( VOID )"
        ],
        "FsFsVol_MonBProtDcLinkVoltOutLimHi": [
            "VOID\tFsFsVol_MonBProtDcLinkVoltOutLimHi( VOID )"
        ],
        "FsFsVol_MonBProtHwDcLinkVoltOutLimHi": [
            "VOID\tFsFsVol_MonBProtHwDcLinkVoltOutLimHi( VOID )"
        ],
        "FsFsVol_MonBSen4DcLinkPe1VoltShoSply": [
            "VOID\tFsFsVol_MonBSen4DcLinkPe1VoltShoSply( VOID )"
        ],
        "FsFsVol_MonBSen4DcLinkPe2VoltShoSply": [
            "VOID\tFsFsVol_MonBSen4DcLinkPe2VoltShoSply( VOID )"
        ],
        "FsFsVol_MonBProtDcConVoltOutLimLo": [
            "VOID\tFsFsVol_MonBProtDcConVoltOutLimLo( VOID )"
        ],
        "FsFsVol_MonBProtDcLinkPe1OvCntrOutLimHi": [
            "VOID\tFsFsVol_MonBProtDcLinkPe1OvCntrOutLimHi( VOID )"
        ],
        "FsFsVol_MonBProtDcLinkPe2OvCntrOutLimHi": [
            "VOID\tFsFsVol_MonBProtDcLinkPe2OvCntrOutLimHi( VOID )"
        ],
        "FsFsVol_MonBProtDcLinkVoltOutLimLo": [
            "VOID\tFsFsVol_MonBProtDcLinkVoltOutLimLo( VOID )"
        ],
        "FsFsVol_MonBSen2DcLinkVoltOutRngHi": [
            "VOID\tFsFsVol_MonBSen2DcLinkVoltOutRngHi( VOID )"
        ],
        "FsFsVol_MonBSen2DcLinkVoltOutRngLo": [
            "VOID\tFsFsVol_MonBSen2DcLinkVoltOutRngLo( VOID )"
        ],
        "FsFsVol_MonBSen2DcLinkVoltRatnltHi": [
            "VOID\tFsFsVol_MonBSen2DcLinkVoltRatnltHi( VOID )"
        ],
        "FsFsVol_MonBSen2DcLinkVoltRatnltLo": [
            "VOID\tFsFsVol_MonBSen2DcLinkVoltRatnltLo( VOID )"
        ],
        "FsFsVol_MonBSen2DcLinkVoltIntm": [
            "VOID\tFsFsVol_MonBSen2DcLinkVoltIntm( VOID )"
        ],
        "FsFsVol_MonBSen4DcLinkPe1VoltIntm": [
            "VOID\tFsFsVol_MonBSen4DcLinkPe1VoltIntm( VOID )"
        ],
        "FsFsVol_MonBSen4DcLinkPe2VoltIntm": [
            "VOID\tFsFsVol_MonBSen4DcLinkPe2VoltIntm( VOID )"
        ],
        "FsFsVol_MonBSen4DcLinkPe1VoltOutRngHi": [
            "VOID\tFsFsVol_MonBSen4DcLinkPe1VoltOutRngHi( VOID )"
        ],
        "FsFsVol_MonBSen4DcLinkPe2VoltOutRngHi": [
            "VOID\tFsFsVol_MonBSen4DcLinkPe2VoltOutRngHi( VOID )"
        ],
        "FsFsVol_MonBSen4DcLinkPe1VoltOutRngLo": [
            "VOID\tFsFsVol_MonBSen4DcLinkPe1VoltOutRngLo( VOID )"
        ],
        "FsFsVol_MonBSen4DcLinkPe2VoltOutRngLo": [
            "VOID\tFsFsVol_MonBSen4DcLinkPe2VoltOutRngLo( VOID )"
        ],
        "FsFsVol_MonBSen4DcLinkPe1VoltRatnltHi": [
            "VOID\tFsFsVol_MonBSen4DcLinkPe1VoltRatnltHi( VOID )"
        ],
        "FsFsVol_MonBSen4DcLinkPe2VoltRatnltHi": [
            "VOID\tFsFsVol_MonBSen4DcLinkPe2VoltRatnltHi( VOID )"
        ],
        "FsFsVol_MonBSen4DcLinkPe1VoltRatnltLo": [
            "VOID\tFsFsVol_MonBSen4DcLinkPe1VoltRatnltLo( VOID )"
        ],
        "FsFsVol_MonBSen4DcLinkPe2VoltRatnltLo": [
            "VOID\tFsFsVol_MonBSen4DcLinkPe2VoltRatnltLo( VOID )"
        ],
        "FsFsVol_MonBSen1DcConVoltRatnltHi": [
            "VOID\tFsFsVol_MonBSen1DcConVoltRatnltHi( VOID )"
        ],
        "FsFsVol_MonBSen1DcConVoltRatnltLo": [
            "VOID\tFsFsVol_MonBSen1DcConVoltRatnltLo( VOID )"
        ],
        "FsFsVolDebounce": [
            "VOID\tFsFsVolDebounce( FLAG af_judge, UCHAR* ap_status, UCHAR* ap_DTCT_ERR, const UCHAR ac_DTCT_ERR )"
        ],
        "FsFsVolIntmDebounce": [
            "VOID\tFsFsVolIntmDebounce( FLAG af_judge, UCHAR* ap_status, UCHAR* ap_DTCT_ERR, const UCHAR ac_DTCT_ERR, UCHAR* ap_DTCT_LIM, const UCHAR ac_DTCT_LIM )"
        ],
        "FsFsVolInit": [
            "VOID\tFsFsVolInit( VOID )"
        ]
    },
    "fs_fs_vol.h": {},
    "fs_sp_cfg.c": {},
    "if_fs.c": {},
    "CDD_RotorPosSens.h": {},
    "cmn_rom_cstm.c": {},
    "cmn_rom_cstm.h": {
        "IfMdl_Get_Swname": [
            "inline static\tVOID\tIfMdl_Get_Swname( VOID )"
        ],
        "IfMdl_Get_Swver": [
            "inline static\tVOID\tIfMdl_Get_Swver( VOID )"
        ]
    },
    "if_mdl_CurrentSensorAbstr.c": {},
    "if_mdl_DCCurrsens.c": {},
    "if_mdl_dcdc.c": {},
    "if_mdl_fs.c": {
        "IfMdl_SetFlg_Pe1FsJudge": [
            "VOID\tIfMdl_SetFlg_Pe1FsJudge( USHORT fsidx, FLAG f_dat )"
        ],
        "IfMdl_GetFlg_Pe1FsJudge": [
            "FLAG\tIfMdl_GetFlg_Pe1FsJudge( USHORT fsidx )"
        ],
        "IfMdl_SetFlg_Pe2FsJudge": [
            "VOID\tIfMdl_SetFlg_Pe2FsJudge( USHORT fsidx, FLAG f_dat )"
        ],
        "IfMdl_GetFlg_Pe2FsJudge": [
            "FLAG\tIfMdl_GetFlg_Pe2FsJudge( USHORT fsidx )"
        ],
        "IfMdl_SetFlg_Pe1FsDetect": [
            "VOID\tIfMdl_SetFlg_Pe1FsDetect( USHORT fsidx, FLAG f_dat )"
        ],
        "IfMdl_GetFlg_Pe1FsDetect": [
            "FLAG\tIfMdl_GetFlg_Pe1FsDetect( USHORT fsidx )"
        ],
        "IfMdl_SetFlg_Pe2FsDetect": [
            "VOID\tIfMdl_SetFlg_Pe2FsDetect( USHORT fsidx, FLAG f_dat )"
        ],
        "IfMdl_GetFlg_Pe2FsDetect": [
            "FLAG\tIfMdl_GetFlg_Pe2FsDetect( USHORT fsidx )"
        ],
        "IfMdl_Get_Eds1_ActvDcha_RegiTemp": [
            "FLOAT\tIfMdl_Get_Eds1_ActvDcha_RegiTemp( VOID )"
        ],
        "IfMdl_Get_FilmCapHotSpotTemp": [
            "FLOAT\tIfMdl_Get_FilmCapHotSpotTemp( VOID )"
        ],
        "IfMdl_Get_PE1JunctionTmp": [
            "FLOAT\tIfMdl_Get_PE1JunctionTmp( VOID )"
        ],
        "IfMdl_Get_PE2JunctionTmp": [
            "FLOAT\tIfMdl_Get_PE2JunctionTmp( VOID )"
        ],
        "IfMdl_Get_ReactorHotSpotTemp": [
            "FLOAT\tIfMdl_Get_ReactorHotSpotTemp( VOID )"
        ],
        "IfMdl_Get_DcdcMosFetMdlTmp": [
            "FLOAT\tIfMdl_Get_DcdcMosFetMdlTmp( VOID )"
        ],
        "IfMdl_Get_PE1_GU_FB": [
            "FLAG\tIfMdl_Get_PE1_GU_FB( VOID )"
        ],
        "IfMdl_Get_PE1_GV_FB": [
            "FLAG\tIfMdl_Get_PE1_GV_FB( VOID )"
        ],
        "IfMdl_Get_PE1_GW_FB": [
            "FLAG\tIfMdl_Get_PE1_GW_FB( VOID )"
        ],
        "IfMdl_Get_PE1_GX_FB": [
            "FLAG\tIfMdl_Get_PE1_GX_FB( VOID )"
        ],
        "IfMdl_Get_PE1_GY_FB": [
            "FLAG\tIfMdl_Get_PE1_GY_FB( VOID )"
        ],
        "IfMdl_Get_PE1_GZ_FB": [
            "FLAG\tIfMdl_Get_PE1_GZ_FB( VOID )"
        ],
        "IfMdl_Get_PE2_GU_FB": [
            "FLAG\tIfMdl_Get_PE2_GU_FB( VOID )"
        ],
        "IfMdl_Get_PE2_GV_FB": [
            "FLAG\tIfMdl_Get_PE2_GV_FB( VOID )"
        ],
        "IfMdl_Get_PE2_GW_FB": [
            "FLAG\tIfMdl_Get_PE2_GW_FB( VOID )"
        ],
        "IfMdl_Get_PE2_GX_FB": [
            "FLAG\tIfMdl_Get_PE2_GX_FB( VOID )"
        ],
        "IfMdl_Get_PE2_GY_FB": [
            "FLAG\tIfMdl_Get_PE2_GY_FB( VOID )"
        ],
        "IfMdl_Get_PE2_GZ_FB": [
            "FLAG\tIfMdl_Get_PE2_GZ_FB( VOID )"
        ]
    },
    "if_mdl_IGBTMgr.c": {
        "IfMdl_GetFlg_ASCReadBackExe": [
            "FLAG\tIfMdl_GetFlg_ASCReadBackExe( VOID )"
        ]
    },
    "if_mdl_pe1_mot_ctrl.c": {},
    "if_mdl_pe2_mot_ctrl.c": {},
    "if_mdl_PeTempsensAbst.c": {},
    "if_mdl_pwm.c": {},
    "if_mdl_PwrMgtAbstr.c": {},
    "if_mdl_VoltageSensorAbstr.c": {},
    "OnlineCalbParameters.c": {},
    "dio_ifp_ADC.c": {
        "DioIfp_Output_ActDchaHiSideOn": [
            "VOID\tDioIfp_Output_ActDchaHiSideOn( VOID )"
        ],
        "DioIfp_Output_ActDchaLoSideOn": [
            "VOID\tDioIfp_Output_ActDchaLoSideOn( VOID )"
        ]
    },
    "dio_ifp_ADC.h": {},
    "if_dio_ADC.c": {},
    "if_dio_ADC.h": {
        "IfDio_SetFlg_ActDchaHiSideOn": [
            "inline\tstatic\tVOID\tIfDio_SetFlg_ActDchaHiSideOn( const FLAG data )"
        ],
        "IfDio_GetFlg_ActDchaHiSideOn": [
            "inline\tstatic\tFLAG\tIfDio_GetFlg_ActDchaHiSideOn( VOID )"
        ],
        "IfDio_SetFlg_ActDchaLoSideOn": [
            "inline\tstatic\tVOID\tIfDio_SetFlg_ActDchaLoSideOn( const FLAG data )"
        ],
        "IfDio_GetFlg_ActDchaLoSideOn": [
            "inline\tstatic\tFLAG\tIfDio_GetFlg_ActDchaLoSideOn( VOID )"
        ],
        "IfDio_SetFlg_ActDchaHiSideOnReq": [
            "inline\tstatic\tVOID\tIfDio_SetFlg_ActDchaHiSideOnReq( const FLAG data )"
        ],
        "IfDio_GetFlg_ActDchaHiSideOnReq": [
            "inline\tstatic\tFLAG\tIfDio_GetFlg_ActDchaHiSideOnReq( VOID )"
        ],
        "IfDio_SetFlg_ActDchaLoSideOnReq": [
            "inline\tstatic\tVOID\tIfDio_SetFlg_ActDchaLoSideOnReq( const FLAG data )"
        ],
        "IfDio_GetFlg_ActDchaLoSideOnReq": [
            "inline\tstatic\tFLAG\tIfDio_GetFlg_ActDchaLoSideOnReq( VOID )"
        ]
    },
    "mng_ADC.c": {
        "Mng_Init_ActiveDischarge": [
            "VOID\tMng_Init_ActiveDischarge( VOID )"
        ],
        "Mng_Main_ActiveDischarge": [
            "VOID\tMng_Main_ActiveDischarge( VOID )"
        ],
        "Mng_Output_ActiveDischarge": [
            "static\tVOID\tMng_Output_ActiveDischarge( VOID )"
        ]
    },
    "mng_ADC.h": {},
    "prm_ADC.c": {
        "DioPrm_Proc_AdcOutput": [
            "VOID\tDioPrm_Proc_AdcOutput( const BOOL adc_req_em1, const BOOL adc_req_em2 )"
        ],
        "DioPrm_Renewal_ReqActDchaLoSideOn": [
            "VOID\tDioPrm_Renewal_ReqActDchaLoSideOn( VOID )"
        ],
        "DioPrm_Renewal_ReqActDchaHiSideOn": [
            "VOID\tDioPrm_Renewal_ReqActDchaHiSideOn( VOID )"
        ]
    },
    "prm_ADC.h": {},
    "dio_ifp_HWASCAbst.c": {
        "DioIfp_Output_Port_EmStop_Init": [
            "VOID\tDioIfp_Output_Port_EmStop_Init( VOID )"
        ],
        "DioIfp_Output_Port_EmStop": [
            "VOID\tDioIfp_Output_Port_EmStop( VOID )"
        ],
        "DioIfp_Input_Port_ReadBack": [
            "VOID\tDioIfp_Input_Port_ReadBack( VOID )"
        ],
        "DioIfp_Output_FltLatRst": [
            "VOID\tDioIfp_Output_FltLatRst( VOID )"
        ]
    },
    "dio_ifp_HWASCAbst.h": {},
    "dio_prm_HWASCAbst.c": {
        "DioPrm_Renewal_ReadBack": [
            "VOID\tDioPrm_Renewal_ReadBack( VOID )"
        ],
        "DioPrm_Input_ReadBack": [
            "VOID\tDioPrm_Input_ReadBack( VOID )"
        ],
        "DioPrm_Renewal_ReqFltLatRst": [
            "VOID\tDioPrm_Renewal_ReqFltLatRst( VOID )"
        ],
        "DioPrm_Renewal_ReqEmStop": [
            "VOID\tDioPrm_Renewal_ReqEmStop( VOID )"
        ]
    },
    "dio_prm_HWASCAbst.h": {},
    "HWASCAbst.c": {
        "HWASCAbst_Init": [
            "VOID\tHWASCAbst_Init( VOID )"
        ],
        "HWASCAbst_Main": [
            "VOID\tHWASCAbst_Main( VOID )"
        ]
    },
    "HWASCAbst.h": {},
    "if_dio_HWASCAbst.c": {},
    "if_dio_HWASCAbst.h": {
        "IfDio_SetFlg_EmStop": [
            "inline static\tVOID\tIfDio_SetFlg_EmStop( const FLAG sts )"
        ],
        "IfDio_GetFlg_EmStop": [
            "inline static\tFLAG\tIfDio_GetFlg_EmStop( VOID )"
        ],
        "IfDio_SetFlg_ReadBack": [
            "inline static\tVOID\tIfDio_SetFlg_ReadBack( const FLAG sts )"
        ],
        "IfDio_GetFlg_ReadBack": [
            "inline static\tFLAG\tIfDio_GetFlg_ReadBack( VOID )"
        ],
        "IfDio_SetFlg_EmStopReq": [
            "inline static\tVOID\tIfDio_SetFlg_EmStopReq( const FLAG sts )"
        ],
        "IfDio_GetFlg_EmStopReq": [
            "inline static\tFLAG\tIfDio_GetFlg_EmStopReq( VOID )"
        ],
        "IfDio_SetFlg_FltLatRst": [
            "inline static\tVOID\tIfDio_SetFlg_FltLatRst( const FLAG indat )"
        ],
        "IfDio_GetFlg_FltLatRst": [
            "inline static\tFLAG\tIfDio_GetFlg_FltLatRst( VOID )"
        ],
        "IfDio_SetFlg_FltLatRstReq": [
            "inline static\tVOID\tIfDio_SetFlg_FltLatRstReq( const FLAG data )"
        ],
        "IfDio_GetFlg_FltLatRstReq": [
            "inline static\tFLAG\tIfDio_GetFlg_FltLatRstReq( VOID )"
        ]
    },
    "dio_ifp_IGBTAbst.c": {
        "DioIfp_Output_IgbtInit_H": [
            "VOID\tDioIfp_Output_IgbtInit_H( VOID )"
        ],
        "DioIfp_Output_IgbtInit_L": [
            "VOID\tDioIfp_Output_IgbtInit_L( VOID )"
        ],
        "DioIfp_Output_DrvFlbk": [
            "VOID\tDioIfp_Output_DrvFlbk( VOID )"
        ]
    },
    "dio_ifp_IGBTAbst.h": {},
    "dio_prm_IGBTAbst.c": {
        "DioPrm_Init_Igbt": [
            "VOID\tDioPrm_Init_Igbt( VOID )"
        ],
        "DioPrm_Renewal_ReqIgbtInit_H": [
            "VOID\tDioPrm_Renewal_ReqIgbtInit_H( VOID )"
        ],
        "DioPrm_Renewal_ReqIgbtInit_L": [
            "VOID\tDioPrm_Renewal_ReqIgbtInit_L( VOID )"
        ],
        "DioPrm_Renewal_ReqDrv_Flbk": [
            "VOID\tDioPrm_Renewal_ReqDrv_Flbk( VOID )"
        ]
    },
    "dio_prm_IGBTAbst.h": {},
    "if_dio_IGBTAbst.c": {},
    "if_dio_IGBTAbst.h": {
        "IfDio_SetFlg_IgbtInit_H": [
            "inline static\tVOID\tIfDio_SetFlg_IgbtInit_H( const FLAG indat )"
        ],
        "IfDio_GetFlg_IgbtInit_H": [
            "inline static\tFLAG\tIfDio_GetFlg_IgbtInit_H( VOID )"
        ],
        "IfDio_SetFlg_IgbtInit_L": [
            "inline static\tVOID\tIfDio_SetFlg_IgbtInit_L( const FLAG indat )"
        ],
        "IfDio_GetFlg_IgbtInit_L": [
            "inline static\tFLAG\tIfDio_GetFlg_IgbtInit_L( VOID )"
        ],
        "IfDio_SetFlg_IgbtInit_H_Req": [
            "inline static\tVOID\tIfDio_SetFlg_IgbtInit_H_Req( const FLAG data )"
        ],
        "IfDio_GetFlg_IgbtInit_H_Req": [
            "inline static\tFLAG\tIfDio_GetFlg_IgbtInit_H_Req( VOID )"
        ],
        "IfDio_SetFlg_IgbtInit_L_Req": [
            "inline static\tVOID\tIfDio_SetFlg_IgbtInit_L_Req( const FLAG data )"
        ],
        "IfDio_GetFlg_IgbtInit_L_Req": [
            "inline static\tFLAG\tIfDio_GetFlg_IgbtInit_L_Req( VOID )"
        ],
        "IfDio_SetFlg_Drv_Flbk": [
            "inline static\tVOID\tIfDio_SetFlg_Drv_Flbk( const FLAG indat )"
        ],
        "IfDio_GetFlg_Drv_Flbk": [
            "inline static\tFLAG\tIfDio_GetFlg_Drv_Flbk( VOID )"
        ],
        "IfDio_SetFlg_Drv_FlbkReq": [
            "inline static\tVOID\tIfDio_SetFlg_Drv_FlbkReq( const FLAG data )"
        ],
        "IfDio_GetFlg_Drv_FlbkReq": [
            "inline static\tFLAG\tIfDio_GetFlg_Drv_FlbkReq( VOID )"
        ]
    },
    "IGBTAbst.c": {
        "IgbtAbst_Init": [
            "VOID\tIgbtAbst_Init( VOID )"
        ],
        "IgbtAbst_Main": [
            "VOID\tIgbtAbst_Main( VOID )"
        ]
    },
    "IGBTAbst.h": {},
    "dio_ifp_PE1IGBTAbst.c": {
        "DioIfp_Output_PE1IgbtInit": [
            "VOID\tDioIfp_Output_PE1IgbtInit( VOID )"
        ],
        "DioIfp_Input_Port_PE1IgbtFlt": [
            "VOID\tDioIfp_Input_Port_PE1IgbtFlt( VOID )"
        ],
        "DioIfp_Output_PE1IgbtEn": [
            "static\tVOID\tDioIfp_Output_PE1IgbtEn( VOID )"
        ],
        "DioIfp_Output_PE1IgbtEn_H": [
            "static\tVOID\tDioIfp_Output_PE1IgbtEn_H( VOID )"
        ],
        "DioIfp_Output_PE1IgbtEn_L": [
            "static\tVOID\tDioIfp_Output_PE1IgbtEn_L( VOID )"
        ],
        "DioIfp_Output_IgbtEn_PE1Main": [
            "VOID\tDioIfp_Output_IgbtEn_PE1Main( VOID )"
        ]
    },
    "dio_ifp_PE1IGBTAbst.h": {},
    "dio_prm_PE1IGBTAbst.c": {
        "DioPrm_Init_PE1Igbt": [
            "VOID\tDioPrm_Init_PE1Igbt( VOID )"
        ],
        "DioPrm_Input_PE1IgbtFlt": [
            "VOID\tDioPrm_Input_PE1IgbtFlt( VOID )"
        ],
        "DioPrm_Renewal_PE1IgbtFlt": [
            "VOID\tDioPrm_Renewal_PE1IgbtFlt( VOID )"
        ],
        "DioPrm_Renewal_ReqPE1IgbtInit": [
            "VOID\tDioPrm_Renewal_ReqPE1IgbtInit( VOID )"
        ],
        "DioPrm_Renewal_SysReqPE1Igbt": [
            "VOID\tDioPrm_Renewal_SysReqPE1Igbt( VOID )"
        ],
        "DioPrm_Renewal_ReqPE1IgbtEn": [
            "VOID\tDioPrm_Renewal_ReqPE1IgbtEn( VOID )"
        ],
        "DioPrm_Renewal_ReqPE1IgbtEn_H": [
            "VOID\tDioPrm_Renewal_ReqPE1IgbtEn_H( VOID )"
        ],
        "DioPrm_Renewal_ReqPE1IgbtEn_L": [
            "VOID\tDioPrm_Renewal_ReqPE1IgbtEn_L( VOID )"
        ]
    },
    "dio_prm_PE1IGBTAbst.h": {},
    "if_dio_PE1IGBTAbst.c": {},
    "if_dio_PE1IGBTAbst.h": {
        "IfDio_SetFlg_PE1IgbtInit": [
            "inline static\tVOID\tIfDio_SetFlg_PE1IgbtInit( const FLAG indat )"
        ],
        "IfDio_GetFlg_PE1IgbtInit": [
            "inline static\tFLAG\tIfDio_GetFlg_PE1IgbtInit( VOID )"
        ],
        "IfDio_SetFlg_PE1IgbtFlt": [
            "inline static\tVOID\tIfDio_SetFlg_PE1IgbtFlt( const FLAG indat, const UCHAR num )"
        ],
        "IfDio_GetFlg_PE1IgbtFlt": [
            "inline static\tFLAG\tIfDio_GetFlg_PE1IgbtFlt( const UCHAR num )"
        ],
        "IfDio_SetFlg_PE1IgbtInitReq": [
            "inline static\tVOID\tIfDio_SetFlg_PE1IgbtInitReq( const FLAG data )"
        ],
        "IfDio_GetFlg_PE1IgbtInitReq": [
            "inline static\tFLAG\tIfDio_GetFlg_PE1IgbtInitReq( VOID )"
        ],
        "IfDio_SetFlg_PE1IgbtEn": [
            "inline static\tVOID\tIfDio_SetFlg_PE1IgbtEn( const FLAG indat )"
        ],
        "IfDio_GetFlg_PE1IgbtEn": [
            "inline static\tFLAG\tIfDio_GetFlg_PE1IgbtEn( VOID )"
        ],
        "IfDio_SetFlg_PE1IgbtEnReq": [
            "inline static\tVOID\tIfDio_SetFlg_PE1IgbtEnReq( const FLAG data )"
        ],
        "IfDio_GetFlg_PE1IgbtEnReq": [
            "inline static\tFLAG\tIfDio_GetFlg_PE1IgbtEnReq( VOID )"
        ],
        "IfDio_SetFlg_PE1IgbtEn_H": [
            "inline static\tVOID\tIfDio_SetFlg_PE1IgbtEn_H( const FLAG indat )"
        ],
        "IfDio_GetFlg_PE1IgbtEn_H": [
            "inline static\tFLAG\tIfDio_GetFlg_PE1IgbtEn_H( VOID )"
        ],
        "IfDio_SetFlg_PE1IgbtEn_L": [
            "inline static\tVOID\tIfDio_SetFlg_PE1IgbtEn_L( const FLAG indat )"
        ],
        "IfDio_GetFlg_PE1IgbtEn_L": [
            "inline static\tFLAG\tIfDio_GetFlg_PE1IgbtEn_L( VOID )"
        ],
        "IfDio_SetFlg_PE1IgbtEn_H_Req": [
            "inline static\tVOID\tIfDio_SetFlg_PE1IgbtEn_H_Req( const FLAG data )"
        ],
        "IfDio_GetFlg_PE1IgbtEn_H_Req": [
            "inline static\tFLAG\tIfDio_GetFlg_PE1IgbtEn_H_Req( VOID )"
        ],
        "IfDio_SetFlg_PE1IgbtEn_L_Req": [
            "inline static\tVOID\tIfDio_SetFlg_PE1IgbtEn_L_Req( const FLAG data )"
        ],
        "IfDio_GetFlg_PE1IgbtEn_L_Req": [
            "inline static\tFLAG\tIfDio_GetFlg_PE1IgbtEn_L_Req( VOID )"
        ]
    },
    "PE1IGBTAbst.c": {
        "Pe1IgbtAbst_Init": [
            "VOID\tPe1IgbtAbst_Init( VOID )"
        ],
        "Pe1IgbtAbst_Main": [
            "VOID\tPe1IgbtAbst_Main( VOID )"
        ]
    },
    "PE1IGBTAbst.h": {},
    "dio_ifp_PE2IGBTAbst.c": {
        "DioIfp_Output_PE2IgbtInit": [
            "VOID\tDioIfp_Output_PE2IgbtInit( VOID )"
        ],
        "DioIfp_Input_Port_PE2IgbtFlt": [
            "VOID\tDioIfp_Input_Port_PE2IgbtFlt( VOID )"
        ],
        "DioIfp_Output_PE2IgbtEn": [
            "static\tVOID\tDioIfp_Output_PE2IgbtEn( VOID )"
        ],
        "DioIfp_Output_PE2IgbtEn_H": [
            "static\tVOID\tDioIfp_Output_PE2IgbtEn_H( VOID )"
        ],
        "DioIfp_Output_PE2IgbtEn_L": [
            "static\tVOID\tDioIfp_Output_PE2IgbtEn_L( VOID )"
        ],
        "DioIfp_Output_IgbtEn_PE2Main": [
            "VOID\tDioIfp_Output_IgbtEn_PE2Main( VOID )"
        ]
    },
    "dio_ifp_PE2IGBTAbst.h": {},
    "dio_prm_PE2IGBTAbst.c": {
        "DioPrm_Init_PE2Igbt": [
            "VOID\tDioPrm_Init_PE2Igbt( VOID )"
        ],
        "DioPrm_Input_PE2IgbtFlt": [
            "VOID\tDioPrm_Input_PE2IgbtFlt( VOID )"
        ],
        "DioPrm_Renewal_PE2IgbtFlt": [
            "VOID\tDioPrm_Renewal_PE2IgbtFlt( VOID )"
        ],
        "DioPrm_Renewal_ReqPE2IgbtInit": [
            "VOID\tDioPrm_Renewal_ReqPE2IgbtInit( VOID )"
        ],
        "DioPrm_Renewal_SysReqPE2Igbt": [
            "VOID\tDioPrm_Renewal_SysReqPE2Igbt( VOID )"
        ],
        "DioPrm_Renewal_ReqPE2IgbtEn": [
            "VOID\tDioPrm_Renewal_ReqPE2IgbtEn( VOID )"
        ],
        "DioPrm_Renewal_ReqPE2IgbtEn_H": [
            "VOID\tDioPrm_Renewal_ReqPE2IgbtEn_H( VOID )"
        ],
        "DioPrm_Renewal_ReqPE2IgbtEn_L": [
            "VOID\tDioPrm_Renewal_ReqPE2IgbtEn_L( VOID )"
        ]
    },
    "dio_prm_PE2IGBTAbst.h": {},
    "if_dio_PE2IGBTAbst.c": {},
    "if_dio_PE2IGBTAbst.h": {
        "IfDio_SetFlg_PE2IgbtInit": [
            "inline static\tVOID\tIfDio_SetFlg_PE2IgbtInit( const FLAG indat )"
        ],
        "IfDio_GetFlg_PE2IgbtInit": [
            "inline static\tFLAG\tIfDio_GetFlg_PE2IgbtInit( VOID )"
        ],
        "IfDio_SetFlg_PE2IgbtFlt": [
            "inline static\tVOID\tIfDio_SetFlg_PE2IgbtFlt( const FLAG indat, const UCHAR num )"
        ],
        "IfDio_GetFlg_PE2IgbtFlt": [
            "inline static\tFLAG\tIfDio_GetFlg_PE2IgbtFlt( const UCHAR num )"
        ],
        "IfDio_SetFlg_PE2IgbtInitReq": [
            "inline static\tVOID\tIfDio_SetFlg_PE2IgbtInitReq( const FLAG data )"
        ],
        "IfDio_GetFlg_PE2IgbtInitReq": [
            "inline static\tFLAG\tIfDio_GetFlg_PE2IgbtInitReq( VOID )"
        ],
        "IfDio_SetFlg_PE2IgbtEn": [
            "inline static\tVOID\tIfDio_SetFlg_PE2IgbtEn( const FLAG indat )"
        ],
        "IfDio_GetFlg_PE2IgbtEn": [
            "inline static\tFLAG\tIfDio_GetFlg_PE2IgbtEn( VOID )"
        ],
        "IfDio_SetFlg_PE2IgbtEnReq": [
            "inline static\tVOID\tIfDio_SetFlg_PE2IgbtEnReq( const FLAG data )"
        ],
        "IfDio_GetFlg_PE2IgbtEnReq": [
            "inline static\tFLAG\tIfDio_GetFlg_PE2IgbtEnReq( VOID )"
        ],
        "IfDio_SetFlg_PE2IgbtEn_H": [
            "inline static\tVOID\tIfDio_SetFlg_PE2IgbtEn_H( const FLAG indat )"
        ],
        "IfDio_GetFlg_PE2IgbtEn_H": [
            "inline static\tFLAG\tIfDio_GetFlg_PE2IgbtEn_H( VOID )"
        ],
        "IfDio_SetFlg_PE2IgbtEn_L": [
            "inline static\tVOID\tIfDio_SetFlg_PE2IgbtEn_L( const FLAG indat )"
        ],
        "IfDio_GetFlg_PE2IgbtEn_L": [
            "inline static\tFLAG\tIfDio_GetFlg_PE2IgbtEn_L( VOID )"
        ],
        "IfDio_SetFlg_PE2IgbtEn_H_Req": [
            "inline static\tVOID\tIfDio_SetFlg_PE2IgbtEn_H_Req( const FLAG data )"
        ],
        "IfDio_GetFlg_PE2IgbtEn_H_Req": [
            "inline static\tFLAG\tIfDio_GetFlg_PE2IgbtEn_H_Req( VOID )"
        ],
        "IfDio_SetFlg_PE2IgbtEn_L_Req": [
            "inline static\tVOID\tIfDio_SetFlg_PE2IgbtEn_L_Req( const FLAG data )"
        ],
        "IfDio_GetFlg_PE2IgbtEn_L_Req": [
            "inline static\tFLAG\tIfDio_GetFlg_PE2IgbtEn_L_Req( VOID )"
        ]
    },
    "PE2IGBTAbst.c": {
        "Pe2IgbtAbst_Init": [
            "VOID\tPe2IgbtAbst_Init( VOID )"
        ],
        "Pe2IgbtAbst_Main": [
            "VOID\tPe2IgbtAbst_Main( VOID )"
        ]
    },
    "PE2IGBTAbst.h": {},
    "IGBTMgr.c": {
        "IGBTMgr_Init": [
            "void IGBTMgr_Init(void)"
        ],
        "IGBTMgr_Main": [
            "void IGBTMgr_Main(void)"
        ]
    },
    "IGBTMgr.h": {},
    "IGBTMgr_MemMap.h": {},
    "Rte_IGBTMgr.h": {},
    "Rte_IGBTMgr_Type.h": {},
    "typedef.h": {}
}